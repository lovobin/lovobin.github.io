<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>源于此</title>
  
  <subtitle>源？即是缘</subtitle>
  <link href="https://lovobin.github.io/atom.xml" rel="self"/>
  
  <link href="https://lovobin.github.io/"/>
  <updated>2021-03-17T05:10:00.430Z</updated>
  <id>https://lovobin.github.io/</id>
  
  <author>
    <name>源于此</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>英语学习</title>
    <link href="https://lovobin.github.io/2021/03/16/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/"/>
    <id>https://lovobin.github.io/2021/03/16/%E8%8B%B1%E8%AF%AD%E5%AD%A6%E4%B9%A0/</id>
    <published>2021-03-16T19:15:39.000Z</published>
    <updated>2021-03-17T05:10:00.430Z</updated>
    
    <content type="html"><![CDATA[<h1 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h1><blockquote><div class="row">    <embed src="https://cdn.jsdelivr.net/gh/lovobin/hiddenContent@v1.0.7/PDF/learnEnglish.pdf" width="100%" height="550" type="application/pdf"></div><p><a href="javascript:;">后续补充中····</a></p></blockquote><h1 id="时态使用总结"><a href="#时态使用总结" class="headerlink" title="时态使用总结"></a>时态使用总结</h1><h2 id="一般现在时"><a href="#一般现在时" class="headerlink" title="一般现在时"></a>一般现在时</h2><h2 id="现在完成时"><a href="#现在完成时" class="headerlink" title="现在完成时"></a>现在完成时</h2><blockquote><p><code>have/has done</code></p></blockquote><ol><li><p>标志性时间状语</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">标志词:</span><br><span class="line"></span><br><span class="line">already recently/lately 已经</span><br><span class="line"></span><br><span class="line">到现在: by/up to + now,so far ,yet</span><br><span class="line">    </span><br><span class="line">    一段时间: <span class="keyword">for</span> + 一段时间， <span class="keyword">in</span> the past sew years</span><br><span class="line">    </span><br><span class="line">    over the past few years</span><br><span class="line">    </span><br><span class="line">    自从: since + 过去时间</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>固定句式</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">This / It is + 序数词 + that + 现在完成时(have/has down) 翻译: 这是某人第几次做某事</span><br><span class="line"></span><br><span class="line">This/It is + 最高级 + that + 现在完成时(have/has down)  翻译: 这是某人做过的最···的事</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Eg</code></p><blockquote><p>This is the <code>first time that</code> I  <code>have visited</code>  The Great Wall.</p><p>This is the <code>most interesting</code> file  <code>that</code> I <code>have seen</code>.</p></blockquote></li></ol><h2 id="现在完成进行时"><a href="#现在完成进行时" class="headerlink" title="现在完成进行时"></a>现在完成进行时</h2><blockquote><p><code>have/has benn doing</code></p><p>总体思维:  <code>过去发生,持续到现,继续持续</code></p><p>现在完成时的替补用法</p><p>Eg:   Since graduated from the university,he<code>has been working</code> in an accounting company in Beijing.</p></blockquote><h2 id="过去完成时"><a href="#过去完成时" class="headerlink" title="过去完成时"></a>过去完成时</h2><blockquote><p><code>had done</code></p></blockquote><ol><li><p>过去的过去</p></li><li><p>标志性时间状语</p><blockquote><ol><li>by/until/up to + 过去时间</li><li>By the time + 一般过去时的句子 (did)</li><li>before + 过去时间</li></ol></blockquote></li><li><p>固定句型</p><blockquote><p>This/It was + <code>序数词</code> + that + 过去完成时  翻译: 这是某人第几次做某事</p><p>This/It was + <code>最高级</code> + that + 过去完成时 翻译:  这是某人做过的最···的事  </p></blockquote></li><li><p>三胞胎</p><blockquote><p>hardly/scarcely    ·  [<code>时态: had done</code>] ·    <code>when</code> ·[一般过去时 <code>did</code>]·</p><p>no sooner   ·  [<code>时态: had done</code>] ·   <code>than</code>   ·[一般过去时 <code>did</code>]·</p><p>翻译:  一  ··· 就 ···</p></blockquote></li></ol><h2 id="将来完成时"><a href="#将来完成时" class="headerlink" title="将来完成时"></a>将来完成时</h2><blockquote><p><code>will/shall have + done</code></p></blockquote><ol><li><p> by/until/up to + 将来的时间</p></li><li><p>by the time + 一般现在时的句子<code>(do/does)</code></p></li><li><p>差异比较</p><blockquote><p>By  the time I <code>arrived</code> in Beijing, he <code>had finished</code> his novel.   [arrived: did  一般过去时  <code>had finished</code>]</p><p>By the time I <code>arrive</code> in Beijing, he <code>will have finished</code> his novel. [arrive: do 一般现在时 , 将来完成时]</p></blockquote></li></ol><h2 id="过去将来时"><a href="#过去将来时" class="headerlink" title="过去将来时"></a>过去将来时</h2><blockquote><p>结构: <code>would do </code> , <code>was/ were going to do</code></p></blockquote><ul><li><p>含义</p><blockquote><p>站在过去,展望未来。</p><p>Eg: <code>她曾经说要和我在一起</code></p></blockquote></li></ul><h1 id="语态使用总结"><a href="#语态使用总结" class="headerlink" title="语态使用总结"></a>语态使用总结</h1><h2 id="被动语态的构成"><a href="#被动语态的构成" class="headerlink" title="被动语态的构成"></a>被动语态的构成</h2><blockquote><p><code>be + done</code></p></blockquote><table><thead><tr><th align="center">语态被动</th><th align="center">结构</th></tr></thead><tbody><tr><td align="center">一般现在时被动</td><td align="center"><code>am/is/are done</code></td></tr><tr><td align="center">一般过去时被动</td><td align="center"><code>was/were done</code></td></tr><tr><td align="center">一般将来时被动</td><td align="center"><code>will be done </code></td></tr><tr><td align="center">现在进行时被动</td><td align="center"><code>am/is/are being done </code></td></tr><tr><td align="center">过去进行时时被动</td><td align="center"><code>was/were being done </code></td></tr><tr><td align="center">现在完成时被动</td><td align="center"><code>have/has been done</code></td></tr><tr><td align="center">过去完成时被动</td><td align="center"><code>had been done</code></td></tr><tr><td align="center">将来完成时被动</td><td align="center"><code>will have been done</code></td></tr></tbody></table><ul><li><p>分析</p><table><thead><tr><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th></tr></thead><tbody><tr><td align="center"><code>tell</code>[原型: 一般现在时]</td><td align="center"><code>are told</code>[be done ： 被动 一般现在时被动]</td><td align="center"><code>is telling</code>[be doing 现在进行时]</td><td align="center"><code>tells</code>[单三: 一般现在时]</td></tr><tr><td align="center"><code>are arguing</code></td><td align="center"><code>was being argued</code>[过去进行时被动]</td><td align="center"><code>have argued</code></td><td align="center"><code>has been argued</code>[现在完成时被动]</td></tr><tr><td align="center"><code>had been taken</code>[过去完成时被动]</td><td align="center"><code>was took</code>【错误形式】</td><td align="center"><code>was taken</code></td><td align="center"><code>took</code></td></tr><tr><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><blockquote><p>Eg. The water will be much more polluted unless some measures <code> are taken</code> right now.</p><p><code>unless </code>= <code>if not</code></p><p>【if】： 主将从先</p></blockquote></li></ul><h1 id="虚拟语气"><a href="#虚拟语气" class="headerlink" title="虚拟语气"></a>虚拟语气</h1><h2 id="if-条件虚拟"><a href="#if-条件虚拟" class="headerlink" title="if 条件虚拟"></a>if 条件虚拟</h2><ul><li><p>对过去虚拟</p><table><thead><tr><th align="center">if从句</th><th align="center">主句</th></tr></thead><tbody><tr><td align="center"><code>had done </code></td><td align="center"><code>would/could/should/might + have done</code></td></tr></tbody></table></li><li><p>对现在虚拟</p><table><thead><tr><th align="center">if从句</th><th align="center">主句</th></tr></thead><tbody><tr><td align="center"><code>did</code>(<code>be 用 were</code>)</td><td align="center"><code>would/could/should/might + do</code></td></tr></tbody></table></li><li><p>对将来虚拟</p><table><thead><tr><th align="center">if从句</th><th align="center">主句</th></tr></thead><tbody><tr><td align="center"><code>did(be 用 were)</code></td><td align="center"><code>w/c/s/m + do</code></td></tr><tr><td align="center"><code>were to do</code></td><td align="center"><code>w/c/s/m + do</code></td></tr><tr><td align="center"><code>should do</code></td><td align="center"><code>w/c/s/m + do</code></td></tr></tbody></table></li></ul><h2 id="省略-if-的虚拟"><a href="#省略-if-的虚拟" class="headerlink" title="省略 if 的虚拟"></a>省略 if 的虚拟</h2><blockquote></blockquote><h2 id="错综虚拟"><a href="#错综虚拟" class="headerlink" title="错综虚拟"></a>错综虚拟</h2><blockquote></blockquote><h1 id="定语从句"><a href="#定语从句" class="headerlink" title="定语从句"></a>定语从句</h1><blockquote><p>定义：在一个复合句中，跟在主句后修饰某一名词或代词（统称为先行词）的从句叫做<strong>定语从句</strong>被定语从句所修饰的词叫做<a href="https://zh.m.wikibooks.org/w/index.php?title=%E5%85%88%E8%A1%8C%E8%AF%8D&action=edit&redlink=1">先行词</a>(Antecedent).定语从句通常跟在先行词之后,由<a href="https://zh.m.wikibooks.org/w/index.php?title=%E5%85%B3%E7%B3%BB%E8%AF%8D&action=edit&redlink=1">关系词</a>(Relatives)引出.因此,定语从句又可称为关系分句. 定语从句主要分为非限制性定语从句和限制性定语从句。</p></blockquote><ul><li><p>关系代词的基本用法</p><table><thead><tr><th align="center"></th><th align="center">人</th><th align="center">物</th><th align="center">人&amp;物</th></tr></thead><tbody><tr><td align="center">主干成分(主宾表)</td><td align="center"><code>who/that</code></td><td align="center"><code>which/that</code></td><td align="center"><code>taht</code></td></tr></tbody></table></li><li><p>非限制性定定语从句</p><blockquote><p>特点: 逗号分开   非限制    没有   <code>that</code></p></blockquote></li><li><p><code>whoose</code>的用法</p><table><thead><tr><th align="center">成分</th><th align="center">主宾表</th><th align="center">定语</th><th align="center">时间状语</th><th align="center">地点状语</th><th align="center">原因状语</th></tr></thead><tbody><tr><td align="center">先行词</td><td align="center">who/what/which</td><td align="center">whose</td><td align="center">when</td><td align="center">where</td><td align="center">why</td></tr></tbody></table></li></ul><h1 id="状语从句"><a href="#状语从句" class="headerlink" title="状语从句"></a>状语从句</h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;资源下载&quot;&gt;&lt;a href=&quot;#资源下载&quot; class=&quot;headerlink&quot; title=&quot;资源下载&quot;&gt;&lt;/a&gt;资源下载&lt;/h1&gt;&lt;blockquote&gt;


	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;https://cdn.jsd</summary>
      
    
    
    
    <category term="英语" scheme="https://lovobin.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo-后台管理配置</title>
    <link href="https://lovobin.github.io/2021/03/16/Hexo-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/"/>
    <id>https://lovobin.github.io/2021/03/16/Hexo-%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E9%85%8D%E7%BD%AE/</id>
    <published>2021-03-16T14:29:14.000Z</published>
    <updated>2021-03-17T05:10:00.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-后台管理配置"><a href="#Hexo-后台管理配置" class="headerlink" title="Hexo-后台管理配置"></a>Hexo-后台管理配置</h3><h4 id="后台管理系统效果预览"><a href="#后台管理系统效果预览" class="headerlink" title="后台管理系统效果预览"></a>后台管理系统效果预览</h4><ul><li><p>查看地址<a href="https://tiny-block-7b78.lovobin.workers.dev/hpp/admin/login">登录后台管理系统</a></p><p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210316143430727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MDQyMA==,size_16,color_FFFFFF,t_70#pic_center" alt="博客后台管理系统"></p></li><li><p>整体效果</p><p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210316143559692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MDQyMA==,size_16,color_FFFFFF,t_70#pic_center" alt="后台"></p></li></ul><h4 id="配置注意点"><a href="#配置注意点" class="headerlink" title="配置注意点"></a>配置注意点</h4><ul><li>需集成部署</li><li>源代码仓库需配置<code>tocken</code></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Hexo-后台管理配置&quot;&gt;&lt;a href=&quot;#Hexo-后台管理配置&quot; class=&quot;headerlink&quot; title=&quot;Hexo-后台管理配置&quot;&gt;&lt;/a&gt;Hexo-后台管理配置&lt;/h3&gt;&lt;h4 id=&quot;后台管理系统效果预览&quot;&gt;&lt;a href=&quot;#后台管理系统效</summary>
      
    
    
    
    <category term="Butterfly" scheme="https://lovobin.github.io/categories/Butterfly/"/>
    
    
  </entry>
  
  <entry>
    <title>Github-Actions-自动化部署总结</title>
    <link href="https://lovobin.github.io/2021/03/11/Github-Actions-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/"/>
    <id>https://lovobin.github.io/2021/03/11/Github-Actions-%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-11T22:20:00.000Z</published>
    <updated>2021-03-17T05:10:00.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="自动化部署"><a href="#自动化部署" class="headerlink" title="自动化部署"></a>自动化部署</h3><blockquote><p>感谢<code>小冰啵啰鸽</code>提供的帮助</p><p>自动化部署带来的便利: <code>由于时间积累下来,该站点添加的资源越来越多</code>，在经过<code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></p><p>之后花费的时间越来越长,引起的不便,于是看到了关于自动化部署.只需要对文件进行传统提交即可,<code>actions</code>自动进行<code>hexo</code>任务操作,</p><p>解决了不足问题。</p></blockquote><h4 id="创建github私有仓库"><a href="#创建github私有仓库" class="headerlink" title="创建github私有仓库"></a>创建<code>github</code>私有仓库</h4><ol><li><p>请备份博客原有内容 </p></li><li><p>创建仓库流程</p><ul><li><p>点击<code>github</code>头像左侧<code>加号</code>，也可以访问该链接进入: <a href="https://github.com/new">点击进入创建仓库</a></p></li><li><p>勾选<code>private</code></p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/privateRepo.png" width="300"></li></ul></li><li><p>私有仓库的作用: <code>存储博客源文件</code></p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/pricvate.png" width="600"></li><li><p>创建<code>git</code>密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新配置 密钥</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;github 的邮箱地址&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原有密钥在 C:\Users\computer-name\.ssh</span></span><br><span class="line">公钥: id_rsa.pub</span><br><span class="line">密钥: id_rsa</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在<code>github</code>私有仓库添加密钥</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 进入创建的私有仓库 </span><br><span class="line">2. 点击 Settings</span><br><span class="line">3. 在左侧导航栏目最低测有: Secrets</span><br><span class="line">4. 添加已有 git 私钥</span><br></pre></td></tr></table></figure></li></ul></li><li><p> 创建<code>tocken</code></p></li></ol><ul><li><a href="https://github.com/settings/tokens">Github-&gt;头像（右上角）-&gt;Settings-&gt;Developer Settings-&gt;Personal access tokens</a>-&gt;</li><li>勾选<code>repo</code></li><li>复制生成的<code>tocken</code>，保存,<code>后续操作如果个人失误会导致tocken不可用,只需重新生成即可</code></li></ul><h3 id="创建actions"><a href="#创建actions" class="headerlink" title="创建actions"></a>创建<code>actions</code></h3><ul><li><p>在私有仓库的博客根目录下创建一下结构</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- .github(文件夹)</span><br><span class="line">-- workflows(文件夹)</span><br><span class="line">-- xxx.yml (文件：名称随意 )</span><br></pre></td></tr></table></figure></li><li><p>个人<code>xxx.yml</code>文件内容</p><blockquote><p>说明: 个人使用两个仓库进行自动化部署</p><ol><li>仓库一: <code>github账户名.github.io 使用 master 分支,只用于生成类似于public下的静态文件</code></li><li>仓库二: <code>私有仓库源码存放 main 分支</code></li></ol></blockquote><div class="hide-block"><button type="button" class="hide-button button--animated" style="">Actions    </button><div class="hide-content"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 当有改动推送到master分支时，启动Action</span></span><br><span class="line">name: 自动部署</span><br><span class="line"></span><br><span class="line">on: [push, repository_dispatch]</span><br><span class="line"></span><br><span class="line"><span class="built_in">jobs</span>:</span><br><span class="line">  deploy:</span><br><span class="line">    runs-on: ubuntu-latest</span><br><span class="line">    steps:</span><br><span class="line">    - name: 检查分支</span><br><span class="line">      uses: actions/checkout@v2</span><br><span class="line">      with:</span><br><span class="line">        ref: main <span class="comment">#2020年10月后github新建仓库默认分支改为main，注意更改 私有仓库提交 main 分支</span></span><br><span class="line">        </span><br><span class="line">    - name: 安装 Node</span><br><span class="line">      uses: actions/setup-node@v1</span><br><span class="line">      with:</span><br><span class="line">        node-version: <span class="string">&quot;12.x&quot;</span></span><br><span class="line"></span><br><span class="line">    - name: 安装 Hexo</span><br><span class="line">      run: |</span><br><span class="line">        <span class="built_in">export</span> TZ=<span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line">        npm install hexo-cli gulp-cli -g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    - name: 缓存 Hexo</span><br><span class="line">      uses: actions/cache@v1</span><br><span class="line">      id: cache</span><br><span class="line">      with:</span><br><span class="line">        path: node_modules</span><br><span class="line">        key: <span class="variable">$&#123;&#123;runner.OS&#125;</span>&#125;-<span class="variable">$&#123;&#123;hashFiles(&#x27;**/package-lock.json&#x27;)&#125;</span>&#125;</span><br><span class="line"></span><br><span class="line">    - name: 安装依赖</span><br><span class="line">      <span class="keyword">if</span>: steps.cache.outputs.cache-hit != <span class="string">&#x27;true&#x27;</span></span><br><span class="line">      run: |</span><br><span class="line">        npm install --save</span><br><span class="line"></span><br><span class="line">    - name: 生成静态文件</span><br><span class="line">      run: |</span><br><span class="line">        gulp</span><br><span class="line"></span><br><span class="line">    - name: 部署</span><br><span class="line">      run: |</span><br><span class="line">        git config --global user.name <span class="string">&quot;lovobin&quot;</span> <span class="comment"># 需要修改处: lovobin </span></span><br><span class="line">        git config --global user.email <span class="string">&quot;3327511395@qq.com&quot;</span> <span class="comment"># 邮箱修改: </span></span><br><span class="line">        hexo deploy</span><br><span class="line"></span><br></pre></td></tr></table></figure></div></div></li><li><p>注意<code>gulp</code>任务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要在根目录下有文件: gulpfile.js</span><br><span class="line"></span><br><span class="line">可参考 `akilar.top/`中的静态资源有关的一篇文章</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="修改博客根目录下的配置文件"><a href="#修改博客根目录下的配置文件" class="headerlink" title="修改博客根目录下的配置文件"></a>修改博客根目录下的配置文件</h3><ul><li><p>修改<code>repo</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># _config.yml</span></span><br><span class="line">repo: https://账户名称:tocken@github.com/账户名称/账户名称.github.io.git</span><br><span class="line"><span class="comment"># repo: https://lovobin:[修改为tocken]@github.com/lovobin/lovobin.github.io.git </span></span><br><span class="line">  </span><br></pre></td></tr></table></figure></li><li><p>个人遇到其他事项</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">魔改主题时切勿为了方便对下载内容进行覆盖操作</span><br></pre></td></tr></table></figure></li></ul><h3 id="验证actions"><a href="#验证actions" class="headerlink" title="验证actions"></a>验证<code>actions</code></h3><p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210311232135692.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzM0MDQyMA==,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;自动化部署&quot;&gt;&lt;a href=&quot;#自动化部署&quot; class=&quot;headerlink&quot; title=&quot;自动化部署&quot;&gt;&lt;/a&gt;自动化部署&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;感谢&lt;code&gt;小冰啵啰鸽&lt;/code&gt;提供的帮助&lt;/p&gt;
&lt;p&gt;自动化部署带来的便利: </summary>
      
    
    
    
    <category term="Butterfly" scheme="https://lovobin.github.io/categories/Butterfly/"/>
    
    
    <category term="Butterfly" scheme="https://lovobin.github.io/tags/Butterfly/"/>
    
    <category term="Github-Actions" scheme="https://lovobin.github.io/tags/Github-Actions/"/>
    
  </entry>
  
  <entry>
    <title>编写接口文档</title>
    <link href="https://lovobin.github.io/2021/02/25/%E7%BC%96%E5%86%99%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    <id>https://lovobin.github.io/2021/02/25/%E7%BC%96%E5%86%99%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</id>
    <published>2021-02-25T17:28:05.000Z</published>
    <updated>2021-03-17T05:10:00.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-接口文档"><a href="#Node-接口文档" class="headerlink" title="Node-接口文档"></a>Node-接口文档</h3><h4 id="安装第三方模块"><a href="#安装第三方模块" class="headerlink" title="安装第三方模块"></a>安装第三方模块</h4><ul><li><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install apidoc -g</span><br></pre></td></tr></table></figure></li><li><p>接口源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; Router &#125; = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 User 对象</span></span><br><span class="line"><span class="keyword">const</span> UserIn = <span class="built_in">require</span>(<span class="string">&quot;../module/userModule&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api <span class="type">&#123;post&#125;</span> </span>/user/register 用户注册</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiName </span>用户注册</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiGroup <span class="variable">User</span></span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiParam <span class="type">&#123;String&#125;</span> </span>us 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiParam <span class="type">&#123;String&#125;</span> </span>ps 用户密码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span> </span>firstname Firstname of the User.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span> </span>lastname  Lastname of the User.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册接口</span></span><br><span class="line">router.post(<span class="string">&quot;/register&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取数据 body-parse</span></span><br><span class="line">  <span class="keyword">let</span> &#123; us, ps &#125; = req.body;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (us &amp;&amp; ps) &#123;</span><br><span class="line">    <span class="comment">// 唯一性判断 用户名查询</span></span><br><span class="line">    UserIn.find(&#123; us &#125;)</span><br><span class="line">      .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 如果用户名的长度为 0 则进行用户注册</span></span><br><span class="line">        <span class="keyword">if</span> (data.length === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="comment">// 不存在用户可以注册</span></span><br><span class="line">          <span class="keyword">return</span> UserIn.insertMany(&#123; <span class="attr">us</span>: us, <span class="attr">ps</span>: ps &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 用户名已经存在 不能进行注册</span></span><br><span class="line">          res.send(&#123; <span class="attr">error</span>: -<span class="number">3</span>, <span class="attr">msg</span>: <span class="string">&quot;用户名重复,请重新输入&quot;</span> &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 暂不理解</span></span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">          error: <span class="number">0</span>,</span><br><span class="line">          msg: <span class="string">&quot;注册成功&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">          error: <span class="number">2</span>,</span><br><span class="line">          msg: <span class="string">&quot;注册失败&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.send(&#123; <span class="attr">error</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&quot;参数错误&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@api <span class="type">&#123;post&#125;</span> </span>/user/login 用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiName </span>用户登录</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiGroup <span class="variable">User</span></span></span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiParam <span class="type">&#123;String&#125;</span> </span>us 用户名</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiParam <span class="type">&#123;String&#125;</span> </span>ps 用户密码</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span> </span>firstname Firstname of the User.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span> </span>lastname  Lastname of the User.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 登录接口</span></span><br><span class="line">router.post(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; us, ps &#125; = req.body;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!us || !ps) &#123;</span><br><span class="line">    res.send(&#123; <span class="attr">err</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&quot;参数错误&quot;</span> &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//  UserIn.find(&#123;us:us,ps:ps&#125;);</span></span><br><span class="line">  UserIn.find(&#123; us, ps &#125;)</span><br><span class="line">    .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 成功: 响应出查询数据</span></span><br><span class="line">      <span class="keyword">if</span> (data.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        res.send(&#123; <span class="attr">error</span>: <span class="number">0</span>, <span class="attr">msg</span>: <span class="string">&quot;right login&quot;</span> &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.send(&#123;</span><br><span class="line">          error: -<span class="number">2</span>,</span><br><span class="line">          msg: <span class="string">&quot;用户名或密码错误&quot;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失败: 给出失败信息</span></span><br><span class="line">      <span class="keyword">return</span> res.send(&#123; <span class="attr">error</span>: -<span class="number">1</span>, <span class="attr">msg</span>: <span class="string">&quot;内部错误&quot;</span> &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用<code>apidoc</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">apidoc -i ./ -o ./apidoc/ [文件添加注释改动后继续执行]</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">-i</span><br><span class="line">-o 指定生成文件路径</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">新建文件命名为: apidoc.json [必须是该名称]</span><br><span class="line"></span><br><span class="line">接口文档添加注释: </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@api <span class="type">&#123;get&#125;</span> </span>/user/:id Request User information  【请求类型+参数】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@apiName </span>GetUser 【api 名称】</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@apiGroup </span>User </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@apiParam <span class="type">&#123;Number&#125;</span> </span>id Users unique ID. 【参数】</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span> </span>firstname Firstname of the User. </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@apiSuccess <span class="type">&#123;String&#125;</span> </span>lastname  Lastname of the User.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>其他信息添加</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://apidocjs.com/</span><br></pre></td></tr></table></figure></li><li><p>个人接口文档最终效果</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/registerNode.png" alt="接口文档"></li><li><p>上传<code>github</code></p></li><li><p>访问地址: <a href="https://lovobin.github.io/Node-Api/index.html"> 等待更新 ····</a></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Node-接口文档&quot;&gt;&lt;a href=&quot;#Node-接口文档&quot; class=&quot;headerlink&quot; title=&quot;Node-接口文档&quot;&gt;&lt;/a&gt;Node-接口文档&lt;/h3&gt;&lt;h4 id=&quot;安装第三方模块&quot;&gt;&lt;a href=&quot;#安装第三方模块&quot; class=&quot;he</summary>
      
    
    
    
    <category term="Node" scheme="https://lovobin.github.io/categories/Node/"/>
    
    
    <category term="Node" scheme="https://lovobin.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrap-框架</title>
    <link href="https://lovobin.github.io/2021/02/18/Bootstrap-%E6%A1%86%E6%9E%B6/"/>
    <id>https://lovobin.github.io/2021/02/18/Bootstrap-%E6%A1%86%E6%9E%B6/</id>
    <published>2021-02-18T11:35:16.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Bootstrap-框架"><a href="#Bootstrap-框架" class="headerlink" title="Bootstrap-框架"></a>Bootstrap-框架</h3><h4 id="响应式开发原理"><a href="#响应式开发原理" class="headerlink" title="响应式开发原理"></a>响应式开发原理</h4><blockquote><p>就是使用媒体查询针对不同宽度的设备进行布局和样式的设置,从而适配不同设备的目的</p></blockquote><table><thead><tr><th align="center">设备划分</th><th align="center">尺寸区间</th><th align="center">划分</th><th align="center">类前缀</th></tr></thead><tbody><tr><td align="center">超小屏幕(<code>手机</code>)</td><td align="center"><code>&lt;768px</code></td><td align="center"><code>100%</code></td><td align="center"><code>.col-xs-</code></td></tr><tr><td align="center">小屏设备(<code>平板</code>)</td><td align="center"><code>&gt;=768px ~ &lt;992px</code></td><td align="center"><code>750px</code></td><td align="center"><code>.col-sm-</code></td></tr><tr><td align="center">中等屏幕(<code>桌面显示器</code>)</td><td align="center"><code>&gt;=992px ~ &gt;1200px</code></td><td align="center"><code>970px</code></td><td align="center"><code>.col-md-</code></td></tr><tr><td align="center">宽屏设备(<code>大桌面显示器</code>)</td><td align="center"><code>&gt;=1200px</code></td><td align="center"><code>1170</code></td><td align="center"><code>.col-lg-</code></td></tr></tbody></table><h4 id="响应式布局容器"><a href="#响应式布局容器" class="headerlink" title="响应式布局容器"></a>响应式布局容器</h4><blockquote><p>响应式需要一个父级作为布局容器,来配合子级元素来实现变化效果</p><p>原理: 就是在不同屏幕下,通过媒体查询来改变这个布局容器的大小，在改变里面子元素的排列方式和大小,从而实现不同屏幕下,看到不同的页面布局和样式变化。</p></blockquote><h4 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h4><blockquote><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code>容器,Bootstrap 预先定义好了这个类,叫<code>.container</code>，它提供了两个做此用处的类。</p></blockquote><h4 id="栅格选项参数"><a href="#栅格选项参数" class="headerlink" title="栅格选项参数"></a>栅格选项参数</h4><ul><li><p>参数</p><blockquote><p>栅格系统用于通过一系列的行于列的组合来创建页面布局,你的内容就可以放入这些创建好的布局中</p></blockquote></li><li><p>按照不同屏幕划分为<code>1~12</code>等份</p></li><li><p>行可以去除父容器作用 <code>15px</code>的边距</p></li><li><p><code>xs-extra small</code>：超小,<code>sm-small</code>：小，<code>ms-medium</code>:中等，<code>lg-large</code>:大</p></li><li><p>列大于 <code>12</code>，多余的列所在的元素将最为一个整体另起一行排列</p></li><li><p>每一列默认有左右 <code>15px</code>的<code>padding</code></p></li><li><p>可以同时为一列指定多个设备的类名，以便于不同份数</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/bootstrap.png"></li></ul><h4 id="列嵌套"><a href="#列嵌套" class="headerlink" title="列嵌套"></a>列嵌套</h4><blockquote><p>栅格系统内置的栅格系统将内容再次嵌套</p><p>就是一个列内再分成若干份小列，可以通过添加一个新的 <code>.row</code>元素和一系列 <code>.col-sm-</code>元素到已经存在的<code>.col-sm-</code>元素内</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">嵌套列最好加一个行 <span class="string">`row`</span>，这样可以取消父元素的 padding 值,而且高度自动和父级一样高</span><br></pre></td></tr></table></figure><h4 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h4><blockquote><p>使用<code>.col-md-offset-</code>类可以将列向右偏移。这些类实际是通过<code>*</code>选择器为当前元素增加了左侧的边距<code>margin</code></p></blockquote><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src='https://gitee.com/wang_hong_bin/repo-bin/raw/master/offset.png'><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/writeOffset.png"><ul><li><p>中间偏移–居中显示</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/centerOffset.png"></li></ul><h4 id="列排序"><a href="#列排序" class="headerlink" title="列排序"></a>列排序</h4><blockquote><p>通过使用 <code>.col-md-push-*</code>和<code>.col-md-pull-*</code>类就可以容易的改变列的顺序</p></blockquote><h4 id="响应式工具"><a href="#响应式工具" class="headerlink" title="响应式工具"></a>响应式工具</h4><blockquote><p>为了加快对移动设备友好的页面开发工作,利用媒体查询功能,并使用这些工具可以方便的针对不同设备展示或隐藏页面内容</p></blockquote><table><thead><tr><th align="center">隐藏类</th><th align="center">超小屏</th><th align="center">小屏</th><th align="center">中屏</th><th align="center">大屏</th><th align="center">可见类</th></tr></thead><tbody><tr><td align="center"><code>.hidden-xs</code></td><td align="center">隐藏</td><td align="center">可见</td><td align="center">可见</td><td align="center">可见</td><td align="center"><code>.visible-xs</code></td></tr><tr><td align="center"><code>.hidden-sm</code></td><td align="center">可见</td><td align="center">隐藏</td><td align="center">可见</td><td align="center">可见</td><td align="center"><code>.visible-sm</code></td></tr><tr><td align="center"><code>.hidden-md</code></td><td align="center">可见</td><td align="center">可见</td><td align="center">隐藏</td><td align="center">可见</td><td align="center"><code>.visible-md</code></td></tr><tr><td align="center"><code>.hidden-lg</code></td><td align="center">可见</td><td align="center">可见</td><td align="center">可见</td><td align="center">隐藏</td><td align="center"><code>.visible-lg</code></td></tr></tbody></table><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210218181445529.gif"><h3 id="案例实战"><a href="#案例实战" class="headerlink" title="案例实战"></a>案例实战</h3><ul><li><p><code>bootstrap</code>中的内边距</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/alibaixiu.png"></li><li><p>清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类: clearfix</span><br></pre></td></tr></table></figure></li><li><p>响应式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">主要通过媒体查询进行屏幕尺寸控制 </span><br></pre></td></tr></table></figure></li><li><p>总结</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">移动端布局:</span><br><span class="line">流式布局(百分比)</span><br><span class="line">flex</span><br><span class="line">rem</span><br><span class="line">媒体查询</span><br><span class="line"></span><br><span class="line">主要需要选择一套主方案,其余为辅, 配合完成响应式布局</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h3 id="效果案例"><a href="#效果案例" class="headerlink" title="效果案例"></a>效果案例</h3><p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210221103806743.gif#pic_center" alt="BootStrap响应式布局"></p><h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><ol><li>文件进行<code>git</code>上传</li><li> 开启<code>git pages</code></li><li> 文件进行<code>cdn</code>加速处理</li><li> 项目预览: <a href="https://lovobin.github.io/AliBaixiu/index.html">Bootstrap-响应式</a></li></ol><h3 id="整体回顾"><a href="#整体回顾" class="headerlink" title="整体回顾"></a>整体回顾</h3><ol><li>先进行<code>PC</code>整体端布局<ul><li>划分区块</li><li>将整个页面划分为 <code>左(2) 中(7) 右(3)</code></li></ul></li><li> 左侧导航布局</li></ol><ul><li><code>logo</code>和<code>nav</code></li><li><code>logo</code>中使用<code>hidden-xs</code>在小屏对图片隐藏处理</li><li><code>nav</code>由原来的 <code>100%</code>改为<code>width: 20%</code>并进行浮动处理</li></ul><ol start="3"><li> 中间部分</li></ol><ul><li>图片不需要设置宽度,将会根据<code>7等比占据大小</code></li><li>当我们处于超小屏幕 <code>news</code> 第一个<code>li</code>宽度为 <code>100% </code>剩下的各占 <code>50% </code></li><li>当处于超小屏下对文字大小和图片进行隐藏处理</li></ul><ol start="4"><li> 右侧区域</li></ol><ul><li>仅对样式添加,未进行其他操作</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Bootstrap-框架&quot;&gt;&lt;a href=&quot;#Bootstrap-框架&quot; class=&quot;headerlink&quot; title=&quot;Bootstrap-框架&quot;&gt;&lt;/a&gt;Bootstrap-框架&lt;/h3&gt;&lt;h4 id=&quot;响应式开发原理&quot;&gt;&lt;a href=&quot;#响应式开发原</summary>
      
    
    
    
    <category term="Bootstrap" scheme="https://lovobin.github.io/categories/Bootstrap/"/>
    
    
    <category term="HTML" scheme="https://lovobin.github.io/tags/HTML/"/>
    
    <category term="bootstrap" scheme="https://lovobin.github.io/tags/bootstrap/"/>
    
  </entry>
  
  <entry>
    <title>Node-多人博客项目</title>
    <link href="https://lovobin.github.io/2021/02/18/Node-%E5%A4%9A%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/"/>
    <id>https://lovobin.github.io/2021/02/18/Node-%E5%A4%9A%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%A1%B9%E7%9B%AE/</id>
    <published>2021-02-18T10:05:56.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node-多人博客项目"><a href="#Node-多人博客项目" class="headerlink" title="Node-多人博客项目"></a>Node-多人博客项目</h3><h4 id="day01-案例初始化"><a href="#day01-案例初始化" class="headerlink" title="day01-案例初始化"></a>day01-案例初始化</h4><ol><li><p>建立项目所需的文件夹</p><ul><li><code>public</code>静态资源存放目录</li><li><code>model</code> 数据库操作存放目录</li><li><code>route</code>路由存放目录</li><li><code>views</code>模板</li></ul></li><li><p>初始化项目描述文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br></pre></td></tr></table></figure></li><li><p> 下载项目所需的第三方模块</p></li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express mongoose art-template express-art-template</span><br></pre></td></tr></table></figure><ol start="4"><li> 创建网站服务器</li></ol>   <img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/nodeBlog.png"><ol start="5"><li> 模块化路由</li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***************** home *********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************/</span></span><br><span class="line"><span class="comment">// home.js: 首页展示路由</span></span><br><span class="line"><span class="comment">/****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现模块化路由</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> home = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二级路由</span></span><br><span class="line">home.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&quot;欢迎来到博客首页&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = home;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/***************** admin *********************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/****************************/</span></span><br><span class="line"><span class="comment">// admin.js 用户管理路由</span></span><br><span class="line"><span class="comment">/****************************/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现模块化路由</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> admin = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建二级路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建登录路由</span></span><br><span class="line">admin.get(<span class="string">&quot;/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&quot;admin/login&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将路由对象作为模块成员进行导出</span></span><br><span class="line"><span class="built_in">module</span>.exports = admin;</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.js: </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 引入路由</span></span><br><span class="line">    <span class="keyword">const</span> home = <span class="built_in">require</span>(<span class="string">&quot;./Node-Blog/route/home&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> admin = <span class="built_in">require</span>(<span class="string">&quot;./Node-Blog/route/admin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 为路由匹配请求路径</span></span><br><span class="line">    app.use(<span class="string">&quot;/home&quot;</span>, home);</span><br><span class="line">    app.use(<span class="string">&quot;/admin&quot;</span>, admin);</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p><code>模板中的文件的相对路径是相对于浏览器的请求路径的,外联资源使用绝对路径 /</code></p></blockquote><ol start="6"><li><p>模板引擎配置使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">app.js:</span><br><span class="line"></span><br><span class="line">    <span class="comment">/***************************/</span></span><br><span class="line">    <span class="comment">// 配置模板引擎</span></span><br><span class="line">    <span class="comment">/***************************/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 告诉 express 框架模板所在的位置 &#x27;views 默认参数&#x27;</span></span><br><span class="line">    app.set(<span class="string">&quot;views&quot;</span>, path.join(__dirname, <span class="string">&quot;Node-Blog&quot;</span>, <span class="string">&quot;views&quot;</span>));</span><br><span class="line">    <span class="comment">// 告诉 express 框架模板的默认后缀是什么 &#x27;view engine 默认参数&#x27;</span></span><br><span class="line">    app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;art&quot;</span>);</span><br><span class="line">    <span class="comment">// 当渲染后缀为 art 的模板时,所使用的模板引擎是什么</span></span><br><span class="line">    app.engine(<span class="string">&quot;art&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;express-art-template&quot;</span>));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开放静态资源文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">app.js:</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放静态资源文件</span></span><br><span class="line">    <span class="keyword">const</span> pathname = path.join(__dirname, <span class="string">&quot;Node-Blog&quot;</span>, <span class="string">&quot;public&quot;</span>);</span><br><span class="line">    app.use(express.static(pathname));</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Node-多人博客项目&quot;&gt;&lt;a href=&quot;#Node-多人博客项目&quot; class=&quot;headerlink&quot; title=&quot;Node-多人博客项目&quot;&gt;&lt;/a&gt;Node-多人博客项目&lt;/h3&gt;&lt;h4 id=&quot;day01-案例初始化&quot;&gt;&lt;a href=&quot;#day01-</summary>
      
    
    
    
    <category term="Node" scheme="https://lovobin.github.io/categories/Node/"/>
    
    
    <category term="Node" scheme="https://lovobin.github.io/tags/Node/"/>
    
    <category term="Node实战案例" scheme="https://lovobin.github.io/tags/Node%E5%AE%9E%E6%88%98%E6%A1%88%E4%BE%8B/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB-使用</title>
    <link href="https://lovobin.github.io/2021/02/15/MongoDB-%E4%BD%BF%E7%94%A8/"/>
    <id>https://lovobin.github.io/2021/02/15/MongoDB-%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-15T10:02:12.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mongodb-数据库"><a href="#Mongodb-数据库" class="headerlink" title="Mongodb-数据库"></a>Mongodb-数据库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">说明描述:</span><br><span class="line"></span><br><span class="line">collection-name 自定义集合名</span><br><span class="line"></span><br><span class="line">    [ ]  可选参数</span><br><span class="line"></span><br><span class="line">    db.collection-name.find().pretty(); <span class="comment"># 命令行中格式化显示某集合</span></span><br><span class="line"></span><br><span class="line">    bin:  安装 mongodb 的 bin 目录下</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">windows+r: mongo [进入交互式命令行模式]</span><br><span class="line"></span><br><span class="line">退出: <span class="built_in">exit</span> / ctrl + D</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h4><ul><li><p>查询数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br><span class="line">    admin   <span class="number">0.</span>000GB</span><br><span class="line">    config  <span class="number">0.</span>000GB</span><br><span class="line">    local   <span class="number">0.</span>000GB</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">use database-name;</span><br><span class="line"></span><br><span class="line">&gt; use admin;</span><br><span class="line">switched to db admin</span><br><span class="line"></span><br><span class="line">注意: 在 mongodb 中使用不存在的数据库时不会报错,会自动隐式创建不存在的数据库</span><br></pre></td></tr></table></figure></li><li><p>查看集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections;</span><br></pre></td></tr></table></figure></li><li><p>创建集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">db.createCollection(<span class="string">&#x27;collection-name&#x27;</span>);</span><br><span class="line"></span><br><span class="line">&gt; db.createCollection(<span class="string">&#x27;student&#x27;</span>);</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line"></span><br><span class="line">注意: createCollection 没有 s</span><br></pre></td></tr></table></figure></li><li><p>删除集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">语法:</span><br><span class="line">db.collection-name.drop();</span><br><span class="line"></span><br><span class="line">-- 创建集合 c2</span><br><span class="line">&gt; db.createCollection(<span class="string">&#x27;c2&#x27;</span>);</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">-- 查看集合 </span><br><span class="line">&gt; show collections;</span><br><span class="line">c2</span><br><span class="line">student</span><br><span class="line">-- 删除集合 c2</span><br><span class="line">&gt; db.c2.drop();</span><br><span class="line"><span class="literal">true</span> -- 返回结果为布尔值</span><br></pre></td></tr></table></figure></li><li><p>查看当前使用数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 隐式创建的数据库没有内容查看不会被显示</span><br><span class="line">db</span><br></pre></td></tr></table></figure></li><li><p>删除数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use drop-database-name;</span><br><span class="line">db.dropDatabase();</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/monfo.png"></li></ul><h4 id="集合的增删改查"><a href="#集合的增删改查" class="headerlink" title="集合的增删改查"></a>集合的增删改查</h4><ul><li><p>集合增加数据</p><ul><li><p>插入一条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">语法: db.collection-name.insert(json-data);</span><br><span class="line">注意: 集合存在则直接插入数据,集合不存在则隐式创建</span><br><span class="line"></span><br><span class="line">-- 显示可用集合</span><br><span class="line">show collections;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-- 插入数据</span><br><span class="line">db.test.insert(&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;zahngsan&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result: WriteResult(&#123; <span class="string">&quot;nInserted&quot;</span> : <span class="number">1</span> &#125;)</span><br><span class="line"></span><br><span class="line">注意: 数据库和集合不存都会隐式创建，对象的键统一不加引号方便看，但是查看集合数据时系统会自动添加双引号</span><br></pre></td></tr></table></figure></li><li><p>插入多条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 集合插入多条数据 db.collection-name.insert(&#123;&#125;)</span></span><br><span class="line">db.emp.insert([</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">        age: <span class="number">20</span>,</span><br><span class="line">        gender: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&quot;李四&quot;</span>,</span><br><span class="line">        age: <span class="number">18</span>,</span><br><span class="line">        gender: <span class="string">&quot;女&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&quot;王五&quot;</span>,</span><br><span class="line">        age: <span class="number">10</span>,</span><br><span class="line">        gender: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        name: <span class="string">&quot;王麻子&quot;</span>,</span><br><span class="line">        age: <span class="number">38</span>,</span><br><span class="line">        gender: <span class="string">&quot;男&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/insertMore.png" width="600"></li><li><p>快速输出<code>n</code>条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 快速插入 10 条数据 支持 js 语法</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    print(i); <span class="comment">// 测试输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/mongojs.png" width="400"></li><li><p>快速在指定集合插入<code>n </code>条数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在指定集合中快速插入 n 条数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    db.dept.insert(&#123;</span><br><span class="line">        deptno: <span class="string">&quot;deptno&quot;</span> + i, <span class="comment">// 字符拼接的形式</span></span><br><span class="line">        age: i + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询结果集</span></span><br><span class="line">db.dept.find();</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/jsMon.png"></li><li><p>查看集合内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection-name.find();</span><br><span class="line"></span><br><span class="line">&gt; db.test.find();</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;602380e157486fb18cef5489&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;zhangsan&quot;</span> &#125;</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;6023839257486fb18cef548a&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;lisi&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="number">18</span>, <span class="string">&quot;gender&quot;</span> : <span class="string">&quot;男&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line">_id: 可以被覆盖,进行自定义 _id: value (不推荐修改) </span><br><span class="line">_id: </span><br><span class="line">组成原理: 时间戳 机器 PID 计数器</span><br></pre></td></tr></table></figure></li><li><p>条件查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法: db.collection-name.find(条件,[查询的列])</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">查询所有数据:  &#123;&#125; 可省略</span><br><span class="line">查询特定条件的值:  &#123;条件: value&#125;</span><br><span class="line">多条件查询: &#123;条件<span class="number">1</span>:value,条件<span class="number">2</span>:value,····&#125;</span><br><span class="line"></span><br><span class="line">查询列:</span><br><span class="line">[</span><br><span class="line">    不写列 查询全部</span><br><span class="line">    &#123;某列名称: <span class="number">1</span>&#125; 只显示 该列</span><br><span class="line">    &#123;某列名称: <span class="number">0</span>&#125; 除了该列,显示其他列</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>查询所有数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.dept.find(&#123;&#125;);</span><br></pre></td></tr></table></figure></li><li><p>只显示 <code>age</code> 列数据</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.dept.find(&#123;&#125;, &#123;</span><br><span class="line">    age: <span class="number">1</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>显示所有非 <code>age</code>列数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.dept.find(&#123;&#125;, &#123;</span><br><span class="line">    age: <span class="number">0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>条件列</p><table><thead><tr><th align="center">运算符</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>$gt</code></td><td align="center">大于</td></tr><tr><td align="center"><code>$gte</code></td><td align="center">大于等于</td></tr><tr><td align="center"><code>$lt</code></td><td align="center">小于</td></tr><tr><td align="center"><code>$lte</code></td><td align="center">小于等于</td></tr><tr><td align="center"><code>$ne</code></td><td align="center">不等于</td></tr><tr><td align="center"><code>$in</code></td><td align="center"><code>in</code></td></tr><tr><td align="center"><code>$nin</code></td><td align="center"><code>not in</code></td></tr></tbody></table> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.collection-name.find(</span><br><span class="line">键: &#123;运算符: 值&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li><p>查询年龄大于<code>8</code>的列数据<code>$gt</code>运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.dept.find(&#123;</span><br><span class="line">    age: &#123;</span><br><span class="line">        $gt: <span class="number">8</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/$gt.png"></li></ul></li><li><p>特定范围<code>&amp;in</code> 运算符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 特定范围内 Eg. 7, 8, 9</span></span><br><span class="line">db.dept.find(&#123;</span><br><span class="line">    age: &#123;</span><br><span class="line">        $in: [<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/$in.png"></li></ol></li><li><p>修改集合</p><blockquote><p>基础语法: <code>db.collection-name.update(条件,新数据[，是否新增,是否修改多条])</code></p><p>是否新增: 指条件匹配不到数据则插入(<code>true</code>是插入,<code>false</code>不插入 默认)</p><p>是否修改多条：指将匹配成功的数据都修改(<code>true</code>是,<code>false</code>否 默认)</p></blockquote><ul><li><p>准备测试数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建新集合</span></span><br><span class="line">db.createCollection(<span class="string">&#x27;testInfo&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过 for 循环插入 n 条测试数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    db.testInfo.insert(&#123;</span><br><span class="line">        name: <span class="string">&quot;name&quot;</span> + i,</span><br><span class="line">        age: i + <span class="number">1</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>数据更新<code>update</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 name: &quot;name0&quot; 改为 name: &quot;name11&quot;</span></span><br><span class="line"><span class="comment">// 替换操作 并不能实现数据修改</span></span><br><span class="line">db.testInfo.update(&#123;</span><br><span class="line">    name: <span class="string">&quot;name0&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    name: <span class="string">&quot;name11&quot;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/changeMon.png" width="600"><ul><li><p>数据修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.collection-name.update(&#123;条件&#125;，&#123;</span><br><span class="line">                          </span><br><span class="line">                          新数据【修改器】:&#123;键: 值&#125;&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将 name: &quot;name9&quot; 改为 name: &quot;name01&quot;</span></span><br><span class="line"></span><br><span class="line">db.testInfo.update(&#123;<span class="attr">name</span>:<span class="string">&quot;name9&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;name01&quot;</span>&#125;&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/updateMon.png"></li><li><p>多列数据更新</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改 name:name4 age:5 修改为 name:&quot;name04&quot;,age:40</span></span><br><span class="line">db.testInfo.update(&#123;</span><br><span class="line">    name: <span class="string">&quot;name4&quot;</span>,</span><br><span class="line">    age: <span class="number">5</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    $set: &#123;</span><br><span class="line">        name: <span class="string">&quot;name04&quot;</span>,</span><br><span class="line">        age: <span class="number">40</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">--------------------------------------- S: 输出 -------------------------------------------------------</span><br><span class="line"></span><br><span class="line">&gt; db.testInfo.find(&#123;<span class="attr">name</span>:<span class="string">&quot;name04&quot;</span>&#125;);</span><br><span class="line">&#123; <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;6023a1de167e00002a003d48&quot;</span>), <span class="string">&quot;name&quot;</span> : <span class="string">&quot;name04&quot;</span>, <span class="string">&quot;age&quot;</span> : <span class="number">40</span> &#125;</span><br><span class="line">&gt;</span><br><span class="line">--------------------------------------- E: 输出 ------------------------------------------------------</span><br></pre></td></tr></table></figure></li><li><p>根据条件,对数据进行 <code>+5/-5</code>  <code>$inc</code>操作符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.testInfo.find(&#123;</span><br><span class="line">    name: <span class="string">&quot;name01&quot;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    $inc: &#123;</span><br><span class="line">        age: <span class="number">5</span>/ [  -<span class="number">5</span> 原基础减 <span class="number">5</span> ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/update$inc.png" width="600"></li></ul><table><thead><tr><th align="center">修改器</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center"><code>$inc</code></td><td align="center">递增</td></tr><tr><td align="center"><code>$rename</code></td><td align="center">重命名列</td></tr><tr><td align="center"><code>$set</code></td><td align="center">修改列值</td></tr><tr><td align="center"><code>$unset</code></td><td align="center">删除字段</td></tr></tbody></table><ul><li><p>所有操作符进行练习</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">      </span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/optionA.png"></li><li><p><code>true</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">db.testInfo.update(&#123;</span><br><span class="line">    name: <span class="string">&quot;name20&quot;</span>,</span><br><span class="line">    age: <span class="number">5</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    $set: &#123;</span><br><span class="line">        name: <span class="string">&quot;name04&quot;</span>,</span><br><span class="line">        age: <span class="number">40</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 第三个条件 true: 没有找到则进行添加</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/updateTrue.png" width="600"></li><li><p>第四个参数<code>true/false</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.testInfo.update(&#123;<span class="attr">name</span>:<span class="string">&quot;name2&quot;</span>&#125;,&#123;<span class="attr">$set</span>:&#123;<span class="attr">age</span>:<span class="number">22</span>&#125;&#125;,<span class="literal">false</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="literal">false</span>: 没有不添加</span><br><span class="line"><span class="literal">true</span>: 允许修改多条</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/trueOrFalse.png" width="600"></li></ul></li></ul></li><li><p>删除数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">语法: db.collection-name.remove();</span><br><span class="line"></span><br><span class="line">    db.testInfo.remove(&#123;<span class="attr">name</span>:<span class="string">&quot;name2&quot;</span>&#125;,<span class="literal">true</span>); <span class="comment">// 只删除一条数据</span></span><br><span class="line">    db.testInfo.remove(&#123;<span class="attr">name</span>:<span class="string">&quot;name2&quot;</span>&#125;); <span class="comment">// 删除多条数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/removeMon.png" width="600"></li><li><p>删除集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除集合语法 </span></span><br><span class="line">db.collection-name.drop();</span><br><span class="line"><span class="comment">// 删除成功显示 true</span></span><br><span class="line">db.testInfo.drop(); </span><br></pre></td></tr></table></figure></li></ul><h4 id="排序分页"><a href="#排序分页" class="headerlink" title="排序分页"></a>排序分页</h4><ul><li><p>基础语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法: db.collectipon-name.find().sort(<span class="built_in">JSON</span>数据)</span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>数据: 键就是要排序的列/字段 值: <span class="number">1</span>-升序 -<span class="number">1</span>-降序</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>排序练习</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 准备测试数据</span></span><br><span class="line">use test3;</span><br><span class="line">db.c1.insert(&#123;<span class="attr">_id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;a&quot;</span>,<span class="attr">sex</span>:<span class="number">1</span>,<span class="attr">age</span>:<span class="number">1</span>&#125;);</span><br><span class="line">db.c1.insert(&#123;<span class="attr">_id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;a&quot;</span>,<span class="attr">sex</span>:<span class="number">1</span>,<span class="attr">age</span>:<span class="number">2</span>&#125;);</span><br><span class="line">db.c1.insert(&#123;<span class="attr">_id</span>:<span class="number">3</span>,<span class="attr">name</span>:<span class="string">&quot;b&quot;</span>,<span class="attr">sex</span>:<span class="number">2</span>,<span class="attr">age</span>:<span class="number">3</span>&#125;);</span><br><span class="line">db.c1.insert(&#123;<span class="attr">_id</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">&quot;c&quot;</span>,<span class="attr">sex</span>:<span class="number">2</span>,<span class="attr">age</span>:<span class="number">4</span>&#125;);</span><br><span class="line">db.c1.insert(&#123;<span class="attr">_id</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="string">&quot;d&quot;</span>,<span class="attr">sex</span>:<span class="number">2</span>,<span class="attr">age</span>:<span class="number">5</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询</span></span><br><span class="line">db.c1.find();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 排序  -1降 1升</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对 age 列进行降序输出</span></span><br><span class="line">db.c1.find().sort(&#123;<span class="attr">age</span>: -<span class="number">1</span>&#125;);</span><br><span class="line">db.c1.find().sort(&#123;<span class="attr">age</span>: <span class="number">1</span>&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>limit &amp; skip</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">limit(n): 查看 n 条</span><br><span class="line">skip(n): 跳过 n 条</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 跳过skip(2) 条查 limit(2) </span></span><br><span class="line">db.c1.find().skip(<span class="number">2</span>).limit(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">注意: skip() </span><br><span class="line"></span><br><span class="line">db.c1.find().limit(<span class="number">2</span>); == db.c1.find().skip(<span class="number">0</span>).limit(<span class="number">2</span>);</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/limitSkip.png" width="400"><blockquote><p><code>skip 计算公式: (当前页-1) * 每页显示条数</code></p><p>​    </p><p><code>当前页: 第一页  1 ,  第二页  2 ····</code></p><p>练习: 某集合中有 10 条数据, 每页只显示两条数据</p><p><code>db.collection-name.skip(当前页 - 1).limit(2);</code></p><table><thead><tr><th align="center">第一页</th><th align="center"><code>skip()</code></th></tr></thead><tbody><tr><td align="center"><code>1</code></td><td align="center"><code>db.collection-name.find().skip(1-1).limit(2)</code></td></tr><tr><td align="center"><code>2</code></td><td align="center"><code>db.collection-name.find().skip(2-1).limit(2)</code></td></tr><tr><td align="center"><code>3</code></td><td align="center"><code>db.collection-name.find().skip(3-1).limit(2)</code></td></tr></tbody></table></blockquote></li></ul><h4 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h4><ul><li><p>基本语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.collection-name.aggregate(</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        管道: &#123;表达式&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>常用管道</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$group</span> 将及合中的文档分组,用于统计结果</span><br><span class="line"><span class="variable">$match</span> 过滤数据,只要输出符合条件的文档</span><br><span class="line"><span class="variable">$sort</span>  聚合数据进一步排序</span><br><span class="line"><span class="variable">$skip</span> 跳过指定文档数</span><br><span class="line"><span class="variable">$limit</span> 限制集合数据返回文档数</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>常用表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$sum 总和 $sum:<span class="number">1</span> 同 count 表示统计</span><br><span class="line">$avg 平均</span><br><span class="line">$min 最小值</span><br><span class="line">$max 最大值</span><br></pre></td></tr></table></figure></li><li><p>练习聚合函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">集合结构:</span><br><span class="line"></span><br><span class="line">    &#123; <span class="string">&quot;_id&quot;</span> : <span class="number">1</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : <span class="number">1</span>, <span class="string">&quot;age&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">    &#123; <span class="string">&quot;_id&quot;</span> : <span class="number">2</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;a&quot;</span>, <span class="string">&quot;sex&quot;</span> : <span class="number">1</span>, <span class="string">&quot;age&quot;</span> : <span class="number">2</span> &#125;</span><br><span class="line">    &#123; <span class="string">&quot;_id&quot;</span> : <span class="number">3</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;b&quot;</span>, <span class="string">&quot;sex&quot;</span> : <span class="number">2</span>, <span class="string">&quot;age&quot;</span> : <span class="number">3</span> &#125;</span><br><span class="line">    &#123; <span class="string">&quot;_id&quot;</span> : <span class="number">4</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;c&quot;</span>, <span class="string">&quot;sex&quot;</span> : <span class="number">2</span>, <span class="string">&quot;age&quot;</span> : <span class="number">4</span> &#125;</span><br><span class="line">    &#123; <span class="string">&quot;_id&quot;</span> : <span class="number">5</span>, <span class="string">&quot;name&quot;</span> : <span class="string">&quot;d&quot;</span>, <span class="string">&quot;sex&quot;</span> : <span class="number">2</span>, <span class="string">&quot;age&quot;</span> : <span class="number">5</span> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db.collection-name.aggregate([</span><br><span class="line"></span><br><span class="line">&#123;管道1:&#123;&#125;&#125;,</span><br><span class="line"></span><br><span class="line">&#123;管道2: &#123;&#125;&#125;,   </span><br><span class="line"></span><br><span class="line">····</span><br><span class="line">]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><ol><li><p>统计男生人数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 统计男女生人数</span></span><br><span class="line">db.c1.aggregate([&#123;</span><br><span class="line">    $group: &#123;</span><br><span class="line">        _id: <span class="string">&quot;$sex&quot;</span>,</span><br><span class="line">        rs: &#123;</span><br><span class="line">            $sum: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></li><li><p>查询女生的总年龄</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">      </span><br></pre></td></tr></table></figure></li><li><p>根据 性别分组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据 性别分组</span></span><br><span class="line">db.c1.aggregate([&#123;</span><br><span class="line">    $group: &#123;</span><br><span class="line">        _id: <span class="string">&quot;$sex&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></li><li><p>根据性别分组 统计 总: age</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([&#123;</span><br><span class="line">    $group: &#123;</span><br><span class="line">        _id: <span class="string">&quot;$sex&quot;</span>, <span class="comment">// 分组</span></span><br><span class="line">        total_age: &#123;</span><br><span class="line">            $sum: <span class="string">&quot;$age&quot;</span></span><br><span class="line">        &#125; <span class="comment">// 分组后条件</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></li><li><p>求学生的总人数和平均年龄</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 求学生的总人数和平均年龄</span></span><br><span class="line">db.c1.aggregate([&#123;</span><br><span class="line">    $group: &#123;</span><br><span class="line">        _id: <span class="literal">null</span>, <span class="comment">//  不分组,全部数据</span></span><br><span class="line">        totalStudent: &#123;</span><br><span class="line">            $sum: <span class="number">1</span> <span class="comment">// $sum:1 == 其他数据库中的 count(*)</span></span><br><span class="line">        &#125;, </span><br><span class="line">        avg: &#123;</span><br><span class="line">            $avg: <span class="string">&quot;$age&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;]);</span><br></pre></td></tr></table></figure></li><li><p>查询男生,女生人数 按人数升序</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">db.c1.aggregate([</span><br><span class="line">    &#123; </span><br><span class="line">        <span class="comment">// 分组管道</span></span><br><span class="line">        $group: &#123;</span><br><span class="line">            _id: <span class="string">&quot;$sex&quot;</span>,</span><br><span class="line">            toolS: &#123;</span><br><span class="line">                $sum: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分组后排序 </span></span><br><span class="line">    &#123;</span><br><span class="line">        $sort: &#123;</span><br><span class="line">            toolS: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/aggrgate.png" width="600"><ul><li><p>验证</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/toolS.png" width="600"></li></ul></li></ol></li></ul><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><ul><li><p>数据库中的索引</p><ol><li>说明: <code>索引是一种排序好的便于快速查询的数据结构</code></li><li>作用: <code>帮助数据库高效的查询数据</code></li></ol></li><li><p>索引的优缺点</p><ul><li><p>优点</p><blockquote><p>提高数据查询的效率,降低数据库的 IO 成本</p><p>通过索引对数据进行排序，降低数据排序的成本，降低 CPU 的消耗</p></blockquote></li><li><p>缺点</p><blockquote><p>占用磁盘空间</p><p>大量索引影响 SQL 语句效率，因为每次插入和修改数据都需要更新索引</p></blockquote></li></ul></li><li><p>基本语法</p><ul><li><p>测试数据准备</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 选择数据库</span></span><br><span class="line">use test4;</span><br><span class="line"><span class="comment">// 向数据库中添加数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">    db.c1.insert(&#123;</span><br><span class="line">        name: <span class="string">&quot;name&quot;</span> + i,</span><br><span class="line">        age: i</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统计插入的数据条数</span></span><br><span class="line">db.c1.find().count();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>创建语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db.collection-name.createIndex(待创建索引的列[,额外选项])</span><br><span class="line"></span><br><span class="line">参数:</span><br><span class="line">待创建索引的列: <span class="number">1</span>-升序 -<span class="number">1</span>-降序</span><br><span class="line">额外选项: 设置索引的名称或者唯一索引</span><br></pre></td></tr></table></figure><ul><li><p>创建普通索引</p><ol><li><p>给<code> name</code> 列添加普通索引升序: <code>db.c1.createIndex(&#123;name: 1&#125;)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&gt; show collections;</span><br><span class="line">c1</span><br><span class="line">&gt; db.c1.createIndex(&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;); <span class="comment">// name 列创建索引</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;createdCollectionAutomatically&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesBefore&quot;</span> : <span class="number">1</span>,</span><br><span class="line">        <span class="string">&quot;numIndexesAfter&quot;</span> : <span class="number">2</span>,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>查看创建的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.getIndexes(); <span class="comment">// 查询已创建索引</span></span><br><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;_id&quot;</span> : <span class="number">1</span> <span class="comment">// 索引升序排列</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span>, <span class="comment">// 默认索引名称</span></span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;test4.c1&quot;</span> <span class="comment">// test4数据库下的 C1 集合</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123; <span class="comment">// key: 设置索引列</span></span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="number">1</span> <span class="comment">// 自定义索引升序排列</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;name_1&quot;</span>, <span class="comment">// 索引默认名称</span></span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;test4.c1&quot;</span> <span class="comment">// test4数据库下的 C1 集合</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>给 <code>name</code>创建索引并起名<code>asIndexName</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.c1.createIndex(&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;asIndexName&quot;</span>&#125;); <span class="comment">// name 列创建索引升序 起名: asIndexName</span></span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.getIndexes();</span><br><span class="line">[</span><br><span class="line">        ···</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;asIndexName&quot;</span>, <span class="comment">// 起名成功</span></span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;test4.c1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ol></li></ul></li><li><p>删除语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">全部删除: db.collection-name.dropIndexes();</span><br><span class="line"></span><br><span class="line">删除指定索引: db.collection-name.dropIndex(index-name)</span><br></pre></td></tr></table></figure><ul><li><p>删除<code>name</code>建立的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.dropIndex(<span class="string">&#x27;name_1&#x27;</span>);</span><br><span class="line">&#123; <span class="string">&quot;nIndexesWas&quot;</span> : <span class="number">2</span>, <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查看索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection-name.getIndexex();</span><br></pre></td></tr></table></figure></li><li><p>创建符合索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">就是一次性给多个字段建立索引</span><br><span class="line"></span><br><span class="line">test4.c1: name,age 添加组合索引</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line"></span><br><span class="line">db.c1.createIndex(&#123;键<span class="number">1</span>: 存储方式,键<span class="number">2</span>: 存储方式&#125;);</span><br><span class="line"></span><br><span class="line">注意: 存储方式为升序或降序 <span class="number">1</span>、-<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li><p>查看建立的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#125;</span><br><span class="line">&gt; db.c1.getIndexes();</span><br><span class="line">[</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;_id&quot;</span> : <span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;_id_&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;test4.c1&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;asIndexName&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;test4.c1&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">                <span class="string">&quot;v&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;name&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;age&quot;</span> : <span class="number">1</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;name&quot;</span> : <span class="string">&quot;name_1_age_1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;test4.c1&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">]</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>创建唯一索引</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">给 name 添加普通索引</span><br><span class="line">语法: db.collection-name.createIndex(待添加索引的列,&#123;<span class="attr">unique</span>:”列名“&#125;)</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.createIndex(&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">unique</span>:<span class="string">&quot;name&quot;</span>&#125;);</span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除索引</span></span><br><span class="line">db.c1.dropIndexes();</span><br><span class="line"><span class="comment">// 创建唯一索引并起名为 uniqueIndex</span></span><br><span class="line">db.c1.createIndex(&#123;<span class="attr">name</span>:<span class="number">1</span>&#125;,&#123;<span class="attr">name</span>:<span class="string">&quot;uniqueIndex&quot;</span>&#125;,&#123;<span class="attr">unique</span>:<span class="string">&quot;name&quot;</span>&#125;);</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="分析索引"><a href="#分析索引" class="headerlink" title="分析索引"></a>分析索引</h4><ul><li><p>基本语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.collection-name.find().explain(<span class="string">&#x27;executionStats&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>练习</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除所有索引</span></span><br><span class="line">db.c1.dropIndexes();</span><br></pre></td></tr></table></figure><ol><li><p>对未添加索引的数据进行查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.c1.find(&#123;<span class="attr">age</span>:<span class="number">1000</span>&#125;).explain(<span class="string">&#x27;executionStats&#x27;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.find(&#123;<span class="attr">age</span>:<span class="number">1000</span>&#125;).explain(<span class="string">&#x27;executionStats&#x27;</span>);</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;queryPlanner&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;plannerVersion&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;namespace&quot;</span> : <span class="string">&quot;test4.c1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;indexFilterSet&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;parsedQuery&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;age&quot;</span> : &#123;</span><br><span class="line">                                <span class="string">&quot;$eq&quot;</span> : <span class="number">1000</span></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;queryHash&quot;</span> : <span class="string">&quot;3838C5F3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;planCacheKey&quot;</span> : <span class="string">&quot;3838C5F3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;winningPlan&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;stage&quot;</span> : <span class="string">&quot;COLLSCAN&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;filter&quot;</span> : &#123;</span><br><span class="line">                                <span class="string">&quot;age&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;$eq&quot;</span> : <span class="number">1000</span></span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;direction&quot;</span> : <span class="string">&quot;forward&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;rejectedPlans&quot;</span> : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 执行计划相关统计信息</span></span><br><span class="line">        <span class="string">&quot;executionStats&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;executionSuccess&quot;</span> : <span class="literal">true</span>, <span class="comment">// 执行成功的状态</span></span><br><span class="line">                <span class="string">&quot;nReturned&quot;</span> : <span class="number">1</span>, <span class="comment">// 返回结果集数目</span></span><br><span class="line">                <span class="string">&quot;executionTimeMillis&quot;</span> : <span class="number">8</span>, <span class="comment">// 执行所需的事件,单位: 毫秒</span></span><br><span class="line">                <span class="string">&quot;totalKeysExamined&quot;</span> : <span class="number">0</span>, <span class="comment">// 索引检查的的时间</span></span><br><span class="line">                <span class="string">&quot;totalDocsExamined&quot;</span> : <span class="number">10000</span>, <span class="comment">// 检查文档总数 (某集合插入的所有数据)</span></span><br><span class="line">                <span class="string">&quot;executionStages&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;stage&quot;</span> : <span class="string">&quot;COLLSCAN&quot;</span>, <span class="comment">// 索引扫描方式</span></span><br><span class="line">                        <span class="string">&quot;filter&quot;</span> : &#123; <span class="comment">// 过滤条件</span></span><br><span class="line">                                <span class="string">&quot;age&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;$eq&quot;</span> : <span class="number">1000</span></span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;,</span><br><span class="line">                        <span class="string">&quot;nReturned&quot;</span> : <span class="number">1</span>, <span class="comment">// 返回结果集数目</span></span><br><span class="line">                        <span class="string">&quot;executionTimeMillisEstimate&quot;</span> : <span class="number">0</span>, <span class="comment">// 预估的执行时间,毫秒</span></span><br><span class="line">                        <span class="string">&quot;works&quot;</span> : <span class="number">10002</span>, <span class="comment">// 工作单元数,一个查询会被派生一些小的工作单元</span></span><br><span class="line">                        <span class="string">&quot;advanced&quot;</span> : <span class="number">1</span>, <span class="comment">// 优先返回的结果数目</span></span><br><span class="line">                        <span class="string">&quot;needTime&quot;</span> : <span class="number">10000</span>,</span><br><span class="line">                        <span class="string">&quot;needYield&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                        <span class="string">&quot;saveState&quot;</span> : <span class="number">78</span>,</span><br><span class="line">                        <span class="string">&quot;restoreState&quot;</span> : <span class="number">78</span>,</span><br><span class="line">                        <span class="string">&quot;isEOF&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;direction&quot;</span> : <span class="string">&quot;forward&quot;</span>, <span class="comment">// 方向</span></span><br><span class="line">                        <span class="string">&quot;docsExamined&quot;</span> : <span class="number">10000</span> <span class="comment">// 文档检查数目</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serverInfo&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span> : <span class="string">&quot;DESKTOP-BSVSU4F&quot;</span>,</span><br><span class="line">                <span class="string">&quot;port&quot;</span> : <span class="number">27017</span>,</span><br><span class="line">                <span class="string">&quot;version&quot;</span> : <span class="string">&quot;4.1.6&quot;</span>,</span><br><span class="line">                <span class="string">&quot;gitVersion&quot;</span> : <span class="string">&quot;55e72b015e2aa7297c00db29e4d93451ea61a7ca&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">扫描方式:</span><br><span class="line">collscan 全表扫描</span><br><span class="line">    ixscan 索引扫描</span><br><span class="line">    fetch 根据索引去检索指定 <span class="built_in">document</span></span><br></pre></td></tr></table></figure></li><li><p>添加索引后查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">添加普通索引:</span><br><span class="line">db.c1.createIndex(&#123;<span class="attr">age</span>:<span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">&gt; db.c1.find(&#123;<span class="attr">age</span>:<span class="number">1000</span>&#125;).explain(<span class="string">&#x27;executionStats&#x27;</span>);</span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;queryPlanner&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;plannerVersion&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;namespace&quot;</span> : <span class="string">&quot;test4.c1&quot;</span>,</span><br><span class="line">                <span class="string">&quot;indexFilterSet&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                <span class="string">&quot;parsedQuery&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;age&quot;</span> : &#123;</span><br><span class="line">                                <span class="string">&quot;$eq&quot;</span> : <span class="number">1000</span></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;queryHash&quot;</span> : <span class="string">&quot;3838C5F3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;planCacheKey&quot;</span> : <span class="string">&quot;041C5DE3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;winningPlan&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;stage&quot;</span> : <span class="string">&quot;FETCH&quot;</span>, <span class="comment">// </span></span><br><span class="line">                        <span class="string">&quot;inputStage&quot;</span> : &#123;</span><br><span class="line">                                <span class="string">&quot;stage&quot;</span> : <span class="string">&quot;IXSCAN&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;keyPattern&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;age&quot;</span> : <span class="number">1</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="string">&quot;indexName&quot;</span> : <span class="string">&quot;age_1&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;isMultiKey&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                                <span class="string">&quot;multiKeyPaths&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;age&quot;</span> : [ ]</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="string">&quot;isUnique&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                                <span class="string">&quot;isSparse&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                                <span class="string">&quot;isPartial&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                                <span class="string">&quot;indexVersion&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                                <span class="string">&quot;direction&quot;</span> : <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;indexBounds&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;age&quot;</span> : [</span><br><span class="line">                                                <span class="string">&quot;[1000.0, 1000.0]&quot;</span></span><br><span class="line">                                        ]</span><br><span class="line">                                &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;rejectedPlans&quot;</span> : [ ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;executionStats&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;executionSuccess&quot;</span> : <span class="literal">true</span>,</span><br><span class="line">                <span class="string">&quot;nReturned&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;executionTimeMillis&quot;</span> : <span class="number">5</span>,</span><br><span class="line">                <span class="string">&quot;totalKeysExamined&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;totalDocsExamined&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                <span class="string">&quot;executionStages&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;stage&quot;</span> : <span class="string">&quot;FETCH&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;nReturned&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;executionTimeMillisEstimate&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                        <span class="string">&quot;works&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                        <span class="string">&quot;advanced&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;needTime&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                        <span class="string">&quot;needYield&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                        <span class="string">&quot;saveState&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                        <span class="string">&quot;restoreState&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                        <span class="string">&quot;isEOF&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;docsExamined&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;alreadyHasObj&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                        <span class="string">&quot;inputStage&quot;</span> : &#123;</span><br><span class="line">                                <span class="string">&quot;stage&quot;</span> : <span class="string">&quot;IXSCAN&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;nReturned&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                                <span class="string">&quot;executionTimeMillisEstimate&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                                <span class="string">&quot;works&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                                <span class="string">&quot;advanced&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                                <span class="string">&quot;needTime&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                                <span class="string">&quot;needYield&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                                <span class="string">&quot;saveState&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                                <span class="string">&quot;restoreState&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                                <span class="string">&quot;isEOF&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                                <span class="string">&quot;keyPattern&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;age&quot;</span> : <span class="number">1</span></span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="string">&quot;indexName&quot;</span> : <span class="string">&quot;age_1&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;isMultiKey&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                                <span class="string">&quot;multiKeyPaths&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;age&quot;</span> : [ ]</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="string">&quot;isUnique&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                                <span class="string">&quot;isSparse&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                                <span class="string">&quot;isPartial&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">                                <span class="string">&quot;indexVersion&quot;</span> : <span class="number">2</span>,</span><br><span class="line">                                <span class="string">&quot;direction&quot;</span> : <span class="string">&quot;forward&quot;</span>,</span><br><span class="line">                                <span class="string">&quot;indexBounds&quot;</span> : &#123;</span><br><span class="line">                                        <span class="string">&quot;age&quot;</span> : [</span><br><span class="line">                                                <span class="string">&quot;[1000.0, 1000.0]&quot;</span></span><br><span class="line">                                        ]</span><br><span class="line">                                &#125;,</span><br><span class="line">                                <span class="string">&quot;keysExamined&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                                <span class="string">&quot;seeks&quot;</span> : <span class="number">1</span>,</span><br><span class="line">                                <span class="string">&quot;dupsTested&quot;</span> : <span class="number">0</span>,</span><br><span class="line">                                <span class="string">&quot;dupsDropped&quot;</span> : <span class="number">0</span></span><br><span class="line">                        &#125;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;serverInfo&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;host&quot;</span> : <span class="string">&quot;DESKTOP-BSVSU4F&quot;</span>,</span><br><span class="line">                <span class="string">&quot;port&quot;</span> : <span class="number">27017</span>,</span><br><span class="line">                <span class="string">&quot;version&quot;</span> : <span class="string">&quot;4.1.6&quot;</span>,</span><br><span class="line">                <span class="string">&quot;gitVersion&quot;</span> : <span class="string">&quot;55e72b015e2aa7297c00db29e4d93451ea61a7ca&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li><li><p>索引建立规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">为常做条件、排序、分组的字段建立索引</span><br><span class="line">选择唯一性索引</span><br><span class="line">选择较小的数据列，为较长的字符串使用前缀索引</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="权限机制"><a href="#权限机制" class="headerlink" title="权限机制"></a>权限机制</h4><h5 id="开启验证服务"><a href="#开启验证服务" class="headerlink" title="开启验证服务"></a>开启验证服务</h5><ul><li><p>什么是验证服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">名词,指用户需要输入账号密码才能登录使用</span><br></pre></td></tr></table></figure></li><li><p>操作步骤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 添加超级管理员</span><br><span class="line"><span class="number">2.</span> 退出卸载服务</span><br><span class="line"><span class="number">3.</span> 重新安装需要的输入账号密码的服务(在原安装命令基础上加上 --auth 即可)</span><br><span class="line"><span class="number">4.</span> 启动服务 </span><br><span class="line"><span class="number">5.</span> 登录测试</span><br></pre></td></tr></table></figure><ol><li><p>添加超级管理员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">(windows+r后:)命令行: mongo</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 admin 数据库</span></span><br><span class="line">use admin;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 User 语法</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">&quot;账号&quot;</span>,</span><br><span class="line">    pwd: <span class="string">&quot;密码&quot;</span>,</span><br><span class="line">    roles: [&#123;</span><br><span class="line">        role: <span class="string">&quot;角色&quot;</span>,</span><br><span class="line">        db: <span class="string">&quot;所属数据库&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">---------------------------------- 失败 ----------------------------------------</span><br><span class="line"> db.createUser(</span><br><span class="line">    &#123;</span><br><span class="line">  user: <span class="string">&quot;admisnbin&quot;</span>,</span><br><span class="line">    pwd: <span class="string">&quot;scott&quot;</span>,</span><br><span class="line">    roles: [&#123;</span><br><span class="line">        role: <span class="string">&quot;scott&quot;</span>, <span class="comment">// role 有特定选择, 自定会出错, role 第一次选择 root 切记</span></span><br><span class="line">      db: <span class="string">&quot;school&quot;</span> </span><br><span class="line">    &#125;]</span><br><span class="line"> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">erroInfomation:  [js] <span class="built_in">Error</span>: couldn<span class="string">&#x27;t add user: No role named scott@school</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">---------------------------------- 成功 ----------------------------------------</span></span><br><span class="line"><span class="string"> db.createUser(</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">      user: &quot;xttblog&quot;,</span></span><br><span class="line"><span class="string">        pwd: &quot;test&quot;,</span></span><br><span class="line"><span class="string">        roles: [ &#123; role: &quot;userAdminAnyDatabase&quot;, db: &quot;admin&quot; &#125; ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"> )</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">输出信息:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Successfully added user: &#123;</span></span><br><span class="line"><span class="string">            &quot;user&quot; : &quot;xttblog&quot;,</span></span><br><span class="line"><span class="string">            &quot;roles&quot; : [</span></span><br><span class="line"><span class="string">                    &#123;</span></span><br><span class="line"><span class="string">                            &quot;role&quot; : &quot;userAdminAnyDatabase&quot;,</span></span><br><span class="line"><span class="string">                            &quot;db&quot; : &quot;admin&quot;</span></span><br><span class="line"><span class="string">                    &#125;</span></span><br><span class="line"><span class="string">            ]</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><ul><li><p>角色</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">数据库用户角色：read、readWrite;</span><br><span class="line">数据库管理角色：dbAdmin、dbOwner、userAdmin；</span><br><span class="line">集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；</span><br><span class="line">备份恢复角色：backup、restore；</span><br><span class="line">所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase</span><br><span class="line">超级用户角色：root；这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）</span><br><span class="line">内部角色：__system</span><br></pre></td></tr></table></figure></li><li><p>对应作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Read：允许用户读取指定数据库</span><br><span class="line">readWrite：允许用户读写指定数据库</span><br><span class="line">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问system.profile</span><br><span class="line">userAdmin：允许用户向system.users集合写入，可以找指定数据库里创建、删除和管理用户</span><br><span class="line">clusterAdmin：只在admin数据库中可用，赋予用户所有分片和复制集相关函数的管理权限。</span><br><span class="line">readAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读权限</span><br><span class="line">readWriteAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的读写权限</span><br><span class="line">userAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class="line">dbAdminAnyDatabase：只在admin数据库中可用，赋予用户所有数据库的dbAdmin权限。</span><br><span class="line">root：只在admin数据库中可用。超级账号，超级权限</span><br></pre></td></tr></table></figure></li><li><p>查看已创建用户角色信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">use admin;</span><br><span class="line">show collections; <span class="comment">// 可能无显示</span></span><br><span class="line"><span class="comment">// 上一步无显示信息无所谓直接执行下面的信息  admisnbin: replace your create user </span></span><br><span class="line">db.system.users.find(&#123;<span class="attr">user</span>: <span class="string">&quot;admisnbin&quot;</span>&#125;).pretty()</span><br><span class="line"></span><br><span class="line">输出信息分析:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">        <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;admin.admisnbin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;user&quot;</span> : <span class="string">&quot;admisnbin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;db&quot;</span> : <span class="string">&quot;admin&quot;</span>,</span><br><span class="line">        <span class="string">&quot;credentials&quot;</span> : &#123;</span><br><span class="line">                <span class="string">&quot;SCRAM-SHA-1&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;iterationCount&quot;</span> : <span class="number">10000</span>,</span><br><span class="line">                        <span class="string">&quot;salt&quot;</span> : <span class="string">&quot;G49EQwU5NnZ1aEZhPWNEJw==&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;storedKey&quot;</span> : <span class="string">&quot;pxop//BnuC8/lZ4ipPFwu2B1oQQ=&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;serverKey&quot;</span> : <span class="string">&quot;6zFNfZ8piyhjeHo4Q+jpIXvYNyY=&quot;</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="string">&quot;SCRAM-SHA-256&quot;</span> : &#123;</span><br><span class="line">                        <span class="string">&quot;iterationCount&quot;</span> : <span class="number">15000</span>,</span><br><span class="line">                        <span class="string">&quot;salt&quot;</span> : <span class="string">&quot;k7C6yyGI70stIDG86Ia61aQIWwm2lEYJydnZ6w==&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;storedKey&quot;</span> : <span class="string">&quot;zYqBWVBjgZVIwoR0ysiE1xWhwM08jIGa+VX2n+Bw3yg=&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;serverKey&quot;</span> : <span class="string">&quot;IEVA9fZ1xGcBbEThhxRDjE2ECo4dNQ0P5Tca7t4HcTo=&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;roles&quot;</span> : [</span><br><span class="line">                &#123;</span><br><span class="line">                        <span class="string">&quot;role&quot;</span> : <span class="string">&quot;dbAdmin&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;db&quot;</span> : <span class="string">&quot;school&quot;</span></span><br><span class="line">                &#125;</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>退出卸载服务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">windows+x: 超级管理员权限</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/powershell.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bin: mongod --remove</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/windowsPowershell.png"></li><li><p>安装需要身份验证的 <code>MongDB 服务</code></p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bin目录下:  </span><br><span class="line">mongod --install --dbpath  </span><br><span class="line"><span class="string">&quot;D:\Program Files\MongoDB\Server\4.1\data“ --logpath </span></span><br><span class="line"><span class="string">&quot;</span>D:\ProgramFiles\MongoDB\Server\<span class="number">4.1</span>\log\newMongodb<span class="string">&quot; --auth</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">解释: </span></span><br><span class="line"><span class="string">D:\Program Files\MongoDB\Server\4.1\data  # 安装 data 文件路径</span></span><br><span class="line"><span class="string">D:\Program Files\MongoDB\Server\4.1\log\newMongodb # 安装日志文件路径</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">启动服务:</span></span><br><span class="line"><span class="string">net start mongodb</span></span><br></pre></td></tr></table></figure></li><li><p>验证安装</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; show dbs;</span><br><span class="line">2021-02-13T14:52:17.110+0800 E QUERY    [js] Error: listDatabases failed:&#123;</span><br><span class="line">        <span class="string">&quot;ok&quot;</span> : 0,</span><br><span class="line">        <span class="string">&quot;errmsg&quot;</span> : <span class="string">&quot;command listDatabases requires authentication&quot;</span>,</span><br><span class="line">        <span class="string">&quot;code&quot;</span> : 13,</span><br><span class="line">        <span class="string">&quot;codeName&quot;</span> : <span class="string">&quot;Unauthorized&quot;</span></span><br><span class="line">&#125; :</span><br><span class="line">_getErrorWithCode@src/mongo/shell/utils.js:25:13</span><br><span class="line">Mongo.prototype.getDBs@src/mongo/shell/mongo.js:124:1</span><br><span class="line">shellHelper.show@src/mongo/shell/utils.js:914:19</span><br><span class="line">shellHelper@src/mongo/shell/utils.js:804:15</span><br><span class="line">@(shellhelp2):1:1</span><br><span class="line">&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 【重新安装后:添加权限机制】不能直接显示 mongodb 下的数据库信息</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li></ul><ol start="5"><li><p>访问</p><ul><li><p>方法一</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongo 服务器ip地址:端口/数据库 -u 用户名 -p 密码</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 之前创建的用户</span><br><span class="line">mongo <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">27017</span>/admin -u xttblog -p test</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/createRole.png"></li><li><p>方法二</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 先登录</span><br><span class="line">2. 选择数据库</span><br><span class="line">3. 输入 db.auth(用户名,密码)</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/useadmin.png"></li></ul></li></ol><h5 id="权限使用练习"><a href="#权限使用练习" class="headerlink" title="权限使用练习"></a>权限使用练习</h5><ul><li><p>超级管理员权限用户</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// userAdminAnyDatabase</span></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    pwd: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    roles: [&#123;</span><br><span class="line">        role: <span class="string">&quot;root&quot;</span>, </span><br><span class="line">        db: <span class="string">&quot;admin&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line">        </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">use school;</span><br><span class="line"></span><br><span class="line"># 准本测试数据</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    db.stu.insert(&#123;</span><br><span class="line">        stuname: <span class="string">&quot;stu&quot;</span> + i,</span><br><span class="line">        stuno: <span class="string">&quot;stuno&quot;</span> + i,</span><br><span class="line">        sex: <span class="string">&quot;1&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ol><li><p>添加用户 <code>teacher1</code> 可以读取 <code>school </code>数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">role:  read <span class="comment">// 读取指定数据库</span></span><br><span class="line"></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">&quot;teacher1&quot;</span>,</span><br><span class="line">    pwd: <span class="string">&quot;teacher1&quot;</span>,</span><br><span class="line">    roles: [&#123;</span><br><span class="line">        role: <span class="string">&quot;read&quot;</span>,</span><br><span class="line">        db: <span class="string">&quot;school&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加用户 <code>teacher2</code> 可以读写 <code>school</code> 数据库</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">role: readWrite <span class="comment">// 允许用户读写指定数据库</span></span><br><span class="line"></span><br><span class="line">db.createUser(&#123;</span><br><span class="line">    user: <span class="string">&quot;teacher2&quot;</span>,</span><br><span class="line">    pwd: <span class="string">&quot;teacher2&quot;</span>,</span><br><span class="line">    roles: [&#123;</span><br><span class="line">        role: <span class="string">&quot;readWrite&quot;</span>,</span><br><span class="line">        db: <span class="string">&quot;school&quot;</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><h4 id="备份还原"><a href="#备份还原" class="headerlink" title="备份还原"></a>备份还原</h4><h5 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h5><ul><li><p>语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mongodump -h -proot -u -p -d -o</span><br><span class="line"></span><br><span class="line">参数解释:</span><br><span class="line">-h host 服务器 IP 地址(一般不写,默认本机)</span><br><span class="line">-port 端口 (一般不写,默认 27017)</span><br><span class="line">-u user 账号</span><br><span class="line">-p <span class="built_in">pwd</span> 密码</span><br><span class="line">-d database 数据库(数据库不写则全局)</span><br><span class="line">-o open 备份到指定目录下</span><br></pre></td></tr></table></figure><ol><li><p>备份<code>root</code>用户下所有数据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongodump -u root -p root -o  <span class="string">&quot;D:\Program Files\MongoDB\Server\4.1\backupData&quot;</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/backupAll.png"></li><li><p>备份指定数据库<code>school</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除备份 一 数据 D:\Program Files\MongoDB\Server\4.1\backupData --&gt; D:\Program Files\MongoDB\Server\4.1\stuBackup</span></span><br><span class="line">mongodump -u teacher1 -p teacher1 -d school -o  <span class="string">&quot;D:\Program Files\MongoDB\Server\4.1\backupData&quot;</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/backupSchool.png"></li></ol></li></ul><h5 id="还原"><a href="#还原" class="headerlink" title="还原"></a>还原</h5><ul><li><p>语法</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -h -port -u -p -d --drop 备份数据目录</span><br><span class="line"></span><br><span class="line">-d 不写则还原全部数据</span><br><span class="line">--drop 先删除数据库在导入</span><br></pre></td></tr></table></figure></li><li><p>先备份数据库,在删除一些普通数据库, <strong><code>admin</code>一定要保留</strong></p></li><li><p>删除数据库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">switched to db school</span><br><span class="line">&gt; db.dropDatabase();</span><br><span class="line">&#123; <span class="string">&quot;dropped&quot;</span> : <span class="string">&quot;school&quot;</span>, <span class="string">&quot;ok&quot;</span> : 1 &#125;</span><br><span class="line">&gt; show dbs;</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/databaseInfo.png"></li><li><p>数据库还原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -u root -p root --drop <span class="string">&quot;D:\Program Files\MongoDB\Server\4.1\backupData&quot;</span></span><br><span class="line"></span><br><span class="line">path: 必须放在最后</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/restore.png"><ul><li><p>查看是否还原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mongo</span><br><span class="line"></span><br><span class="line">&gt; use admin;</span><br><span class="line">switched to db admin</span><br><span class="line">&gt; db.auth(<span class="string">&quot;root&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">1</span><br><span class="line">&gt; show dbs;</span><br><span class="line">admin   0.000GB</span><br><span class="line">config  0.000GB</span><br><span class="line"><span class="built_in">local</span>   0.000GB</span><br><span class="line">school  0.000GB</span><br><span class="line">&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>指定<code>school</code>数据库还原</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongorestore -u teacher1 -p teacher1 -d school --drop <span class="string">&quot;D:\Program Files\MongoDB\Server\4.1\stuBackup&quot;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="Mongoose-简介"><a href="#Mongoose-简介" class="headerlink" title="Mongoose 简介"></a>Mongoose 简介</h4><h5 id="mongoose基础使用"><a href="#mongoose基础使用" class="headerlink" title="mongoose基础使用"></a>mongoose基础使用</h5><ul><li><p><code>mongoose</code>是什么？</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">是 node 中提供操作 MongoDB 的模块</span><br></pre></td></tr></table></figure></li><li><p>能干什么?</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">能够通过 node 语法实现 MongoDB 数据库增删改查,从而实现用 node 写程序来管理 MongoDB 数据库</span><br></pre></td></tr></table></figure></li><li><p>schema</p><blockquote><p>中文网: <a href="http://mongoosejs.com">schema 官网</a></p><p>作用: 用来约束 MongoDB 文档数据(那些字段必须,那些字段可选)</p></blockquote></li><li><p>使用报错</p><ul><li><p><code>dos</code>窗口认证成功</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/mongoVs.png"></li><li><p><code>vscode</code>使用报错</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 导入模块</span><br><span class="line">const mongoose = require(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line">// 连接数据库</span><br><span class="line">const db = mongoose.createConnection(</span><br><span class="line">  <span class="string">&quot;mongodb://root:root@127.0.0.1:27017/school&quot;</span>,</span><br><span class="line">  // mongodb[协议]://user:password@host:port/database-name</span><br><span class="line">  &#123; useNewUrlParser: <span class="literal">true</span>, useUnifiedTopology: <span class="literal">true</span> &#125;,</span><br><span class="line">  (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      console.log(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">      console.log(<span class="string">&quot;数据库连接失败: &quot;</span>, err);</span><br><span class="line">      console.log(<span class="string">&quot;-------------------------------------&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      console.log(<span class="string">&quot;数据库连接成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/authError.png"><ul><li><p>解决方案</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mongodb://user:pwd@host/database-name?authSource=admin</span></span><br><span class="line"></span><br><span class="line">mongodb://root:root@127.0.0.1:27017/school?authSource=admin</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>最终结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose</span><br><span class="line">  .connect(</span><br><span class="line">    <span class="comment">// mongodb[协议]://user:password@host:port/database-name</span></span><br><span class="line">    <span class="string">&quot;mongodb://root:root@127.0.0.1:27017/school?authSource=admin&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>, <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接失败: &quot;</span>, error);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> teacherSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  <span class="comment">// 教师: 课程 班级 上课周期 是否休假</span></span><br><span class="line">  course: <span class="built_in">String</span>,</span><br><span class="line">  classroom: <span class="built_in">String</span>,</span><br><span class="line">  ontime: <span class="built_in">String</span>,</span><br><span class="line">  isSleep: <span class="built_in">Boolean</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用规则创建集合 创建集合 Teacher，使用 teacherSchema 规则</span></span><br><span class="line"><span class="keyword">const</span> Teacher = mongoose.model(<span class="string">&quot;Teacher&quot;</span>, teacherSchema);</span><br><span class="line"><span class="comment">// 创建集合实例</span></span><br><span class="line"><span class="keyword">const</span> teacher = <span class="keyword">new</span> Teacher(&#123;</span><br><span class="line">  course: <span class="string">&quot;node.js&quot;</span>,</span><br><span class="line">  classroom: <span class="string">&quot;1801&quot;</span>,</span><br><span class="line">  ontime: <span class="string">&quot;12:00&quot;</span>,</span><br><span class="line">  isSleep: <span class="literal">true</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 保存才能添加成功</span></span><br><span class="line">teacher.save();</span><br></pre></td></tr></table></figure><ul><li><p>添加数据前</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/noCreateT.png"></li><li><p>添加数据后</p> <img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/TrueInsert.png">#####  mongoDB数据库导入数据</li></ul></li></ul></li></ul></li><li><p>语法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongoimport -d 数据库名称 -c 集合名称 --file 要导入的数据文件【json】</span><br></pre></td></tr></table></figure></li></ul><h5 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h5><ul><li><p>前提条件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/***************************/</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 连接mongoose和查询数据</span></span><br><span class="line"><span class="comment">/***************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导入模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line"><span class="comment">// 连接数据库</span></span><br><span class="line">mongoose</span><br><span class="line">  .connect(</span><br><span class="line">    <span class="comment">// mongodb[协议]://user:password@host:port/database-name</span></span><br><span class="line">    <span class="string">&quot;mongodb://root:root@127.0.0.1:27017/school?authSource=admin&quot;</span>,</span><br><span class="line">    &#123; <span class="attr">useUnifiedTopology</span>: <span class="literal">true</span>, <span class="attr">useNewUrlParser</span>: <span class="literal">true</span> &#125;</span><br><span class="line">  )</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接失败: &quot;</span>, error);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;---------------------------&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建集合规则</span></span><br><span class="line"><span class="keyword">const</span> teacherSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  <span class="comment">// 教师: 课程 班级 上课周期 是否休假</span></span><br><span class="line">  course: <span class="built_in">String</span>,</span><br><span class="line">  classroom: <span class="built_in">String</span>,</span><br><span class="line">  ontime: <span class="built_in">String</span>,</span><br><span class="line">  isSleep: <span class="built_in">Boolean</span>,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查询<code>find</code></p><ul><li><p><code>find</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 使用规则创建集合 创建集合 Teacher，使用 teacherSchema 规则</span></span><br><span class="line"><span class="keyword">const</span> Teacher = mongoose.model(<span class="string">&quot;Teacher&quot;</span>, teacherSchema);</span><br><span class="line"><span class="comment">// 查询集合的所有数据</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Teacher.find().then((result) =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(result);</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// 根据条件查询 某一条数据</span></span><br><span class="line">Teacher.find(&#123; <span class="attr">_id</span>: <span class="string">&quot;6029d92dc0749738e8df4d62&quot;</span> &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p><code>findOne</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// findOne 查找为第一条数据</span></span><br><span class="line">Teacher.findOne().then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>区别</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span> find 和 finOne 的区别: find 返回一组 [],findOne 返回一个</span></span><br><span class="line"></span><br><span class="line">********************** find **************************</span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    _id: 6029d92dc0749738e8df4d62,</span><br><span class="line">    course: <span class="string">&#x27;node.js&#x27;</span>,</span><br><span class="line">    classroom: <span class="string">&#x27;1801&#x27;</span>,</span><br><span class="line">    ontime: <span class="string">&#x27;12:00&#x27;</span>,</span><br><span class="line">    isSleep: <span class="literal">true</span>,</span><br><span class="line">    __v: <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line">********************** findOne **************************</span><br><span class="line">&#123;</span><br><span class="line">  _id: 6029d5297f11ef1e1c60bb6f,</span><br><span class="line">  course: <span class="string">&#x27;node.js&#x27;</span>,</span><br><span class="line">  classroom: <span class="string">&#x27;1801&#x27;</span>,</span><br><span class="line">  ontime: <span class="string">&#x27;12:00&#x27;</span>,</span><br><span class="line">  isSleep: <span class="literal">true</span>,</span><br><span class="line">  __v: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>范围查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用集合规则</span></span><br><span class="line"><span class="keyword">const</span> Book = mongoose.model(<span class="string">&quot;Book&quot;</span>, Books);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 范围查询 查询价格大于 8 的书籍信息</span></span><br><span class="line">Book.find(&#123; <span class="attr">price</span>: &#123; <span class="attr">$gt</span>: <span class="number">8</span> &#125; &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;price大于8: &quot;</span>, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 范围查询 查询价格大于等于 8 的书籍信息</span></span><br><span class="line">Book.find(&#123; <span class="attr">price</span>: &#123; <span class="attr">$gte</span>: <span class="number">8</span> &#125; &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;price大于等于8: &quot;</span>, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 范围查询 查询价格小于等于 8 的书籍信息</span></span><br><span class="line">Book.find(&#123; <span class="attr">price</span>: &#123; <span class="attr">$lte</span>: <span class="number">8</span> &#125; &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;price小于等于8: &quot;</span>, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 大于 5 小于 8 的书籍信息</span></span><br><span class="line">Book.find(&#123; <span class="attr">price</span>: &#123; <span class="attr">$gt</span>: <span class="number">5</span>, <span class="attr">$lt</span>: <span class="number">8</span> &#125; &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;price大于5小于8: &quot;</span>, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> in [1,5,8] 的书籍信息 类似其他数据库的模块查询</span></span><br><span class="line">Book.find(&#123; <span class="attr">price</span>: &#123; <span class="attr">$in</span>: [<span class="number">1</span>, <span class="number">5</span>, <span class="number">8</span>] &#125; &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;price 1 5 8: &quot;</span>, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>字段查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// select(&#x27;字段名称一  字段名称二  -id[不查询 id 字段]&#x27;) 字段名前面添加 “-”为不查询该字段</span></span><br><span class="line"></span><br><span class="line">Book.find().select(<span class="string">&#x27;auth price -_id&#x27;</span>).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;查询字段: &quot;</span>, result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">结果输出:</span><br><span class="line"></span><br><span class="line">    查询字段:  [</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling0&#x27;</span>, <span class="attr">price</span>: <span class="number">0</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling1&#x27;</span>, <span class="attr">price</span>: <span class="number">1</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling2&#x27;</span>, <span class="attr">price</span>: <span class="number">2</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling3&#x27;</span>, <span class="attr">price</span>: <span class="number">3</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling4&#x27;</span>, <span class="attr">price</span>: <span class="number">4</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling5&#x27;</span>, <span class="attr">price</span>: <span class="number">5</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling6&#x27;</span>, <span class="attr">price</span>: <span class="number">6</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling7&#x27;</span>, <span class="attr">price</span>: <span class="number">7</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling8&#x27;</span>, <span class="attr">price</span>: <span class="number">8</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">auth</span>: <span class="string">&#x27;tuling9&#x27;</span>, <span class="attr">price</span>: <span class="number">9</span> &#125;</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure></li></ul></li><li><p>删除文档</p><ul><li><p>删除一条</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// <span class="doctag">TODO:</span>查找到一条文档并且删除</span></span><br><span class="line"><span class="comment">// 返回删除的文档 如果查询条件匹配了多个文档 那么将会删除第一个匹配的文档</span></span><br><span class="line">Book.findOneAndDelete(&#123; <span class="attr">price</span>: <span class="number">1</span> &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;删除数据: &quot;</span>, result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除多条</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 删除多个文档 删除价格大于 7 书籍信息</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 传递空对象会将整个文档删除，执行完毕返回结果为对象， &#123; n: 2, ok: 1, deletedCount: 2 &#125; n: 删除文档树 ok: 删除成功</span></span><br><span class="line">Book.deleteMany(&#123; <span class="attr">price</span>: &#123; <span class="attr">$gt</span>: <span class="number">7</span> &#125; &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>更新文档</p><ul><li><p>更新一条文档</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据条件更新一条文档 将价格为 2 的书籍价格更新为 22</span></span><br><span class="line">Book.updateOne(&#123; <span class="attr">price</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">price</span>: <span class="number">22</span> &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// &#123; n: 1, nModified: 1, ok: 1 &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>更新多条</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更新多条 所有价格更改为 22</span></span><br><span class="line">Book.updateMany(&#123;&#125;, &#123; <span class="attr">price</span>: <span class="number">22</span> &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>更新多值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 多值更新</span></span><br><span class="line">Book.updateOne(&#123; <span class="attr">price</span>: <span class="number">2</span>,<span class="attr">auth</span>:<span class="string">&quot;value&quot;</span> &#125;, &#123; <span class="attr">price</span>: <span class="number">22</span>,<span class="attr">auth</span>: <span class="string">&quot;new-value&quot;</span> &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result); </span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul><h5 id="Mongoose-验证"><a href="#Mongoose-验证" class="headerlink" title="Mongoose 验证"></a>Mongoose 验证</h5><ul><li><p>验证</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在创建集合规则,可以设置当前字段的验证规则,验证失败则就输出插入失败</span><br></pre></td></tr></table></figure></li><li><p>验证规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">------------------------- message: system infomation ------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> CSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  auth: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    required: <span class="literal">true</span>, <span class="comment">// 必填项，错误信息不友好</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">------------------------- message: self infomation ------------------------</span><br><span class="line"> <span class="keyword">const</span> CSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  auth: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>, <span class="comment">// 字符串应用规则</span></span><br><span class="line">    required: [<span class="literal">true</span>, <span class="string">&quot;请输入作者&quot;</span>], <span class="comment">// [true,&#x27;message&#x27;] 自定义错误信息</span></span><br><span class="line">minlength: <span class="number">2</span>, <span class="comment">// 最小长度[2,&#x27;最小长度: 2&#x27;]</span></span><br><span class="line">    maxKength: <span class="number">5</span>, <span class="comment">// 最大长度 [5,&#x27;最大长度为: 5&#x27;]</span></span><br><span class="line">    trim: <span class="literal">true</span> <span class="comment">// 去除空格</span></span><br><span class="line">  &#125;,</span><br><span class="line">  age: &#123;</span><br><span class="line">    type: <span class="built_in">Number</span>, <span class="comment">// 数值类型应用规则</span></span><br><span class="line">    min: <span class="number">18</span>, <span class="comment">// 最小 18</span></span><br><span class="line">    max: <span class="number">100</span>, <span class="comment">// 最大 100</span></span><br><span class="line">  &#125;,</span><br><span class="line">  publishDate: &#123;</span><br><span class="line">    type: <span class="built_in">Date</span>,</span><br><span class="line">    <span class="keyword">default</span>: <span class="built_in">Date</span>.now, <span class="comment">// 获取默认值 当前时间 命令行不可见,compass 工具可见</span></span><br><span class="line">  &#125;,</span><br><span class="line">  categories: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    enum: [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;javac&quot;</span>], <span class="comment">// 自定义规则</span></span><br><span class="line">  &#125;,</span><br><span class="line">  rFn: &#123;</span><br><span class="line">    type: <span class="built_in">String</span>,</span><br><span class="line">    validate: &#123;</span><br><span class="line">      validator: <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 返回布尔值</span></span><br><span class="line">        <span class="comment">// true 验证成功</span></span><br><span class="line">        <span class="comment">// false 验证失败</span></span><br><span class="line">        <span class="comment">// value 要验证的值</span></span><br><span class="line">        <span class="keyword">return</span> value &amp;&amp; value.lenght &gt; <span class="number">2</span>; <span class="comment">// 自定义规则</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 自定义错误信息</span></span><br><span class="line">      message: <span class="string">&quot;错误信息不符合验证规则&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>获取验证错误信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用集合规则</span></span><br><span class="line"><span class="keyword">const</span> Cschema = mongoose.model(<span class="string">&quot;Schma&quot;</span>, CSchema);</span><br><span class="line">Cschema.create(&#123; <span class="attr">auth</span>: <span class="string">&quot;Nodejs&quot;</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">categories</span>: <span class="string">&quot;javac&quot;</span>, <span class="attr">rFn</span>: <span class="string">&quot;bbc&quot;</span> &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;成功: &quot;</span>, result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取错误对象</span></span><br><span class="line">    <span class="keyword">const</span> err = error.errors;</span><br><span class="line">    <span class="comment">// 循环错误信息对象</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> attr <span class="keyword">in</span> err) &#123;</span><br><span class="line">      <span class="comment">// 将错误信息打印到控制台</span></span><br><span class="line">      <span class="built_in">console</span>.log(err[attr][<span class="string">&quot;message&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="集合关联"><a href="#集合关联" class="headerlink" title="集合关联"></a>集合关联</h5><ul><li><p>集合关联</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不同集合的数据之间是有关系的，例如文章信息和用户信息存储在不同集合中,但文章是某个用户发表的，要查询文章的所有信息包括发表用户,就需要用到集合关联。</span><br><span class="line"></span><br><span class="line"><span class="comment">//外键？</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>关联</p><ol><li>使用 <code>_id</code>对集合进行关联</li><li> 使用 <code>populate</code>方法进行关联集合查询</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建 User 规则</span></span><br><span class="line"><span class="keyword">const</span> userSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  name: &#123; <span class="attr">type</span>: <span class="built_in">String</span>, <span class="attr">required</span>: <span class="literal">true</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建 POST 规则</span></span><br><span class="line"><span class="keyword">const</span> postSchema = <span class="keyword">new</span> mongoose.Schema(&#123;</span><br><span class="line">  title: &#123; <span class="attr">type</span>: <span class="built_in">String</span> &#125;,</span><br><span class="line">  author: &#123; <span class="attr">type</span>: mongoose.Schema.Types.ObjectId, <span class="attr">ref</span>: <span class="string">&quot;User&quot;</span> &#125;, <span class="comment">// 将 id 作为 关联字段</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用规则 集合名称</span></span><br><span class="line"><span class="keyword">const</span> User = mongoose.model(<span class="string">&quot;User&quot;</span>, userSchema);</span><br><span class="line"><span class="keyword">const</span> Post = mongoose.model(<span class="string">&quot;Post&quot;</span>, postSchema);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">User.create(&#123; <span class="attr">name</span>: <span class="string">&quot;Node-User&quot;</span> &#125;).then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">Post.create(&#123; <span class="attr">title</span>: <span class="string">&quot;Node-Post&quot;</span>, <span class="attr">author</span>: <span class="string">&quot;602a0b486925a224fcecf235&quot;</span> &#125;).then(</span><br><span class="line">  (result) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li><p>关联查询</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Post.find()</span><br><span class="line">  .populate(<span class="string">&quot;author&quot;</span>)</span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment">    [</span></span><br><span class="line"><span class="comment">  &#123;</span></span><br><span class="line"><span class="comment">    _id: 602a0b624e405f43d860083a,</span></span><br><span class="line"><span class="comment">    title: &#x27;Node-Post&#x27;,</span></span><br><span class="line"><span class="comment">    author: &#123; _id: 602a0b486925a224fcecf235, name: &#x27;Node-User&#x27;, __v: 0 &#125;,</span></span><br><span class="line"><span class="comment">    __v: 0</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Mongodb-数据库&quot;&gt;&lt;a href=&quot;#Mongodb-数据库&quot; class=&quot;headerlink&quot; title=&quot;Mongodb-数据库&quot;&gt;&lt;/a&gt;Mongodb-数据库&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="MongoDB" scheme="https://lovobin.github.io/categories/MongoDB/"/>
    
    
    <category term="Node" scheme="https://lovobin.github.io/tags/Node/"/>
    
    <category term="MongoDB" scheme="https://lovobin.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB-安装</title>
    <link href="https://lovobin.github.io/2021/02/10/MongoDB-%E5%AE%89%E8%A3%85/"/>
    <id>https://lovobin.github.io/2021/02/10/MongoDB-%E5%AE%89%E8%A3%85/</id>
    <published>2021-02-10T11:39:49.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Mongodb-安装与使用"><a href="#Mongodb-安装与使用" class="headerlink" title="Mongodb-安装与使用"></a>Mongodb-安装与使用</h3><h4 id="Mongodb-安装"><a href="#Mongodb-安装" class="headerlink" title="Mongodb 安装"></a>Mongodb 安装</h4><ol><li><p>下载<code>Mongodb</code>和<code>Mongodn Compass</code></p><blockquote><p><a href="https://www.mongodb.com/try/download/community">点击前往 Mongodb  官网</a></p><p><a href="https://www.mongodb.com/try/download/compass">点击前往 Mongodb-compass  官网</a></p></blockquote><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/downloadMongodb.png" width="300"><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/mongodbins.png"></li><li><p> 请使用管理员权限安装</p></li></ol><ul><li><code>accept</code></li><li><code>custom</code> 自定义安装路径,无中文特殊符号的路径下</li></ul>   <img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/custorm.png" width="400"><ul><li><p>默认</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/mongbinstall.png" width="400"></li><li><p><code>compass</code></p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/compass.png" width="400s"></li></ul><h4 id="Compass-安装"><a href="#Compass-安装" class="headerlink" title="Compass 安装"></a>Compass 安装</h4><ul><li><p>双击 安装包安装即可</p></li><li><p>完成后进入 点击<code>Start Using Compass</code>,注意留意用户名以便于其他软件使用</p></li><li><p>连接</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/connectMongdb.png" width="600"></li><li><p>成功后的标志</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/rightMongodb.png" width="600"></li><li><p>使用<code>Navicat Premium 15</code>连接<code>Mongodb</code></p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/navMongodb.png" width="600"></li><li><p>启动停止<code>mongodb</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">配置环境变量: path: bin目录下</span><br><span class="line"></span><br><span class="line">使用管理员权限启动: net start mongodb</span><br><span class="line">停止服务: net stop mongodb</span><br></pre></td></tr></table></figure></li><li><p>检测是否正确安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongo --version</span><br><span class="line"></span><br><span class="line">输出版本信息即为正确安装</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="开启验证后使用-Navcat"><a href="#开启验证后使用-Navcat" class="headerlink" title="开启验证后使用 Navcat"></a>开启验证后使用 <code>Navcat</code></h4><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/monPassword.png" width="400">]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Mongodb-安装与使用&quot;&gt;&lt;a href=&quot;#Mongodb-安装与使用&quot; class=&quot;headerlink&quot; title=&quot;Mongodb-安装与使用&quot;&gt;&lt;/a&gt;Mongodb-安装与使用&lt;/h3&gt;&lt;h4 id=&quot;Mongodb-安装&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="MongoDB" scheme="https://lovobin.github.io/categories/MongoDB/"/>
    
    
    <category term="SQL" scheme="https://lovobin.github.io/tags/SQL/"/>
    
    <category term="Node" scheme="https://lovobin.github.io/tags/Node/"/>
    
    <category term="MongoDB" scheme="https://lovobin.github.io/tags/MongoDB/"/>
    
  </entry>
  
  <entry>
    <title>Python-Xpath详解</title>
    <link href="https://lovobin.github.io/2021/02/09/Python-Xpath%E8%AF%A6%E8%A7%A3/"/>
    <id>https://lovobin.github.io/2021/02/09/Python-Xpath%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-02-09T10:08:57.000Z</published>
    <updated>2021-03-17T05:10:00.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-Xpath详解"><a href="#Python-Xpath详解" class="headerlink" title="Python-Xpath详解"></a>Python-Xpath详解</h3><blockquote><p>网页插件: <code>XPath Helper</code></p><p>视频推荐: 慕课网 <code>web端功能自动化定位元素</code></p></blockquote><ol><li><p>认识浏览器默认<code>xpath</code>,<code>ctrl+f</code>调出浏览器输入<code>xpath</code></p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/chromeXpath.png" width="600"></li><li><p> <code>xpath</code>语法</p></li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;nav-bar&quot;</span> class=<span class="string">&quot;nav-bar&quot;</span>&gt; 导航 &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">//tag-name[@attribute=<span class="string">&#x27;value&#x27;</span>]</span><br><span class="line"></span><br><span class="line">Eg.</span><br><span class="line"></span><br><span class="line">//div[@id=<span class="string">&#x27;nav-bar&#x27;</span>] <span class="comment"># id 选择器</span></span><br><span class="line">//div[@class=<span class="string">&#x27;nav-bar&#x27;</span>] <span class="comment"># 类选择器</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>   <img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/xpathbaidu.png" width="600"><ol start="3"><li> <code>/</code>和<code>//</code>的区别</li></ol><blockquote><p><code>/</code> : 元素是上一级节点的子节点中的一个，不能跳级</p><p><code>//</code>:  下级任何子节点或者任何嵌套子节点中的一个，可以跳级</p></blockquote><ol start="4"><li> 如何构建一个有效的<code>xpath</code></li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">灵活使用 / 和 //</span><br></pre></td></tr></table></figure><ol start="5"><li> 使用<code>text</code>定位</li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//tag-name[text()=<span class="string">&#x27;value&#x27;</span>]</span><br></pre></td></tr></table></figure><ol start="6"><li><p>平级节点或父级节点定位</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//tag-name[text()=<span class="string">&#x27;value&#x27;</span>]//parent::parent-tag-name//preceding-sibling::tag-name/ </span><br></pre></td></tr></table></figure></li><li><p> 获取<code>xpath</code>时注意源码获取 目标<code>xpath</code>，因为渲染问题导致查找出错</p></li><li><p>获取 <code>a</code>的<code>href</code>值</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">···a/@href <span class="comment"># 获取 a 的 href 值</span></span><br><span class="line">···a/text()  <span class="comment"># 获取 a 的文本值</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Python-Xpath详解&quot;&gt;&lt;a href=&quot;#Python-Xpath详解&quot; class=&quot;headerlink&quot; title=&quot;Python-Xpath详解&quot;&gt;&lt;/a&gt;Python-Xpath详解&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;网页插件: &lt;co</summary>
      
    
    
    
    <category term="Python" scheme="https://lovobin.github.io/categories/Python/"/>
    
    
    <category term="Python" scheme="https://lovobin.github.io/tags/Python/"/>
    
    <category term="Xpath" scheme="https://lovobin.github.io/tags/Xpath/"/>
    
  </entry>
  
  <entry>
    <title>gitcalendar 挂掉新修复</title>
    <link href="https://lovobin.github.io/2021/02/06/gitcalendar-%E6%8C%82%E6%8E%89%E6%96%B0%E4%BF%AE%E5%A4%8D/"/>
    <id>https://lovobin.github.io/2021/02/06/gitcalendar-%E6%8C%82%E6%8E%89%E6%96%B0%E4%BF%AE%E5%A4%8D/</id>
    <published>2021-02-06T17:00:37.000Z</published>
    <updated>2021-03-17T05:10:00.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="gitcalendar-挂掉新修复"><a href="#gitcalendar-挂掉新修复" class="headerlink" title="gitcalendar 挂掉新修复"></a>gitcalendar 挂掉新修复</h3><ul><li><p>异常 - 数据不显示 报错</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/gitcalendar.png"></li></ul><h3 id="Vercel-使用"><a href="#Vercel-使用" class="headerlink" title="Vercel 使用"></a>Vercel 使用</h3><blockquote><p><a href="https://vercel.com/dashboard">点击前往 Vercel 官网</a></p></blockquote><ol><li>注册账号（<code>github</code>）</li><li>使用 Vercel 新建 <code>API</code></li><li> 部署错误删除该部署</li></ol><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/deleteProj.png" width="400"><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/20210206172348.png" width="600"><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/deleteV.png" width="600"><ol start="4"><li> 使用小冰老师提供的<code>API</code>导入,获取链接</li></ol>   <img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/other.png" width="400"><ol start="5"><li><p> 获取部署后的 此格式地址<code>python-github-calendar-api-zeta.vercel.app</code></p></li><li><p>  主题配置文件中添加如下</p></li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitcalendar:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  simplemode: <span class="literal">true</span></span><br><span class="line">  user: lovobin</span><br><span class="line">  apiurl: python-github-calendar-api-zeta.vercel.app</span><br><span class="line">  color: <span class="string">&quot;[&#x27;#e4dfd7&#x27;, &#x27;#f9f4dc&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f7e8aa&#x27;, &#x27;#f8df72&#x27;, &#x27;#fcd217&#x27;, &#x27;#fcc515&#x27;, &#x27;#f28e16&#x27;, &#x27;#fb8b05&#x27;, &#x27;#d85916&#x27;, &#x27;#f43e06&#x27;]&quot;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure><ol start="7"><li><p>个人修改了<code>js  api</code>前缀</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var githubapiurl = <span class="string">&quot;https://python-github-calendar-api-zeta.vercel.app/api?/&quot;</span> + calendar.user;</span><br></pre></td></tr></table></figure></li><li><p>修复后 数据丢失</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/newG.png"  width="400"></li><li><p> 使用 Vercel  进行博客部署</p></li></ol><blockquote><p><a href="https://learnmore.vercel.app/">Vercel 博客部署地址</a></p></blockquote><ol start="10"><li><p>更新部署</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/vercel.png" width="600"><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/updateVercel.png" width="600"></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;gitcalendar-挂掉新修复&quot;&gt;&lt;a href=&quot;#gitcalendar-挂掉新修复&quot; class=&quot;headerlink&quot; title=&quot;gitcalendar 挂掉新修复&quot;&gt;&lt;/a&gt;gitcalendar 挂掉新修复&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;异</summary>
      
    
    
    
    <category term="Butterfly" scheme="https://lovobin.github.io/categories/Butterfly/"/>
    
    
    <category term="Butterfly" scheme="https://lovobin.github.io/tags/Butterfly/"/>
    
    <category term="hexo" scheme="https://lovobin.github.io/tags/hexo/"/>
    
    <category term="gitcalendar" scheme="https://lovobin.github.io/tags/gitcalendar/"/>
    
  </entry>
  
  <entry>
    <title>Node基础</title>
    <link href="https://lovobin.github.io/2021/02/04/Node%E5%9F%BA%E7%A1%80/"/>
    <id>https://lovobin.github.io/2021/02/04/Node%E5%9F%BA%E7%A1%80/</id>
    <published>2021-02-04T09:21:41.000Z</published>
    <updated>2021-03-17T05:10:00.430Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Node基础"><a href="#Node基础" class="headerlink" title="Node基础"></a>Node基础</h3><h4 id="命令行基础"><a href="#命令行基础" class="headerlink" title="命令行基础"></a>命令行基础</h4><ul><li><p>常用指令</p><ol><li><p><code>Win+r</code>调出<code>DOS</code>窗口</p></li><li><p><code>cd</code>目录名 进入指定目录</p></li><li><p><code>md</code>目录名 创建一个文件夹</p></li><li><p><code>rd</code> 目录名 删除一个文件夹</p></li></ol></li><li><p>目录</p><ol><li><code>.</code>表示当前目录</li><li><code>..</code>表示上一级目录</li></ol></li><li><p>环境变量</p></li></ul><h4 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h4><blockquote><p>进程: 进程负责为程序的运行提供必备的环境</p><p>线程: 线程计算机中的最小的计算单位，线程负责执行进程中的程序</p><p>Node的服务器是单线程的: Node 处理请求时是单线程,但是在后台拥有一个I/O线程池</p></blockquote><h4 id="Node-简介"><a href="#Node-简介" class="headerlink" title="Node 简介"></a>Node 简介</h4><ul><li><p>简介</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> Node.js 是一个能够在服务器端运行 Javascript 的开放源代码、跨平台 Javascript 运行环境。</span><br><span class="line"><span class="number">2.</span> Node 采用Google开发的 V8 引擎运行 js 代码，使用事件驱动、非阻塞和异步I/O模型等技术来提高性能、可优化应用程序的传输量和规模。</span><br></pre></td></tr></table></figure></li></ul><h4 id="Node-安装使用"><a href="#Node-安装使用" class="headerlink" title="Node 安装使用"></a>Node 安装使用</h4><ul><li><p>安装  <a href="https://nodejs.org/en/">点击前往 Node 官网</a></p></li><li><p>检测</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node --version</span><br></pre></td></tr></table></figure><ul><li><p>成功显示版本号</p></li><li><p>安装失败错误代码<code>2502,2503</code></p><ol><li><p>安装权限不足</p><ul><li>以管理员身份运行<code>powershell: windows+x </code></li><li>输入运行安装包命令<code>msiexec/package [ D:\Program Files\nodejs\replace-your-node-path  node-v10.13.0-x64.msi your-node-version</code></li></ul></li><li><p>安装验证失败</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">添加系统环境变量</span><br><span class="line"></span><br><span class="line">找到系统中的 node.exe 的路径添加系统环境变量后退出执行:</span><br><span class="line"></span><br><span class="line">windows+r: cmd  node -v</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/nodepath.png" width="600"></li></ol></li></ul></li><li><p>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node 文件名.js</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/helloNode.png" width="400"></li><li><p>模块化</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">- 在 Node 中 一个 js 文件就是一个模块</span><br><span class="line">- 在 Node 中,每一个 js 文件中的 js 代码都是独立运行在一个函数中</span><br><span class="line"></span><br><span class="line">模块分成两大类:</span><br><span class="line">    核心模块:</span><br><span class="line">        <span class="number">1.</span> 由 Node 引擎提供的模块</span><br><span class="line">        <span class="number">2.</span> 核心模块的标识就是模块的名称</span><br><span class="line">    文件模块:</span><br><span class="line"><span class="number">1.</span> 由用户自己创建的模块</span><br><span class="line">        <span class="number">2.</span> 文件模块的标识就是文件的路径(绝对路径、相对路径)</span><br><span class="line"></span><br><span class="line">相对路径使用  . 或 .. 开头</span><br></pre></td></tr></table></figure></li><li><p>外部模块引入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">在 node 模块中,通过 require() 函数来引入外部的模块</span><br><span class="line">    </span><br><span class="line">    require() 可以传递一个文件的路径作为参数, node 将会自动根据该路径来引入外部模块</span><br><span class="line"></span><br><span class="line">    使用 require() 引入模块以后,该函数会返回一个对象，这个对象代表是引入的模块</span><br><span class="line">    </span><br><span class="line">    exports 向外部暴露变量和方法</span><br><span class="line">只需要将需要暴露给外部的变量或方法设置为 exports 的属性</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>exports</code>使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">A.js: <span class="built_in">exports</span>.x = <span class="string">&#x27;Hello World 模块的 x &#x27;</span></span><br><span class="line"></span><br><span class="line">B.js: </span><br><span class="line"></span><br><span class="line">引入 A 模块: <span class="keyword">var</span> md = <span class="built_in">require</span>(<span class="string">&#x27;file-path/A&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(md.x) <span class="comment">// B模块输出: Hello World 模块的 x</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span> 是 <span class="built_in">module</span>.exports 的别名(地址引用关系),导出对象最终以 <span class="built_in">module</span>.exports 为准。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>global</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">在 node 中有一个全局对象 <span class="built_in">global</span> 它的作用和网页中 <span class="built_in">window</span> 类似</span><br><span class="line"></span><br><span class="line">在全局中创建的变量都会作为 <span class="built_in">global</span> 的属性保存</span><br><span class="line"></span><br><span class="line">在全局中创建的函数都会作为 <span class="built_in">global</span> 的方法保存</span><br><span class="line"></span><br><span class="line">当 node 执行模块中的代码时,它会首先在代码的最顶端,添加如下代码</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"><span class="built_in">exports</span>,<span class="built_in">require</span>,modelm__filename,__dirname&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">          </span></span></span><br><span class="line"><span class="function"><span class="params">          在代码最底部,添加如下代码</span></span></span><br><span class="line"><span class="function"><span class="params">          &#125;</span></span></span><br></pre></td></tr></table></figure></li></ul><h4 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h4><ul><li><p><code>package</code></p><ol><li><code>CommonJS</code> 的包规范允许我i们将一组相关的模块泽合到一起，形成一组完整的工具</li><li> <code>CommonJS</code> 的包规范由包结构和包描述文件两个部分组成</li></ol></li><li><p>包结构: 用于组织包中的各种文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">包实际上就是一个压缩文件,解压后还原为目录。符合规范的目录,应该包含如下文件:</span><br><span class="line"></span><br><span class="line">    - package.json 描述文件</span><br><span class="line">    - bin 可执行二进制文件</span><br><span class="line">    - doc 文档</span><br><span class="line">    - test 单元测试</span><br><span class="line">     </span><br></pre></td></tr></table></figure></li><li><p>包描述文件: 描述包的相关信息，以供外部读取分析</p></li><li><p><code>npm(Node Package Manager)</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm search package-name <span class="comment">// 搜索</span></span><br><span class="line"></span><br><span class="line">npm install package-name <span class="comment">// 下载</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置<code>cnpm</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 安装 cnpm</span></span><br><span class="line">npm install -g cnpm --registry=https:<span class="comment">//registry.npm.taobao.org || npm install --global cnpm</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 常用命令</span></span><br><span class="line">安装包</span><br><span class="line">cnpm i &lt;pkg&gt;  或者 cnpminstall &lt;pkg&gt;  或者  cnpm i &lt;pkg&gt;@&lt;version&gt;  或者  cnpminstall &lt;pkg&gt;@&lt;version&gt;</span><br><span class="line"></span><br><span class="line">卸载包</span><br><span class="line">cnpm uninstall &lt;name&gt; 或者 cnpm uninstall &lt;name&gt;@[&lt;version&gt;]</span><br><span class="line"></span><br><span class="line">查看当前项目下的包列表</span><br><span class="line">cnpm ls</span><br><span class="line"></span><br><span class="line">查看全局包列表</span><br><span class="line">cnpm ls －g</span><br><span class="line"></span><br><span class="line">清理缓存</span><br><span class="line">cnpm cache clean</span><br><span class="line">                                                </span><br></pre></td></tr></table></figure></li></ul><h3 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h3><h4 id="系统模块"><a href="#系统模块" class="headerlink" title="系统模块"></a>系统模块</h4><h5 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h5><ul><li><p><code>fs</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">fs 是 file-system 的简写 就是文件系统的意思</span><br><span class="line"></span><br><span class="line">在 node 中如果想要进行文件操作，就必须引入 fs 这个核心模块</span><br><span class="line"></span><br><span class="line">fs.readFile(<span class="string">&#x27;文件路径/文件名称&#x27;</span>,[<span class="string">&#x27;文件编码&#x27;</span>],callback)</span><br></pre></td></tr></table></figure></li><li><p>文件读取</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">第一个参数就是要读取的文件路径</span><br><span class="line">第二个参数就是回调函数</span><br><span class="line">      成功</span><br><span class="line">          data 数据</span><br><span class="line">          error <span class="literal">null</span></span><br><span class="line">      失败</span><br><span class="line">          data <span class="literal">null</span></span><br><span class="line">          error 错误对象</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 fs 模块</span></span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 文件读取</span></span><br><span class="line">fs.readFile(<span class="string">&quot;./b.txt&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error, data</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;读取文件失败&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li><li><p>写文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">第一个参数: 文件路径</span><br><span class="line">第二个参数: 文件内容</span><br><span class="line">第三个参数: 回调函数</span><br><span class="line"></span><br><span class="line">error</span><br><span class="line">成功: </span><br><span class="line">文件写入成功</span><br><span class="line">        error --&gt; <span class="literal">null</span></span><br><span class="line">失败: </span><br><span class="line">文件写入失败</span><br><span class="line">        error 就是错误对象</span><br><span class="line">   </span><br><span class="line"> fs.writeFile(<span class="string">&#x27;文件路径/文件名称&#x27;</span>,<span class="string">&#x27;数据&#x27;</span>,callback);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line">  fs.writeFile(<span class="string">&#x27;./file-name&#x27;</span>,<span class="string">&#x27;write-content&#x27;</span>,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(error)&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;写入失败&#x27;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;文件写入成功···&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>系统模块<code>path</code>路径操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path.join(<span class="string">&#x27;路径&#x27;</span>,<span class="string">&#x27;路径&#x27;</span>,····)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主要是由于系统不同使用的路径分隔符不同</span></span><br><span class="line"><span class="comment">// 拼接如下路径 public/img/avatar</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> filepath = path.join(<span class="string">&quot;public&quot;</span>, <span class="string">&quot;img&quot;</span>, <span class="string">&quot;avatar&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(filepath);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>相对路径、绝对路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 大多数情况下使用绝对路径,因为相对路径有时候相对的是命令行工具的当前工作目录</span><br><span class="line"><span class="number">2.</span> 在读取文件或者设置文件路径时都会选择绝对路径</span><br><span class="line"><span class="number">3.</span> 使用 __dirname 获取当前文件所在的绝对路径</span><br></pre></td></tr></table></figure></li><li><p>第三方模块</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">别人写好的m具有特定功能,我们能直接使用的模块即第三方模块，由于第三方模块都是由多个文件组成并且被放置在一个文件夹中,所以又名包名。</span><br><span class="line"></span><br><span class="line">https:<span class="comment">//www.npmjs.com/</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="第三方模块"><a href="#第三方模块" class="headerlink" title="第三方模块"></a>第三方模块</h4><ul><li><p>第三方模块<code>nodemon</code>,很有必要安装使用,修改内容将会实时刷新,无需重新启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载 </span></span><br><span class="line">npm install nodemon --global</span><br><span class="line"></span><br><span class="line"><span class="comment">#检测安装</span></span><br><span class="line">nodemon -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">nodemon node-fils-name.js</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/nodemon.png" width="600"></li><li><p>第三方模块<code>nrm</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">nrm(npm registry manager): npm 下载地址切换工具 npm 默认下载地址在国外,国内下载速度慢</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 nrm</span></span><br><span class="line">npm install nrm -g</span><br><span class="line"><span class="comment"># 显示可用下载列表</span></span><br><span class="line">nrm list</span><br><span class="line"><span class="comment"># 使用可用 镜像</span></span><br><span class="line">nrm use taobao</span><br><span class="line"><span class="comment">#  * 代表当前在用镜像</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/nrm.png" alt="下载失败" width="600"><ul><li><p>解决方案(未尝试)</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/nrmresult.png"></li></ul></li><li><p>第三方模块<code>gulp</code></p><ol><li><p><code>gulp</code>能做什么</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">项目上线 HTML CSS JS 文件压缩</span><br><span class="line">语法转换(es6,less)</span><br><span class="line">公共文件抽离</span><br></pre></td></tr></table></figure></li><li><p><code>gulp</code>使用步骤</p><ul><li><p>项目中下载<code>gulp</code>库文件,要使用项目中根目录下执行<code>npm install gulp</code></p></li><li><p>在项目根目录下新建<code>gulpfile.js</code>文件，只能是这个文件名</p></li><li><p>重构项目的文件夹结构 <code>src</code> 目录放置源代码文件 <code>dist</code>目录放置构建后文件</p></li><li><p>在 <code>gulpfile.js</code>文件中编写任务</p></li><li><p>在命令行工具中执行<code>gulp</code>任务</p></li></ul></li><li><p> <code>gulp</code>中提供的方法</p></li></ol><ul><li><p><code>gulp.src()</code>获取任务要处理的文件</p></li><li><p><code>gulp.desc()</code>输出文件</p></li><li><p><code>gulp.task()</code>建立gulp任务</p></li><li><p><code>gulp.watch()</code>监控文件的变化</p></li><li><p>使用<code>gulp</code></p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src='https://gitee.com/wang_hong_bin/repo-bin/raw/master/gulp.png'><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot; npm install gulp &quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 gulp.task() 方法建立任务</span></span><br><span class="line"><span class="comment">// 参数: 1.任务的名称</span></span><br><span class="line"><span class="comment">// 参数: 2. 任务的回调 </span></span><br><span class="line">gulp.task(<span class="string">&quot;first&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 获取要处理的文件</span></span><br><span class="line">  gulp</span><br><span class="line">    .src(<span class="string">&quot;./src/css/index/style.css&quot;</span>) <span class="comment">// src: 目录自定义 自动会生成</span></span><br><span class="line">    <span class="comment">// 将处理后的文件输出到 dist 目录，dest输出</span></span><br><span class="line">    .pipe(gulp.dest(<span class="string">&quot;./dist/css/index&quot;</span>)); <span class="comment">// dist: 目录自定义 自动会生成</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 全局安装命令工具 npm install gulp-cli -g</span></span><br></pre></td></tr></table></figure><ul><li><p>下载命令工具,全局安装(全局安装: 多个项目都会使用, 库文件则不同)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">npm install gulp-cli -g</span><br><span class="line"><span class="comment"># 检测</span></span><br><span class="line">gulp -v</span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line">gulp task-name [Eg. first]</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/gulpfirst.png"></li></ul></li><li><p><code>gulp</code>插件</p><ol><li><code>gulp-htmlmin</code> html 文件压缩</li><li> <code>gulp-csso</code>压缩css</li><li><code>gulp-babel</code>JavaScript语法转换</li><li><code>gulp-less</code>语法转换</li><li><code>gulp-uglify</code>压缩混淆 JavaScript</li><li><code>gulp-file-include</code>公共文件包含</li><li><code>browsersync</code> 浏览器实时同步</li></ol></li><li><p>使用插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">下载插件文档: https://www.npmjs.com/package/gulp-htmlmin</span><br><span class="line"></span><br><span class="line"> npm install --save gulp-htmlmin</span><br><span class="line"> </span><br></pre></td></tr></table></figure><ul><li><p>新建压缩 html 任务(先了解,等待后续补充)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 gulp</span></span><br><span class="line"><span class="keyword">const</span> gulp = <span class="built_in">require</span>(<span class="string">&quot;gulp&quot;</span>);</span><br><span class="line"><span class="comment">// 引用插件</span></span><br><span class="line"><span class="keyword">const</span> htmlmin = <span class="built_in">require</span>(<span class="string">&quot;gulp-htmlmin&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// html 任务 压缩 html</span></span><br><span class="line"><span class="comment">// 建立任务</span></span><br><span class="line">gulp.task(<span class="string">&quot;htmlmin&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> (</span><br><span class="line">    gulp</span><br><span class="line">      <span class="comment">// 获取处理任务路径</span></span><br><span class="line">      .src(<span class="string">&quot;./src/*.html&quot;</span>)</span><br><span class="line">      <span class="comment">// 压缩 html 文件中的代码 collapseWhitespace 压缩空格? true 是 pipe( 任务事件 )</span></span><br><span class="line">      .pipe(htmlmin(&#123; <span class="attr">collapseWhitespace</span>: <span class="literal">true</span> &#125;))</span><br><span class="line">      <span class="comment">// 输出</span></span><br><span class="line">      .pipe(gulp.desc(<span class="string">&quot;dist&quot;</span>))</span><br><span class="line">  );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>原 <code>html </code>文件格式</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/yuanhtml.png" width="600"></li><li><p>压缩后</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/htmlmin.png"></li><li><p><code>构建</code>任务</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构建任务  所有任务 通过 gulp default 全部执行</span></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>,[<span class="string">&#x27;htmlmin&#x27;</span>,<span class="string">&#x27;first&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><blockquote><p><code>node_modules</code> 无需传输，使用<code>npm install </code> 会自动前往 <code>package.json</code> 寻找依赖下载</p><p>项目描述文件,记录当前项目的项目信息,例如: 项目名称 版本 作者<code> github</code> 地址 当前项目依赖了那些第三方模块 使用 <code>npm init -y</code> 生成</p></blockquote><ul><li><p><code>npm init -y</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;node-day03&quot;</span>, </span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;gulp-demo.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;dependencies&quot;</span>: &#123; <span class="comment"># 项目依赖</span></span><br><span class="line">    <span class="string">&quot;gulp&quot;</span>: <span class="string">&quot;^4.0.2&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gulp-file-include&quot;</span>: <span class="string">&quot;^2.3.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;gulp-htmlmin&quot;</span>: <span class="string">&quot;^5.0.1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;&#125;, <span class="comment"># 开发依赖 --save </span></span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;keywords&quot;</span>: [],</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span> <span class="comment"># 开放源代码协议</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>开发依赖</p><ol><li>在项目的开发阶段需要依赖，线上运营阶段不需要依赖第三方包，称为开发依赖</li><li> 使用 <code>npm install</code> 包名 <code>--save-dev</code> 命令将包名添加到<code>package.json</code>文件的 <code>devDependencies</code>字段中</li></ol></li><li><p><code>package-lock.json</code>文件的作用</p><ol><li>锁定包的版本,确保再次下载时不会因为包版本不同产生问题</li><li> 加快下载速度, 因为该文件中已经记录了项目所依赖第三方包的树状结构和包的下载地址，重新安装时只需下载即可,不需做额外工作</li></ol></li><li><p>命令别名</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">package.json: </span><br><span class="line">    <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">        <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;build&quot;</span>: <span class="string">&quot;nodemon app.js&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">       </span><br><span class="line"></span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;命令&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;build&quot;</span>: <span class="string">&quot;nodemon app.js&quot;</span></span><br><span class="line"></span><br><span class="line"># 执行</span><br><span class="line">npm run 别名 Eg. npm run build</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="服务器端基础概念"><a href="#服务器端基础概念" class="headerlink" title="服务器端基础概念"></a>服务器端基础概念</h4><ul><li><p>网站服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">能够提供网站访问服务的机器就是网站服务器,它能够接受客户端的请求,能够对请求做出响应。</span><br></pre></td></tr></table></figure></li><li><p>URL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">统一资源定位符,又叫 URL(uniform ResourceLocator) 是专门标识 Internet 网上资源位置而设的一种编址方式</span><br></pre></td></tr></table></figure></li><li><p>URL 的组成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输出协议://服务器 ip或域名:端口/资源所在位置标识</span><br><span class="line"></span><br><span class="line">https://lovobin.github.io:80/2021/02/Node%E5%9F%BA%E7%A1%80/</span><br><span class="line"></span><br><span class="line">http: 超文本传输协议, 提供了一种发布和接受 HTML 页面的方法</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="简单的-http-服务"><a href="#简单的-http-服务" class="headerlink" title="简单的 http 服务"></a>简单的 http 服务</h4><ul><li><p>搭建简单的服务器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载 http 核心模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 使用 http.createServer() 方法创建一个 Web 服务器 返回一个 server 实例</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    当客户端请求过来,就会自动触发服务器的 request 请求事件,  然后执行第二个参数: 回调处理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;收到客户端的请求了··&quot;</span> + request.url);</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">      response 对象有一个方法 write 可以用来给客户端发送响应数据</span></span><br><span class="line"><span class="comment">      write 可以使用多次,但是最后一定要使用 end 来结束响应 否则客户端会一直等待</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">  response.write(<span class="string">&quot;响应···&quot;</span>);</span><br><span class="line">  <span class="comment">// 告诉客户端 我的话说完了 你可以直接呈递给用户</span></span><br><span class="line">  response.end();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定端口号</span></span><br><span class="line">server.listen(<span class="number">3031</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功，可以通过 http://127.0.0.1:3000/ 进行访问了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>请求路径获取响应</p><ul><li><p>普通文本响应</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 发送</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;收到请求了: &quot;</span> + request.url);</span><br><span class="line">    <span class="comment">// 根据不同的请求的路径,响应不同的内容</span></span><br><span class="line">    <span class="keyword">var</span> url = request.url;</span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&quot;/&quot;</span>) &#123;</span><br><span class="line">        response.end(<span class="string">&quot;index Page&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/login&quot;</span>) &#123;</span><br><span class="line">        response.end(<span class="string">&quot;user login&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (url === <span class="string">&quot;/register&quot;</span>) &#123;</span><br><span class="line">        response.end(<span class="string">&quot;user register&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        response.end(<span class="string">&quot;response ·····&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 绑定端口号</span></span><br><span class="line">server.listen(<span class="number">3101</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功···可以通过127.0.0.1:3031 来访问了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>响应 <code>json</code>数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 http 模块</span></span><br><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 server</span></span><br><span class="line"><span class="keyword">var</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 发送</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">request, response</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 配置响应编码</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Type&quot;</span>, <span class="string">&quot;[text/plain 根据类型变化可选];charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;收到请求了: &quot;</span> + request.url);</span><br><span class="line">    <span class="comment">// 根据不同的请求的路径,响应不同的内容</span></span><br><span class="line">    <span class="keyword">var</span> url = request.url;</span><br><span class="line">    <span class="comment">// 定义json 类型数据</span></span><br><span class="line">    <span class="keyword">var</span> products = [</span><br><span class="line">        &#123;</span><br><span class="line">            brand: <span class="string">&quot;xiaomi&quot;</span>,</span><br><span class="line">            price: <span class="number">6699</span>,</span><br><span class="line">            color: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            brand: <span class="string">&quot;iPhone&quot;</span>,</span><br><span class="line">            price: <span class="number">9988</span>,</span><br><span class="line">            color: <span class="string">&quot;purple&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            brand: <span class="string">&quot;huawei&quot;</span>,</span><br><span class="line">            price: <span class="number">9988</span>,</span><br><span class="line">            color: <span class="string">&quot;blue&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    ];</span><br><span class="line">    <span class="comment">// 响应的内容只能是 二进制数据或者字符串</span></span><br><span class="line">    <span class="keyword">if</span> (url === <span class="string">&quot;/products&quot;</span>) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(products));</span><br><span class="line">        response.end(<span class="built_in">JSON</span>.stringify(products));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 绑定端口号</span></span><br><span class="line">server.listen(<span class="number">3101</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功···可以通过127.0.0.1:3031 来访问了&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>常见<code>Content-Type</code>类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">常见的媒体格式类型如下：</span><br><span class="line">    text/html  HTML格式</span><br><span class="line">    text/plain 纯文本格式</span><br><span class="line">    text/xml  XML格式</span><br><span class="line">    image/gif gif图片格式</span><br><span class="line">    image/jpeg jpg图片格式</span><br><span class="line">    image/png png图片格式</span><br></pre></td></tr></table></figure></li></ul><h4 id="HTTP-协议"><a href="#HTTP-协议" class="headerlink" title="HTTP 协议"></a>HTTP 协议</h4><ul><li><p>http 协议的概念</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">超文本传输协议(英文: HyperText Transfer Protocol 缩写: HTTP) 规定了如何从网站服务器传输超文本到本地浏览器,它基于客户端服务器加构工作,是客户端服务器加构工作,是客户端和服务器端请求和应答的标准。</span><br></pre></td></tr></table></figure></li><li><p>报文</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 HTTP 请求和响应的过程中传递的数据块就叫报文m包括要传送的数据和一些附加信息,并且要遵循规定好的格式。</span><br></pre></td></tr></table></figure></li><li><p>请求报文</p><ol><li><p>请求方式</p><ul><li><code>GET</code></li><li><code>POST</code></li></ul></li><li><p> 请求地址</p></li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.on(<span class="string">&#x27;request&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    req.headers <span class="comment">// 获取请求报文</span></span><br><span class="line">    req.url <span class="comment">// 获取请求地址</span></span><br><span class="line">    req.method <span class="comment">// 获取请求方式</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h4 id="HTTP-请求与响应处理"><a href="#HTTP-请求与响应处理" class="headerlink" title="HTTP 请求与响应处理"></a>HTTP 请求与响应处理</h4><ul><li><p>GET 参数请求处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// http请求与响应.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 处理 url</span></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="comment">// req: request res: response</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHeader(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/plain;charset=utf8&quot;</span>,</span><br><span class="line">    hello: <span class="string">&quot;world&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 请求参数处理 http://127.0.0.1:3031/?username=zhangsan&amp;age=18</span></span><br><span class="line">  <span class="built_in">console</span>.log(req.url); <span class="comment">// /?username=zhangsan&amp;age=18</span></span><br><span class="line">  <span class="comment">// 字符串截取可以获取参数</span></span><br><span class="line">  <span class="comment">// 内置模块</span></span><br><span class="line">  <span class="built_in">console</span>.log(url.parse(req.url));</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1. 要解析的 url 地址</span></span><br><span class="line"><span class="comment">    2. 将查询的参数解析成对象形式</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    url.parse(req.url,true)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">let</span> params = url.parse(req.url, <span class="literal">true</span>).query;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;params: &quot;</span>, params);</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;params-username:&quot;</span>, params.username, <span class="string">&quot;params-age:&quot;</span>, params.age); <span class="comment">// zhangsan 18</span></span><br><span class="line">  res.end(<span class="string">&quot;请求成功&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3031</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;可以通过 127.0.0.1:3031/ 来访问服务器了····&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 路径判断问题</span></span><br><span class="line"><span class="keyword">let</span> &#123;query,pathname&#125;=url.parse(req.url,<span class="literal">true</span>);</span><br><span class="line"><span class="built_in">console</span>.log(query.username,query.age);</span><br><span class="line"><span class="keyword">if</span>(pathname==<span class="string">&#x27;/index&#x27;</span> || pathname==<span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">    res.end(<span class="string">&#x27;index home&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/getParse.png" width="400"></li><li><p>POST 参数请求处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// post请求参数.js</span></span><br><span class="line"><span class="comment">// http请求与响应.js</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"><span class="comment">// 处理请求参数模块 post 请求转换为 对象数据</span></span><br><span class="line"><span class="keyword">const</span> queryString = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"><span class="comment">// req: request res: response</span></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 编码处理</span></span><br><span class="line">  res.writeHeader(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/plain;charset=utf8&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// post 参数是通过事件的方式接受的</span></span><br><span class="line">  <span class="comment">// data 当请求参数传递的时候触发 data 事件</span></span><br><span class="line">  <span class="comment">// end 当参数传递完成的时候触发 end 事件</span></span><br><span class="line">  <span class="comment">// username=aidou&amp;password=123</span></span><br><span class="line">  <span class="keyword">let</span> postParams = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  req.on(<span class="string">&quot;data&quot;</span>, <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    postParams += params;</span><br><span class="line">  &#125;);</span><br><span class="line">  req.on(<span class="string">&quot;end&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(postParams);</span><br><span class="line">    <span class="keyword">let</span> querystr = queryString.parse(postParams);</span><br><span class="line">    <span class="built_in">console</span>.log(querystr); <span class="comment">// &#123; username: &#x27;aidou&#x27;, password: &#x27;123&#x27; &#125;</span></span><br><span class="line">  &#125;);</span><br><span class="line">  res.end(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">server.listen(<span class="number">3031</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;可以通过 127.0.0.1:3031/ 来访问服务器了····&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h4><blockquote><p>路由是指客户端请求地址与服务器端程序代码的对应关系</p></blockquote><ul><li><p>路由处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> server = http.createServer();</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.writeHeader(<span class="number">200</span>, &#123;</span><br><span class="line">    <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/html;charset=utf8&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 获取请求方式</span></span><br><span class="line">  <span class="keyword">const</span> method = req.method.toLowerCase();</span><br><span class="line">  <span class="built_in">console</span>.log(method); <span class="comment">// GET---  toLowerCase() ---&gt; get</span></span><br><span class="line">  <span class="comment">// 获取请求地址</span></span><br><span class="line">  <span class="keyword">const</span> pathname = url.parse(req.url).pathname;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;pathname: &quot;</span>, pathname); <span class="comment">// pathname:  /index</span></span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">&quot;get&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&quot;/&quot;</span> || pathname == <span class="string">&quot;/index&quot;</span>) &#123;</span><br><span class="line">      res.end(<span class="string">&quot;&lt;h1&gt; return get index home page &lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.end(<span class="string">&quot;&lt;h1&gt;Not Found GET&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (method == <span class="string">&quot;post&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">&quot;/&quot;</span> || pathname == <span class="string">&quot;/index&quot;</span>) &#123;</span><br><span class="line">      res.end(<span class="string">&quot;&lt;h1&gt; return post index home page &lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.end(<span class="string">&quot;&lt;h1&gt;Not Found POST&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">server.listen(<span class="number">3031</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>静态资源访问</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">服务器端不需要处理,可以直接响应给客户端的资源就是静态资源，例如 css javascript image 文件等</span><br></pre></td></tr></table></figure><ul><li><p>获取访问路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 获取 pathname  </span><br><span class="line">url.parse(req.url).pathname</span><br></pre></td></tr></table></figure></li><li><p>获取当前文件的绝对路径</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># path 模块</span><br><span class="line"></span><br><span class="line">path.join(__dirname, <span class="string">&quot;public&quot;</span> + pathname)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p>静态资源读取</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/pathnameDefault.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># app.js</span><br><span class="line">    <span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> server = http.createServer();</span><br><span class="line"></span><br><span class="line">    server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">        <span class="string">&quot;content-type&quot;</span>: <span class="string">&quot;text/html;charset=utf8&quot;</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 响应文件路径</span></span><br><span class="line">      <span class="keyword">let</span> pathname = url.parse(req.url).pathname;  </span><br><span class="line">      </span><br><span class="line">        #   pathname = pathname == &quot;/&quot; ? &quot;/default.html&quot; : pathname; 更新显示判断</span><br><span class="line">        </span><br><span class="line">      <span class="comment">// 绝对路径获取 url</span></span><br><span class="line">      <span class="keyword">let</span> realPath = path.join(__dirname, <span class="string">&quot;public&quot;</span> + pathname);</span><br><span class="line">      fs.readFile(realPath, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (error != <span class="literal">null</span>) &#123;</span><br><span class="line">          res.end(<span class="string">&quot;读取失败···&quot;</span>);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.end(data);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    server.listen(<span class="number">3031</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;ok&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>mime</code>模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install mime</span><br><span class="line">const mime = require(<span class="string">&#x27;mime&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">let</span> <span class="built_in">type</span> = mime.getType(realPath);</span><br><span class="line">res.writeHead(200,&#123;</span><br><span class="line"><span class="string">&#x27;content-type&#x27;</span>: <span class="built_in">type</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="同步API和异步API"><a href="#同步API和异步API" class="headerlink" title="同步API和异步API"></a>同步<code>API</code>和异步<code>API</code></h4><ol><li><p>同步API</p><blockquote><p>只有当前 <code>API</code> 执行完成后,才能继续执行下一个 <code>API</code></p></blockquote></li><li><p> 异步 API</p></li></ol><blockquote><p>当前 API 的执行不会阻塞后续代码的执行</p></blockquote><ol start="3"><li><p>比较</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步 sync</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;before···&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line"> <span class="comment">// 异步 async </span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;last···&quot;</span>);</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;after···&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/async.png" width="400"></li><li><p> 同步 <code>API</code> 和异步<code>API</code>的区别</p></li></ol><blockquote><p>同步 API 可以从返回值中拿到 API 的执行结果,但是异步 API 是不可以的</p><p>同步 API 从上到下依次执行，前面代码会阻塞后面代码的执行。（会等待循环结束后才会执行后面的代码）</p><p>异步 API 不会等待 API 执行完成后再向下执行代码</p></blockquote>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">------------------------------------- <span class="number">1</span> ----------------------------------</span><br><span class="line"><span class="comment">// 同步函数返回值问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n1 + n2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> value = sum(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 异步函数返回值问题</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getMsg</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;异步执行&quot;</span>;</span><br><span class="line">  &#125;, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> msg = getMsg();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;return msg result: &quot;</span>, msg); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">---------------------------------- <span class="number">2</span>: 同步 -------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i); <span class="comment">// 同步会等待循环结束后才会执行后面的代码</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;for 循环后面的代码&#x27;</span>);</span><br><span class="line"></span><br><span class="line">---------------------------------- <span class="number">3</span>: 异步 -------------------------------------</span><br><span class="line">    </span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;code start running···············&quot;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;0.2 start code············&quot;</span>);</span><br><span class="line">&#125;, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;0 start code············&quot;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;code running end·············&quot;</span>);</span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>   <img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/until.png" width="500"><ol start="5"><li><p>回调函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">作用: 可以拿到异步函数的返回值</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> 异步函数通过回调函数获取返回值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    callback(&#123;</span><br><span class="line">      msg: <span class="string">&quot;hello node js&quot;</span>,</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">getData(<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h4><blockquote><p>promise 出现的目的是解决 Node.js 异步编程中回调地狱的问题。</p></blockquote><ul><li><p>promise的基本使用方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 读取文件</span></span><br><span class="line">  fs.readFile(<span class="string">&quot;D.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      reject(error);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      resolve(data.toString());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></li><li><p> 顺序读取文件</p></li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 难以维护 </span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line">fs.readFile(<span class="string">&quot;./A.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">  fs.readFile(<span class="string">&quot;./B.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    fs.readFile(<span class="string">&quot;./C.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data.toString());</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>解决<code>Node.js</code>回调地狱问题</p><details ><summary> Node回调地狱问题 </summary>              <div class='content'>              <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// promise 的基础使用 解决Node.js 的回调地狱</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    fs.readFile(<span class="string">&quot;A.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(data.toString());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    fs.readFile(<span class="string">&quot;B.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(data.toString());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">p3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> (promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 读取文件</span></span><br><span class="line">    fs.readFile(<span class="string">&quot;C.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">error, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        reject(error);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(data.toString());</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p1()</span><br><span class="line">  .then(<span class="function">(<span class="params">r1</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r1);</span><br><span class="line">    <span class="keyword">return</span> p2();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">r2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r2);</span><br><span class="line">    <span class="keyword">return</span> p3();</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">r3</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(r3);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h4 id="异步函数"><a href="#异步函数" class="headerlink" title="异步函数"></a>异步函数</h4><blockquote><p>异步函数就是异步编程语法的终极解决方案,它可以让我们将异步代码写成同步的形式让代码不再有回调函数嵌套，使代码变得清晰明了。</p></blockquote><ul><li><p><code>async</code> 关键字</p><ol><li><p>普通函数定义前加<code>async</code>关键字  普通函数就变成异步函数</p></li><li><p> 异步函数默认返回 <code>promise</code>对象</p></li><li><p> 在异步函数内部使用 <code>return</code> 关键字进行结果返回 结果会被包裹再 <code>promise</code>对象中 return 关键字代替了 <code>resolve()</code></p></li><li><p> 在异步函数内部使用 <code>throw</code> 关键字抛出程序异常</p></li><li><p> 调用异步函数再链式调用 <code>then </code>方法获取异步函数执行结果</p></li><li><p> 调用异步函数再链式调用 <code>catch</code>方法获取异步函数执行的错误信息</p></li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="string">&#x27;throw error infomation&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;return result data&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn()); <span class="comment">//默认输出: Promise &#123; undifined &#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// then方法 catch方法</span></span><br><span class="line">fn()</span><br><span class="line">  .then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data); <span class="comment">// 成功: Promise &#123; &#x27;return result data&#x27; &#125;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error); <span class="comment">//失败: Promise &#123; &lt;rejected&gt; &#x27;throw error infomation&#x27; &#125;</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>await</code>关键字</p><ol><li><code>await</code>关键字<code>只能</code>出现在异步函数中</li><li> <code>await promise await</code>后面只能写<code>promise</code>对象  写其他类型的 <code>API</code> 是不可以的</li><li> <code>await</code>关键字是可以暂停异步函数向下执行 知道 <code>promise</code>返回结果</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;fn1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;fn2&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;fn3&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 顺序执行 异步函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">runFn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> r1 = <span class="keyword">await</span> fn1();</span><br><span class="line">  <span class="keyword">let</span> r2 = <span class="keyword">await</span> fn2();</span><br><span class="line">  <span class="keyword">let</span> r3 = <span class="keyword">await</span> fn3();</span><br><span class="line">  <span class="built_in">console</span>.log(r1, r2, r3);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">runFn();</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用异步函数顺序读取文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> promisify = <span class="built_in">require</span>(<span class="string">&quot;util&quot;</span>).promisify;</span><br><span class="line"><span class="keyword">const</span> readFile = promisify(fs.readFile);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> r1 = <span class="keyword">await</span> readFile(<span class="string">&quot;./A.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> r2 = <span class="keyword">await</span> readFile(<span class="string">&quot;./B.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="keyword">let</span> r3 = <span class="keyword">await</span> readFile(<span class="string">&quot;./C.txt&quot;</span>, <span class="string">&quot;utf8&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(r1, r2, r3);</span><br><span class="line">&#125;</span><br><span class="line">run()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h4><ul><li><p>概念</p><table><thead><tr><th align="center">术语</th><th align="center">解释说明</th></tr></thead><tbody><tr><td align="center"><code>database</code></td><td align="center">数据库<code>mongogdb</code> 数据库软件中可以建立多个数据库</td></tr><tr><td align="center"><code>collection</code></td><td align="center">集合 一组数据的集合 可以理解为 JavaScript 中的数组</td></tr><tr><td align="center"><code>document</code></td><td align="center">文档 一条具体的数据 可以理解为 JavaScript 对象</td></tr><tr><td align="center"><code>field</code></td><td align="center">字段 文档中的属性名 可以理解为 JavaScript中的对象属性</td></tr></tbody></table></li><li><p>第三方包</p><ul><li><p><code>使用 Node.js</code>操作Mongodb数据库需要依赖<code>Node.js</code>第三方包<code>mongoose</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mongoose</span><br></pre></td></tr></table></figure></li><li><p>启动<code>mongodb</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net start mongodb</span><br></pre></td></tr></table></figure></li><li><p>关闭<code>mongodb</code>服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net stop mongodb</span><br></pre></td></tr></table></figure></li><li><p>启动遇到如下错误</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">‘环境变量’  bin/</span><br><span class="line"></span><br><span class="line">发生系统错误 5。</span><br><span class="line"></span><br><span class="line">拒绝访问。</span><br><span class="line"></span><br><span class="line">解决: 使用管理员权限启动 mongodb 服务</span><br><span class="line"></span><br><span class="line"><span class="built_in">chdir</span> 命令: 获取 windows 的路径 == <span class="built_in">pwd</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/adminMon.png" width="600" alt="普通管理员" title="普通管理员"><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/netStartMon.png" width="600" alt="超级管理员" title="超级管理员"></li></ul></li><li><p><code>Nodes</code>连接数据库</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 mongoose  模块</span></span><br><span class="line"><span class="keyword">const</span> mongoose = <span class="built_in">require</span>(<span class="string">&quot;mongoose&quot;</span>);</span><br><span class="line">mongoose</span><br><span class="line">  .connect(<span class="string">&quot;mongodb://localhost/student&quot;</span>, &#123;</span><br><span class="line">    useNewUrlParser: <span class="literal">true</span>,</span><br><span class="line">    useUnifiedTopology: <span class="literal">true</span> </span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;数据库连接成功&quot;</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error, <span class="string">&quot;连接失败&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>创建集合</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">创建集合分为两个步骤:</span><br><span class="line"><span class="number">1.</span> 对集合设定规则</span><br><span class="line">    <span class="number">2.</span> 创建集合</span><br><span class="line">    创建 mongoose.Schema 构造函数的实例即可创建集合</span><br></pre></td></tr></table></figure></li></ul><h4 id="模板引擎"><a href="#模板引擎" class="headerlink" title="模板引擎"></a>模板引擎</h4><ul><li><p>模板引擎</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模板引擎是第三方模块</span><br><span class="line"></span><br><span class="line">让开发者以更加友好的方式拼接字符串,使项目代码更加清晰,更加易于维护。</span><br></pre></td></tr></table></figure></li><li><p>模板引擎下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template</span><br></pre></td></tr></table></figure></li><li><p>模板引擎的使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&#x27;art-template&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> html = template(<span class="string">&#x27;模板路径&#x27;</span>,数据);</span><br></pre></td></tr></table></figure></li><li><p>模板引擎基础使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模板引擎</span></span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;art-template&quot;</span>);</span><br><span class="line"><span class="comment">// 引入系统模块 path</span></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="comment">// 路径拼接</span></span><br><span class="line"><span class="keyword">const</span> views = path.join(__dirname, <span class="string">&quot;views&quot;</span>, <span class="string">&quot;index.art&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> html = template(views, &#123;</span><br><span class="line">  age: <span class="number">10</span>,</span><br><span class="line">  name: <span class="string">&quot;Node&quot;</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(html);</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/arttemplate.png" width="300"></li><li><p>输出,支持运算符</p><ol><li><p>标准语法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; name &#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p> 原始语法</p></li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= name %&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li> 原文解析</li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">app.js:</span><br><span class="line">&#123;</span><br><span class="line">        name: <span class="string">&quot;&lt;h3&gt;Node&lt;/h3&gt;&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">-------------------------------------</span><br><span class="line">&#123;&#123;@ name &#125;&#125; <span class="comment">// 输出: &lt;h3&gt;Node&lt;/h3&gt;</span></span><br><span class="line"> </span><br><span class="line">&lt;%- name %&gt; <span class="comment">// 输出: &lt;h3&gt;Node&lt;/h3&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>条件判断</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="keyword">if</span> age&gt;<span class="number">30</span> &#125;&#125;</span><br><span class="line">年龄过大</span><br><span class="line">&#123;&#123; <span class="keyword">else</span> <span class="keyword">if</span> age&lt;<span class="number">15</span>&#125;&#125;</span><br><span class="line">&#123;&#123; age &#125;&#125;</span><br><span class="line">&#123;&#123;/<span class="keyword">if</span>&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>循环</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; each 数据&#125;&#125;  &#123;&#123;/each&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>子模板</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用子模板可以将网站公共区块(头部、底部)抽离到单独的文件中。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 标准语法: 引入头部</span></span><br><span class="line">&#123;&#123;include <span class="string">&#x27;./commen/header.art&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">// 原始语法: 引入底部</span></span><br><span class="line">&lt;% include(<span class="string">&#x27;./commen/footer.art&#x27;</span>) %&gt;</span><br></pre></td></tr></table></figure></li><li><p>模板继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用模板继承可以将网站 HTML 骨架抽离到单独文件中,其他页面模板可以继承骨架文件。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 留坑</span></span><br><span class="line">&#123;&#123;block <span class="string">&#x27;name&#x27;</span>&#125;&#125; &#123;&#123;/block&#125;&#125;</span><br><span class="line">                   </span><br><span class="line"> <span class="comment">// 继承</span></span><br><span class="line">&#123;&#123;extend <span class="string">&#x27;path/art-template name&#x27;</span>&#125;&#125;</span><br><span class="line"><span class="comment">// 填充</span></span><br><span class="line">&#123;&#123;block <span class="string">&#x27;name&#x27;</span>&#125;&#125;  填充 &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>模板配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 向模板中导入变量 template.defaults.imports.变量名 = 变量值;</span><br><span class="line"><span class="number">2.</span> 设置模板根目录 template.defaults.root = 模板目录;</span><br><span class="line"><span class="number">3.</span> 设置模板默认后缀 template.defaults.extname=<span class="string">&#x27;.art&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>路由模块</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install router</span><br></pre></td></tr></table></figure><ul><li>使用步骤<ol><li>获取路由对象</li><li> 调用路由对象提供的方法创建路由</li><li> 启用路由,使路由生效</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"><span class="comment">// 引入路由模块</span></span><br><span class="line"><span class="keyword">const</span> getRouter = <span class="built_in">require</span>(<span class="string">&quot;router&quot;</span>);</span><br><span class="line"><span class="comment">// 获取路由对象</span></span><br><span class="line"><span class="keyword">const</span> router = getRouter();</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span>  test 路由</span></span><br><span class="line">router.get(<span class="string">&quot;/test&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&quot;/test&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> index 路由</span></span><br><span class="line"> router.get(<span class="string">&quot;/index&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.end(<span class="string">&quot;/index&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 启用路由 必填参数</span></span><br><span class="line">  router(req, res, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;被调用&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="comment">// 启用静态资源 fn 必填参数</span></span><br><span class="line">    serve(req, res, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>第三方模块<code>serve-static</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">功能: 实现讲台资源访问服务</span><br></pre></td></tr></table></figure><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install serve-static</span><br></pre></td></tr></table></figure></li><li><p>使用步骤</p><ol><li>引入 <code>serve-static</code>模块获取创建静态资源服务功能的方法</li><li> 调用方法创建静态资源服务并指定静态资源服务目录</li><li> 启用静态资源服务功能</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"><span class="comment">// 引入静态资源模块</span></span><br><span class="line"><span class="keyword">const</span> serveStatic = <span class="built_in">require</span>(<span class="string">&quot;serve-static&quot;</span>);</span><br><span class="line"><span class="comment">// 实现静态资源访问 参数为静态资源目录</span></span><br><span class="line"><span class="keyword">const</span> serve = serveStatic(path.join(__dirname, <span class="string">&quot;public&quot;</span>));</span><br><span class="line"><span class="comment">/*********************************************/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server.on(<span class="string">&quot;request&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 启用静态资源 fn 必填参数</span></span><br><span class="line">    serve(req, res, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="Express-框架"><a href="#Express-框架" class="headerlink" title="Express 框架"></a>Express 框架</h4><h5 id="express"><a href="#express" class="headerlink" title="express"></a><code>express</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Express 是一个基于 Node 平台的 web 应用开发框架,它提供了一系列强大的特性,帮助你创建各种 web 应用</span><br></pre></td></tr></table></figure><h5 id="Express下载"><a href="#Express下载" class="headerlink" title="Express下载"></a><code>Express</code>下载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><ul><li><p>框架特性</p><ol><li>提供了方便简介的路由定义方式</li><li> 对获取 <code>HTTP </code>请求参数进行了简化处理</li><li> 对模板引擎支持高,方便渲染动态 <code>HTML</code> 页面</li><li> 提供了中间件机制有效控制 <code>HTTP</code> 请求</li><li> 拥有大量第三方中间件对功能进行扩展  </li></ol></li><li><p>使用<code>express</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">// 创建服务 </span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 监听端口</span></span><br><span class="line">app.listen(<span class="number">3031</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><code>send</code>方法<ol><li><code>send</code> 方法内部会检测响应内容的类型</li><li><code>send</code> 方法会自动设置 <code>http</code> 状态码</li><li><code>send </code> 方法会帮我们自动设置响应的内容类型以及编码</li></ol></li></ul></li></ul><h5 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">中间件就是一堆方法,可以接受客户端发来的请求，可以对请求做出响应,也可以将请求继续交给下一个中间件继续处理。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">// 调用 index 走该中间件</span></span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ol><li><p><code>app.use</code>匹配所有的请求方式,可以直接传入请求处理函数，代表接受所有的请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p> <code>app.use</code>第一个参数也可以传入地址，代表不论什么请求方式,只要是这个请求地址就接受这个请求</p></li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.url);</span><br><span class="line">    next();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="中间件的应用"><a href="#中间件的应用" class="headerlink" title="中间件的应用"></a>中间件的应用</h5><ol><li> 路由保护，客户端在访问需要登录的页面时，可以先使用中间件判断用户登录状态,用户如果未登录,直接响应,禁止用户进入需要登录的页面</li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 中间件</span></span><br><span class="line">app.use(<span class="string">&quot;/admin&quot;</span>, <span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 用户没有登录</span></span><br><span class="line">  <span class="keyword">let</span> isLogin = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (isLogin) &#123;</span><br><span class="line">    <span class="comment">// true 就是登录 如果登录继续向下执行</span></span><br><span class="line">    next();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果用户没有登陆.直接对客户端做出响应</span></span><br><span class="line">    res.send(<span class="string">&quot;请登录·········&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  app.get(<span class="string">&quot;/admin&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.end(<span class="string">&quot;你已登陆·····&quot;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="2"><li><p> 网站维护公告,在所有路由的最上面定义接收所有请求的中间件，直接为客户端做出响应，网站正在维护中</p></li><li><p> 自定义<code>404页面</code></p></li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.status(<span class="number">404</span>).send(<span class="string">&quot;当前访问页面不存在&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="错误处理中间件"><a href="#错误处理中间件" class="headerlink" title="错误处理中间件"></a>错误处理中间件</h5><blockquote><p>在程序执行的过程中,不可避免的会出现一些无法预料的错误,比如文件读取失败,数据库连接失败,错误处理中间件是一个集中处理错误的地方</p></blockquote><ul><li><p>基本使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/list&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 抛出异常</span></span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;程序发生了未知错误&quot;</span>);</span><br><span class="line"> <span class="comment">// res.end(&quot;程序正常执行&quot;);</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 错误处理中间件</span></span><br><span class="line">app.use(<span class="function">(<span class="params">err, req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  res.status(<span class="number">500</span>).send(err.message);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> <span class="keyword">catch</span> 可以捕获异步函数以及其他同步代码在执行过程中发生的错误,但是不能其他类型的 API 发生的错误。</span><br></pre></td></tr></table></figure><h5 id="Express-请求处理"><a href="#Express-请求处理" class="headerlink" title="Express 请求处理"></a>Express 请求处理</h5><ul><li><p>构建模块化路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************/</span></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line">index.js:</span><br><span class="line">    <span class="comment">// 创建路由对象</span></span><br><span class="line">    <span class="keyword">const</span> index = express.Router();</span><br><span class="line">    <span class="comment">// 为路由对象匹配请求路径</span></span><br><span class="line">    app.use(<span class="string">&quot;/index&quot;</span>, index);</span><br><span class="line">    <span class="comment">// 创建二级路由</span></span><br><span class="line">    index.get(<span class="string">&quot;/home&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      res.send(<span class="string">&quot;Blog home Index&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">module</span>.exports = index;</span><br><span class="line"><span class="comment">/*******************************/</span></span><br><span class="line">app.js:</span><br><span class="line"><span class="keyword">const</span> index = <span class="built_in">require</span>(<span class="string">&#x27;path/index.js&#x27;</span>);</span><br><span class="line"><span class="comment">// index/home: Blog home Index</span></span><br><span class="line">app.use(<span class="string">&#x27;/home&#x27;</span>,index);</span><br><span class="line"><span class="comment">/*******************************/</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="GET请求参数处理"><a href="#GET请求参数处理" class="headerlink" title="GET请求参数处理"></a>GET请求参数处理</h5><blockquote><p><code>Express</code> 框架中使用 <code>req.query</code>即可获取 <code>GET</code>参数,框架内部会将 <code>GET</code>请求参数转换为对象并返回</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&#x27;/index&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">    res.send(req.url);</span><br><span class="line">  <span class="built_in">console</span>.log(req.query); <span class="comment">// &#123; name: &#x27;zhangsan&#x27;, age: &#x27;10&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="POST-请求参数处理"><a href="#POST-请求参数处理" class="headerlink" title="POST 请求参数处理"></a>POST 请求参数处理</h5><blockquote><p>第三方模块: <code>npm install body-parser</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入第三方模块</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">&quot;/index&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(req.url);</span><br><span class="line">  <span class="built_in">console</span>.log(req.body); <span class="comment">// [Object: null prototype] &#123; username: &#x27;qw&#x27;, pwd: &#x27;sa&#x27; &#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解释</span></span><br><span class="line">app.use(bodyParser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拦截所有请求参数</span></span><br><span class="line">extended: <span class="literal">false</span> 方法内部使用 querystring 模块处理请求参数的格式</span><br><span class="line">extended: <span class="literal">true</span> 方法内部使用第三方模块 qs 处理请求参数的格式</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Express-路由参数"><a href="#Express-路由参数" class="headerlink" title="Express 路由参数"></a>Express 路由参数</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.get(<span class="string">&quot;/index/:id&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(req.params); </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="Express-静态资源处理"><a href="#Express-静态资源处理" class="headerlink" title="Express 静态资源处理"></a>Express 静态资源处理</h5><ul><li><p>静态资源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过 Express 内置的 express.static 可以方便地托管静态文件,例如 img,css,javascript 文件等。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> pathname = path.join(__dirname, <span class="string">&quot;public&quot;</span>);</span><br><span class="line"><span class="comment">// 实现静态资源访问功能</span></span><br><span class="line">app.use(express.static(pathname));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 访问: http://127.0.0.1:3031/[default.html]</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="模板引擎-1"><a href="#模板引擎-1" class="headerlink" title="模板引擎"></a>模板引擎</h5><ol><li><p>模板引擎</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">为了使 <span class="string">`art-template`</span>模板引擎能够更好的和<span class="string">`Express`</span>框架结合,模板引擎官方在原 <span class="string">`art-template`</span> 模板引擎的基础上封装了<span class="string">`express-art-template`</span></span><br></pre></td></tr></table></figure></li><li><p> 下载</p></li></ol>   <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template express-art-template </span><br></pre></td></tr></table></figure><ol start="3"><li> 使用</li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//*********************************</span></span><br><span class="line"><span class="comment">// 模板引擎的使用</span></span><br><span class="line"><span class="comment">//*********************************</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 告诉 express 框架使用什么模板引擎渲染什么后缀的模板文件</span></span><br><span class="line">app.engine(<span class="string">&quot;art&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;express-art-template&quot;</span>));</span><br><span class="line"><span class="comment">// 2. 告诉 express 框架模板存放的位置</span></span><br><span class="line">app.set(<span class="string">&quot;views&quot;</span>, path.join(__dirname, <span class="string">&quot;views&quot;</span>));</span><br><span class="line"><span class="comment">// 3. 告诉 express 框架模板的默认后缀是什么</span></span><br><span class="line">app.set(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;art&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个路由</span></span><br><span class="line">app.get(<span class="string">&quot;/index&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&quot;index&quot;</span>, &#123;</span><br><span class="line">    msg: <span class="string">&quot;message&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(<span class="number">3031</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功··················&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Node-深入补充"><a href="#Node-深入补充" class="headerlink" title="Node 深入补充"></a>Node 深入补充</h3><h4 id="系统模块-1"><a href="#系统模块-1" class="headerlink" title="系统模块"></a>系统模块</h4><h5 id="读取目录树"><a href="#读取目录树" class="headerlink" title="读取目录树"></a>读取目录树</h5><ul><li><p><code>R</code></p><details ><summary> 文件读取 </summary>              <div class='content'>              <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 同步读取文件</span></span><br><span class="line">  <span class="keyword">let</span> dirs = fs.readdirSync(<span class="string">&quot;./&quot;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(dirs); <span class="comment">// 需要捕获异常</span></span><br><span class="line">  </span><br><span class="line">  -------------------------- 改进 ------------------------------------</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//捕获同步执行异常 </span></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 可能出现错误的代码</span></span><br><span class="line">    <span class="keyword">let</span> dirtree = fs.readdirSync(<span class="string">&quot;./&quot;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(dirtree);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="comment">// 错误后执行的代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;执行出错,请仔细阅读错误信息: &quot;</span>, err);</span><br><span class="line">  &#125;</span><br><span class="line">  ------------------------------------------------------------------</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 异步读取</span></span><br><span class="line">  fs.readdir(<span class="string">&quot;./&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 错误的回调函数优先,在回调函数中第一个参数表示错误对象 默认为 null 如果出现错误 err 就是错误对象</span></span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;请重新尝试: &quot;</span>, err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h5 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h5><ul><li><p><code>C</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建文件夹</span></span><br><span class="line">fs.mkdir(<span class="string">&quot;../qf-Node-day02&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件夹创建成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h5 id="更改"><a href="#更改" class="headerlink" title="更改"></a>更改</h5><ul><li><p><code>U</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 更改文件夹</span></span><br><span class="line">fs.rename(<span class="string">&quot;../qf-Node-day03&quot;</span>, <span class="string">&quot;../qf-Node-day02&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;重命名成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><ul><li><p><code>D</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除文件夹 只能删除空文件夹</span></span><br><span class="line">fs.rmdir(<span class="string">&quot;../qf-Node-day02&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件夹删除成功&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="文件读写删除"><a href="#文件读写删除" class="headerlink" title="文件读写删除"></a>文件读写删除</h5><ul><li><p>读写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件写入</span></span><br><span class="line">fs.writeFile(<span class="string">&quot;./writeJs.js&quot;</span>, <span class="string">&quot;// Node JS written successfully&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    fs.readFile(<span class="string">&quot;./writeJs.js&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(data.toString(<span class="string">&#x27;utf8&#x27;</span>));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>删除文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fs.unlink(<span class="string">&quot;./writeJs.js&quot;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;文件已删除&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h5 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h5><ul><li><p><code>url</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">统一资源定位符</span><br></pre></td></tr></table></figure></li><li><p>图解</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/url.png"></li><li><p><code>url.parse</code></p><details ><summary> url.parse </summary>              <div class='content'>              <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&#x27;url&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> urlpath = <span class="string">&#x27;https://www.bilibili.com/video/BV13E411y7G4?p=7&amp;spm_id_from=pageDriver&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> urlparse = url.parse(urlpath);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(urlparse);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Url &#123;</span></span><br><span class="line"><span class="comment">  protocol: &#x27;https:&#x27;,</span></span><br><span class="line"><span class="comment">  slashes: true,</span></span><br><span class="line"><span class="comment">  auth: null,</span></span><br><span class="line"><span class="comment">  host: &#x27;www.bilibili.com&#x27;,    </span></span><br><span class="line"><span class="comment">  port: null,</span></span><br><span class="line"><span class="comment">  hostname: &#x27;www.bilibili.com&#x27;,</span></span><br><span class="line"><span class="comment">  hash: null,</span></span><br><span class="line"><span class="comment">  search: &#x27;?p=7&amp;spm_id_from=pageDriver&#x27;,</span></span><br><span class="line"><span class="comment">  query: &#x27;p=7&amp;spm_id_from=pageDriver&#x27;,</span></span><br><span class="line"><span class="comment">  pathname: &#x27;/video/BV13E411y7G4&#x27;,</span></span><br><span class="line"><span class="comment">  path: &#x27;/video/BV13E411y7G4?p=7&amp;spm_id_from=pageDriver&#x27;,</span></span><br><span class="line"><span class="comment">  href: &#x27;https://www.bilibili.com/video/BV13E411y7G4?p=7&amp;spm_id_from=pageDriver&#x27;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>              </div>            </details><ul><li><p>将对象转换为字符串</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将对象转换为字符串</span></span><br><span class="line"><span class="keyword">let</span> strurl = url.format(urlparse);</span><br><span class="line"><span class="built_in">console</span>.log(strurl); <span class="comment">//  https://www.bilibili.com/video/BV13E411y7G4?p=7&amp;spm_id_from=pageDriver</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获取<code>url</code>参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取对象参数的值</span></span><br><span class="line"><span class="keyword">let</span> params = url.parse(urlpath, <span class="literal">true</span>).query;</span><br><span class="line"><span class="built_in">console</span>.log(params);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>quertstring</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> qs = <span class="built_in">require</span>(<span class="string">&quot;querystring&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基本使用</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;p=7&amp;spm_id_from=pageDriver&quot;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(qs.parse(str)); <span class="comment">// [Object: null prototype] &#123; p: &#x27;7&#x27;, spm_id_from: &#x27;pageDriver&#x27; &#125;</span></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加参数</span></span><br><span class="line"><span class="keyword">let</span> newStr = <span class="string">&quot;p*7#spm_id_from*pageDriver&quot;</span>;</span><br><span class="line"><span class="comment">// * # 为 query 的显示方式,而使用该方式进行解析</span></span><br><span class="line"><span class="keyword">let</span> obj = qs.parse(newStr, <span class="string">&quot;#&quot;</span>, <span class="string">&quot;*&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// [Object: null prototype] &#123; p: &#x27;7&#x27;, spm_id_from: &#x27;pageDriver&#x27; &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>stringfy</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// stringfy</span></span><br><span class="line"><span class="keyword">let</span> jsonS = &#123; <span class="attr">p</span>: <span class="string">&quot;7&quot;</span>, <span class="attr">spm_id_from</span>: <span class="string">&quot;pageDriver&quot;</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> jsonStr = qs.stringify(jsonS);</span><br><span class="line"><span class="built_in">console</span>.log(jsonStr); <span class="comment">// p=7&amp;spm_id_from=pageDriver</span></span><br></pre></td></tr></table></figure></li><li><p><code>nodemailer</code></p><div class="hide-block"><button type="button" class="hide-button button--animated" style="">请勿尝-了解知识    </button><div class="hide-content"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// npm install nodemailer</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> nodemailer = <span class="built_in">require</span>(<span class="string">&quot;nodemailer&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建发送邮件对象</span></span><br><span class="line"><span class="keyword">let</span> transporter = nodemailer.createTransport(&#123;</span><br><span class="line">  host: <span class="string">&quot;smtp.qq.com&quot;</span>, <span class="comment">// 发送方邮箱类型: QQ 网易 ···</span></span><br><span class="line">  port: <span class="number">465</span>,</span><br><span class="line">  secure: <span class="literal">true</span>, <span class="comment">//  true for 465, false for other ports</span></span><br><span class="line">  auth: &#123;</span><br><span class="line">    user: <span class="string">&#x27;xxx@qq.com&#x27;</span>, <span class="comment">// 发送方邮箱地址</span></span><br><span class="line">    pass: <span class="string">&#x27;&#x27;</span>, <span class="comment">// smtp 验证码</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 邮件信息</span></span><br><span class="line"><span class="keyword">let</span> mailobj = &#123;</span><br><span class="line">  <span class="keyword">from</span>: <span class="string">&quot;&lt;xxx@qq.com&gt;&quot;</span>, <span class="comment">// 邮件发送地址</span></span><br><span class="line">  to: <span class="string">&quot;xxx@qq.com&quot;</span>,</span><br><span class="line">  subject: <span class="string">&quot;Node 发送邮箱测试&quot;</span>, <span class="comment">// 标题</span></span><br><span class="line">  text: <span class="string">&quot;发送成功 Node Message&quot;</span>, <span class="comment">// text 和 html 选其一作为发送文本</span></span><br><span class="line">  html: <span class="string">&quot;&lt;h1&gt; 发送成功 Node Message &lt;/h1&gt;&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送邮件</span></span><br><span class="line">transporter.sendMail(mailobj,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></div></div></li></ul><h4 id="Express-路由"><a href="#Express-路由" class="headerlink" title="Express 路由"></a>Express 路由</h4><ul><li><p>路由下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install router</span><br></pre></td></tr></table></figure></li><li><p>拆解路由</p><details ><summary> 路由 </summary>              <div class='content'>              <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">router: /userRouter</span><br><span class="line">userRouter:</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"><span class="comment">// user api </span></span><br><span class="line"> router.get(<span class="string">&#x27;/login&#x27;</span>,<span class="function">(<span class="params">req,res</span>)=&gt;</span>&#123;</span><br><span class="line">                res.send(&#123;</span><br><span class="line">                    code: <span class="number">1</span>,</span><br><span class="line">                    ps: <span class="string">&#x27;login ok&#x27;</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line"> <span class="built_in">module</span>.exports = router;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------------------------------------------    </span><br><span class="line">    </span><br><span class="line">app.js:</span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"><span class="comment">// 引入拆分路由</span></span><br><span class="line"><span class="keyword">const</span> userRouter = <span class="built_in">require</span>(<span class="string">&#x27;./router/userRouter&#x27;</span>);</span><br><span class="line"><span class="comment">// 使用路由</span></span><br><span class="line">app.use(<span class="string">&#x27;/user&#x27;</span>,userRouter);</span><br><span class="line"></span><br><span class="line">解析:</span><br><span class="line">app.use(<span class="string">&#x27;/user&#x27;</span>,userRouter);</span><br><span class="line"></span><br><span class="line">http:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3031</span>/user/【截取: 进入 userRouter 中寻找请求路由地址 eg: /login ]</span><br><span class="line"></span><br><span class="line">所以最终请求地址为: http:<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">3031</span>/user/login</span><br></pre></td></tr></table></figure>              </div>            </details></li></ul><h4 id="模板引擎-2"><a href="#模板引擎-2" class="headerlink" title="模板引擎"></a>模板引擎</h4><h5 id="模板引擎下载"><a href="#模板引擎下载" class="headerlink" title="模板引擎下载"></a>模板引擎下载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install art-template --save </span><br></pre></td></tr></table></figure><h5 id="使用模板引擎"><a href="#使用模板引擎" class="headerlink" title="使用模板引擎"></a>使用模板引擎</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;art-template&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="comment">// 读取 art.html 字符串模板</span></span><br><span class="line">fs.readFile(<span class="string">&quot;./public/art.html&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">console</span>.log(<span class="string">&quot;读取失败&quot;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 渲染模板引擎</span></span><br><span class="line">    <span class="keyword">let</span> templateRes = template.render(data.toString(),&#123;</span><br><span class="line">        name: <span class="string">&quot;李四&quot;</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(templateRes);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="包说明文件"><a href="#包说明文件" class="headerlink" title="包说明文件"></a>包说明文件</h4><ul><li><p><code>package.json</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm init -y</span><br><span class="line"></span><br><span class="line">npm install package-name --save</span><br><span class="line">--save: 可以将包添加到 package.json 中的 dependencies 选项中</span><br><span class="line">注意: 建议每个项目都有 package.json 文件</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="NPM"><a href="#NPM" class="headerlink" title="NPM"></a>NPM</h4><ul><li><p><code>npm</code>官网</p><p><a href="https://www.npmjs.com/">点击前往 npm 官网 </a></p></li><li><p><code>npm</code>命令行管理工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install package-name --save</span><br></pre></td></tr></table></figure></li><li><p><code>npm</code>升级</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global npm</span><br></pre></td></tr></table></figure></li></ul><h4 id="Express"><a href="#Express" class="headerlink" title="Express"></a>Express</h4><h5 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line">app.listen(<span class="string">&#x27;端口号&#x27;</span>,<span class="string">&#x27;回调函数&#x27;</span>);</span><br></pre></td></tr></table></figure><h5 id="静态资源文件路径开放问题"><a href="#静态资源文件路径开放问题" class="headerlink" title="静态资源文件路径开放问题"></a>静态资源文件路径开放问题</h5><ul><li><p><code>express</code>中静态资源路径处理</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 开放静态资源路径 访问方式: 127.0.0.1:3031/public/file-name</span></span><br><span class="line">app.use(<span class="string">&quot;/public&quot;</span>, express.static(<span class="string">&quot;./public/&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当省略第一个参数的时候可以省略 /public 的方式访问 访问方式: 127.0.0.1:3031/file-name</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;./public/&quot;</span>)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 疑惑: path.join() 暂时理解有误 拼接使用错误</span></span><br><span class="line"><span class="keyword">let</span> filepath = path.join(__dirname,<span class="string">&quot;public&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210228132814369.gif" title="express-开放静态资源路径" width="700"></li></ul><h4 id="GET请求参数处理案例"><a href="#GET请求参数处理案例" class="headerlink" title="GET请求参数处理案例"></a>GET请求参数处理案例</h4><ul><li><p><code>app.js</code></p><details ><summary> app.js </summary>              <div class='content'>              <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">&quot;art-template&quot;</span>);</span><br><span class="line"><span class="comment">// 创建 express 服务器</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放静态资源路径 访问方式: 127.0.0.1:3031/public/file-name</span></span><br><span class="line"><span class="comment">// app.use(&quot;/public&quot;, express.static(&quot;./public/&quot;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当省略第一个参数的时候 可以省略 /public 的方式访问</span></span><br><span class="line">app.use(express.static(<span class="string">&quot;./public/&quot;</span>)); <span class="comment">// 127.0.0.1:3031/file-name</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// index router</span></span><br><span class="line">app.get(<span class="string">&quot;/index&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 读取文件</span></span><br><span class="line">  fs.readFile(<span class="string">&quot;public/index.html&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> resoult = template.render(data.toString());</span><br><span class="line">      res.send(resoult);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* ************************************* */</span></span><br><span class="line"><span class="keyword">let</span> comments = [];</span><br><span class="line"><span class="comment">/* ************************************* */</span></span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&quot;/pinglun&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 读取 pinglun.html</span></span><br><span class="line">  fs.readFile(<span class="string">&quot;public/pinglun.html&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 解析 get 参数数据</span></span><br><span class="line">      <span class="keyword">let</span> parserObj = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line">      <span class="keyword">let</span> pathname = parserObj.pathname; <span class="comment">//  /pinglun</span></span><br><span class="line">      <span class="built_in">console</span>.log(pathname);</span><br><span class="line">      <span class="keyword">let</span> comment = parserObj.query; <span class="comment">// ? 后面的数据 &#123; username: &#x27;asd&#x27;, message: &#x27;dsadad&#x27; &#125;</span></span><br><span class="line">      <span class="comment">// 追加到数组中 服务器端这个时候已经把数据存储好了 接下来就是让用户重新请求 / 首页</span></span><br><span class="line">      comments.unshift(comment);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 重定向问题</span></span><br><span class="line">      <span class="comment">// 如何通过服务器让客户端重定向</span></span><br><span class="line">      <span class="comment">// 1. 状态码设置为 302 临时重定向</span></span><br><span class="line">      <span class="comment">// statusCode</span></span><br><span class="line">      <span class="comment">// 2. 在响应头中通过 Location 告诉客户端往哪儿重定向</span></span><br><span class="line">      <span class="comment">// setHeader</span></span><br><span class="line">      <span class="comment">// res.statusCode = 302;</span></span><br><span class="line">      <span class="comment">// res.setHeader(&quot;Location&quot;, &quot;/&quot;);</span></span><br><span class="line">      <span class="comment">// res.send();</span></span><br><span class="line">      <span class="comment">// 模板字符串</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; comments.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> templateP = template.render(data.toString(), &#123;</span><br><span class="line">          username: comments[i][<span class="string">&quot;username&quot;</span>],</span><br><span class="line">          message: comments[i][<span class="string">&quot;message&quot;</span>],</span><br><span class="line">        &#125;);</span><br><span class="line">        res.send(templateP);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口号</span></span><br><span class="line">app.listen(<span class="number">3031</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;服务器启动成功··········&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缺点: 未能对 get 表单参数进行截取 只能读取一条数据</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p>实现效果</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/NodeGetData.gif" width="800" title="GET 表单数据处理"></li><li><p>完善<code>BUG</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">问题原因: 在模板字符串渲染参数给中对第二个参数传递时理解有误</span><br><span class="line"></span><br><span class="line">解决方案；</span><br><span class="line">     <span class="keyword">let</span> templateP = template.render(data.toString(), &#123;</span><br><span class="line">         <span class="comment">// comments --&gt; 参数名称 comments--&gt; 数组 而这个数组包含对象 [&#123;&#125;,···]</span></span><br><span class="line">         comments: comments,</span><br><span class="line">          &#125;);</span><br><span class="line">          res.send(templateP);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 模板字符串</span></span><br><span class="line"> &#123;&#123;each comments&#125;&#125;</span><br><span class="line">          &lt;tr&gt;</span><br><span class="line">            &lt;td&gt;<span class="number">2021</span>-<span class="number">02</span>-<span class="number">28</span>&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$value.username&#125;&#125;&lt;/td&gt;</span><br><span class="line">            &lt;td&gt;&#123;&#123;$value.message&#125;&#125;&lt;/td&gt;</span><br><span class="line">          &lt;/tr&gt;</span><br><span class="line"> &#123;&#123;/each&#125;&#125;</span><br><span class="line">            </span><br><span class="line"><span class="comment">// 缺陷: 未添加重定向</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/fixBug.gif" title="修复第一次由于参数传递错误引起的bug" width="800"> </li></ul><ul><li><p>个人案例源码参考</p><p><a href="https://github.com/lovobin/Bin-HTML5/tree/main/Node/node-day10">  点击前往 查看 </p></li></ul><h4 id="模板引擎-3"><a href="#模板引擎-3" class="headerlink" title="模板引擎"></a>模板引擎</h4><h5 id="下载模板引擎"><a href="#下载模板引擎" class="headerlink" title="下载模板引擎"></a>下载模板引擎</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 一次性下载多个包</span><br><span class="line">npm i art-template express-art-template -S</span><br><span class="line"></span><br><span class="line">// 单独下载</span><br><span class="line">npm install art-template --save</span><br><span class="line">npm install express-art-template --save</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="配置art-template"><a href="#配置art-template" class="headerlink" title="配置art-template"></a>配置<code>art-template</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置使用 art-template art--&gt;: 可以修改为支持语法高亮的后缀文件 比如: html </span></span><br><span class="line">app.engine(<span class="string">&#x27;art&#x27;</span>,<span class="built_in">require</span>(<span class="string">&#x27;express-art-template&#x27;</span>))</span><br><span class="line"></span><br><span class="line">第一个参数: 表示 当渲染以 .art 结尾的文件的时候,使用 art-template 模板引擎</span><br><span class="line"></span><br><span class="line">express-art-template 是专门用来在 Express 中把 art-template 整合到 Express 中</span><br><span class="line"></span><br><span class="line">必须下载 art-template 原因就在于 express-art-template 依赖了 art-template </span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="使用art-template"><a href="#使用art-template" class="headerlink" title="使用art-template"></a>使用<code>art-template</code></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Express 为 Response 响应对象提供了一个方法: render</span><br><span class="line"></span><br><span class="line">render 方法默认是不可以使用的,但是如果配置了模板引擎就可以使用了</span><br><span class="line"></span><br><span class="line"><span class="comment">// html 模板名必须和上面一致的后缀 统一放在 views 目录中 ,views 中有目录就需要根据目录依次书写文件路径 默认 views/</span></span><br><span class="line">res.render(<span class="string">&#x27;html模板名&#x27;</span>,&#123;模板数据&#125;);</span><br><span class="line"></span><br><span class="line">第一个参数不能写路径,默认会去项目中的 views 目录中查找该模板文件</span><br><span class="line"></span><br><span class="line">注意: 在Express中: 开发人员把所有的试图文件都放到 views 目录中</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/expressarttemplate.png" width="800"><h5 id="配置views目录"><a href="#配置views目录" class="headerlink" title="配置views目录"></a>配置<code>views</code>目录</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.set(<span class="string">&#x27;views&#x27;</span>,render函数的默认路径); <span class="comment">// 第一个参数必须是 views </span></span><br></pre></td></tr></table></figure><h4 id="POST-表单数据处理"><a href="#POST-表单数据处理" class="headerlink" title="POST 表单数据处理"></a>POST 表单数据处理</h4><ul><li><p><code>app.js</code></p><details ><summary> app.js </summary>              <div class='content'>              <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入 express 框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="comment">// 创建服务</span></span><br><span class="line"><span class="keyword">const</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置解析 post 表单的中间件</span></span><br><span class="line"><span class="keyword">const</span> bodyparser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line">app.use(bodyparser.urlencoded(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由</span></span><br><span class="line"><span class="keyword">let</span> userRouter = <span class="built_in">require</span>(<span class="string">&quot;./router/userRouter&quot;</span>);</span><br><span class="line">app.use(<span class="string">&quot;/user&quot;</span>, userRouter); <span class="comment">// 127.0.0.1:3031/user/login  通过 user 再进入 userRouter 下寻找对应路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开放静态资源 添加public 的化显示更加直观</span></span><br><span class="line">app.use(<span class="string">&quot;/public/&quot;</span>, express.static(<span class="string">&quot;./public/&quot;</span>));</span><br><span class="line"><span class="comment">// 省略 public 则对 url 显示更加简介简洁</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 express-art-template 模板引擎 app.engine(&#x27;以什么后缀的文件&#x27;,)</span></span><br><span class="line">app.engine(<span class="string">&quot;html&quot;</span>, <span class="built_in">require</span>(<span class="string">&quot;express-art-template&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听端口号</span></span><br><span class="line">app.listen(<span class="number">3031</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Express 服务器启动成功&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>              </div>            </details></li><li><p>路由</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> router = express.Router();</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> comments = [];</span><br><span class="line"></span><br><span class="line">router.get(<span class="string">&quot;/index&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&quot;index.html&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.post(<span class="string">&quot;/pinglun&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 通过 req.body 获取post 表单请求数据</span></span><br><span class="line">  <span class="keyword">let</span> comment = req.body;</span><br><span class="line">  comments.unshift(comment);</span><br><span class="line">  res.render(<span class="string">&quot;pinglun.html&quot;</span>, &#123; <span class="attr">comments</span>: comments &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">module</span>.exports = router;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>字符串转换为对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 文件中读取的数据一定是字符串</span></span><br><span class="line"><span class="comment">// 需要手动转换为 对象</span></span><br><span class="line"><span class="built_in">JSON</span>.parse(data).对象名</span><br></pre></td></tr></table></figure></li></ul><h4 id="设计路由"><a href="#设计路由" class="headerlink" title="设计路由"></a>设计路由</h4><table><thead><tr><th align="center">请求方法</th><th align="center">请求路径</th><th align="center">get参数</th><th align="center">post 参数</th><th align="center">备注</th></tr></thead><tbody><tr><td align="center"><code>GET</code></td><td align="center"><code>/students</code></td><td align="center"></td><td align="center"></td><td align="center">渲染首页</td></tr><tr><td align="center"><code>GET</code></td><td align="center"><code>/students/new</code></td><td align="center"></td><td align="center"></td><td align="center">渲染添加学生页</td></tr><tr><td align="center"><code>POST</code></td><td align="center"><code>/students/new</code></td><td align="center"></td><td align="center"><code>name，age，gender，hobbies</code></td><td align="center">处理添加学生请求</td></tr><tr><td align="center"><code>GET</code></td><td align="center"><code>/students/edit</code></td><td align="center"><code>id</code></td><td align="center"></td><td align="center">渲染编辑页面</td></tr><tr><td align="center"><code>POST</code></td><td align="center"><code>/students/edit</code></td><td align="center"></td><td align="center"><code>id，name，age，gender，hobbies</code></td><td align="center">处理编辑请求</td></tr><tr><td align="center"><code>GET</code></td><td align="center"><code>/students/delete</code></td><td align="center"><code>id</code></td><td align="center"></td><td align="center">处理删除请求</td></tr></tbody></table><div class="tabs" id="router"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#router-1">` 127.0.0.1:3031/students`首页</button></li><li class="tab"><button type="button" data-href="#router-2">`http://127.0.0.1:3031/students/new`用于学生信息添加</button></li><li class="tab"><button type="button" data-href="#router-3">异步函数save封装</button></li><li class="tab"><button type="button" data-href="#router-4">处理信息添加</button></li><li class="tab"><button type="button" data-href="#router-5">编辑路由</button></li><li class="tab"><button type="button" data-href="#router-6">删除</button></li><li class="tab"><button type="button" data-href="#router-7">资源文件获取</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="router-1"><ul><li><p>效果展示</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/routerStudents.png" width="600"></li><li><p>路由规则</p><details ><summary> 路由规则 </summary>            <div class='content'>            <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 二级路由</span></span><br><span class="line"></span><br><span class="line">-------------------- 封装独立模块 stident --------------------</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.find = <span class="function">(<span class="params">callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果要获取一个函数中异步操作的结果 则必须通过回调函数来获取</span></span><br><span class="line">  fs.readFile(dbpath,<span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">JSON</span>.parse(data).students);</span><br><span class="line">      <span class="comment">// callback 中的参数: 第一个是: 错误对象 第二个是: 数据</span></span><br><span class="line">      callback(<span class="literal">null</span>, <span class="built_in">JSON</span>.parse(data).students);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-------------------------------------------</span><br><span class="line">    </span><br><span class="line">studentsRouter:</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染首页</span></span><br><span class="line">    router.get(<span class="string">&quot;/&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 使用封装函数 find()</span></span><br><span class="line">      Student.find(<span class="function">(<span class="params">err, students</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">&quot;文件读取失败&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          res.render(<span class="string">&quot;index.html&quot;</span>, &#123;</span><br><span class="line">            students: students,</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>            </div>          </details><p>模板字符串</p><details ><summary> 模板字符串 </summary>            <div class='content'>            <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">     &lt;!-- 超链接 a 进行页面跳转 href=[<span class="regexp">/students/</span><span class="keyword">new</span>]  实现第二个路由 --&gt;</span><br><span class="line">     &lt;p&gt;</span><br><span class="line">       &lt;a href=<span class="string">&quot;/students/new&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-info&quot;</span>&gt;添加学生&lt;/a&gt;</span><br><span class="line">     &lt;/p&gt;</span><br><span class="line">  </span><br><span class="line">     &lt;table <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;table table-bordered&quot;</span>&gt;</span><br><span class="line">       &lt;thead&gt;</span><br><span class="line">         &lt;th&gt;ID&lt;/th&gt;</span><br><span class="line">         &lt;th&gt;姓名&lt;/th&gt;</span><br><span class="line">         &lt;th&gt;年龄&lt;/th&gt;</span><br><span class="line">         &lt;th&gt;性别&lt;/th&gt;</span><br><span class="line">         &lt;th&gt;爱好&lt;/th&gt;</span><br><span class="line">       &lt;/thead&gt;</span><br><span class="line">       &lt;tbody&gt;</span><br><span class="line">         &#123;&#123;each students&#125;&#125;</span><br><span class="line">         &lt;tr&gt;</span><br><span class="line">           &lt;td&gt;&#123;&#123; $value.id &#125;&#125;&lt;/td&gt;</span><br><span class="line">           &lt;td&gt;&#123;&#123; $value.name &#125;&#125;&lt;/td&gt;</span><br><span class="line">           &lt;td&gt;&#123;&#123; $value.gender &#125;&#125;&lt;/td&gt;</span><br><span class="line">           &lt;td&gt;&#123;&#123; $value.age &#125;&#125;&lt;/td&gt;</span><br><span class="line">           &lt;td&gt;&#123;&#123; $value.hobbies &#125;&#125;&lt;/td&gt;</span><br><span class="line">         &lt;/tr&gt;</span><br><span class="line">         &#123;&#123;/each&#125;&#125;</span><br><span class="line">       &lt;/tbody&gt;</span><br><span class="line">     &lt;/table&gt;</span><br><span class="line">   &lt;/div&gt;</span><br></pre></td></tr></table></figure>            </div>          </details></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="router-2"><ul><li><p>渲染效果</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/addstudent.png"></li><li><p>路由规则</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加按钮点击跳转: get: 127.0.0.1:3031/students/new 渲染添加学生页</span></span><br><span class="line">router.get(<span class="string">&quot;/new&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.render(<span class="string">&quot;new.html&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>模板字符串</p><details ><summary> new-模板字符串 </summary>          <div class='content'>          <div class="container">      <h2 class="sub-header">添加学生信息</h2>      <!-- 第三个路由参数处理： post: /students/new -->      <form action="/students/new" method="post">        <div class="form-group">          <label for="exampleInputEmail"> 姓名 </label>          <input            type="text"            class="form-control"            id="exampleInputEmail"            name="name"          />        </div><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">      &lt;label <span class="keyword">for</span>=<span class="string">&quot;&quot;</span>&gt; 性别 &lt;/label&gt;</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span><br><span class="line">          &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> id=<span class="string">&quot;inlineRadio1&quot;</span> value=<span class="string">&quot;0&quot;</span> /&gt;男</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">        &lt;label <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;radio-inline&quot;</span>&gt;</span><br><span class="line">          &lt;input type=<span class="string">&quot;radio&quot;</span> name=<span class="string">&quot;gender&quot;</span> id=<span class="string">&quot;inlineRadio2&quot;</span> value=<span class="string">&quot;1&quot;</span> /&gt;女</span><br><span class="line">        &lt;/label&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-group&quot;</span>&gt;</span><br><span class="line">      &lt;label <span class="keyword">for</span>=<span class="string">&quot;age&quot;</span>&gt;年龄&lt;/label&gt;</span><br><span class="line">      &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> type=<span class="string">&quot;number&quot;</span> id=<span class="string">&quot;age&quot;</span> name=<span class="string">&quot;age&quot;</span> /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;checkout&quot;</span>&gt;</span><br><span class="line">      &lt;label&gt; 爱好 &lt;/label&gt;</span><br><span class="line">      &lt;input <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;form-control&quot;</span> type=<span class="string">&quot;text&quot;</span> name=<span class="string">&quot;hobbies&quot;</span> /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn&quot;</span>&gt;</span><br><span class="line">      &lt;button type=<span class="string">&quot;submit&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-info&quot;</span>&gt; 添加学员信息 &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/form&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>          </div>        </details></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="router-3"><details ><summary> 异步函数 </summary>              <div class='content'>              <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.save = <span class="function">(<span class="params">student, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(dbpath, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> students = <span class="built_in">JSON</span>.parse(data).students;</span><br><span class="line">      <span class="comment">// 处理 id: 获取数组的最后一个 再加 1</span></span><br><span class="line">      student.id = students[students.length - <span class="number">1</span>].id + <span class="number">1</span>;</span><br><span class="line">      <span class="comment">// 添加数据</span></span><br><span class="line">      students.push(student);</span><br><span class="line">      <span class="comment">// 把对象数据转换为字符串</span></span><br><span class="line">      <span class="keyword">let</span> result = <span class="built_in">JSON</span>.stringify(&#123; <span class="attr">students</span>: students &#125;);</span><br><span class="line">      <span class="comment">// 把字符串保存到文件中</span></span><br><span class="line">      fs.writeFile(dbpath, result, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 错误 就返回错误对象</span></span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 成功就不报错 返回空对象</span></span><br><span class="line">          callback(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>              </div>            </details><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="router-4"><ul><li><p>效果预览 </p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210303154910327.gif"></li><li><p>路由规则</p><details ><summary> `post:127.0.0.1:3031/students/new` </summary>          <div class='content'>          <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理添加学生请求 post: 127.0.0.1:3031/students/new</span></span><br><span class="line">router.post(<span class="string">&quot;/new&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 获取表单数据 post: body-parser</span></span><br><span class="line">  <span class="keyword">let</span> formdata = req.body;</span><br><span class="line">  <span class="comment">// 2, 处理  将数据保存到 db.json 文件中</span></span><br><span class="line">  <span class="comment">// 预处理: 由于文件都是字符串非对象 所以只能先行读取 在追加 追加结束后再对文件进行写入操作</span></span><br><span class="line">  <span class="comment">// 具体操作: 1. 先读取出来 转成对象 2. 然后往对象中 push 数据 3. 然后把对象转换为 字符串 然后把字符串再次写入文件</span></span><br><span class="line">  <span class="comment">// 3. 发送响应 res.body</span></span><br><span class="line">  Student.save(formdata, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">&quot;&#123;&#x27;error&#x27;: &#x27;not found&#x27;&#125;&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.redirect(<span class="string">&quot;/students&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>          </div>        </details></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="router-5"><ul><li><p>路由规则逻辑</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 处理删除请求</span></span><br><span class="line">router.get(<span class="string">&quot;/delete&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 1. 获取要删除的 id</span></span><br><span class="line">  <span class="comment">// 2. 根据 id 执行删除操作</span></span><br><span class="line">  <span class="comment">// 3. 根据操作结果发送响应数据</span></span><br><span class="line">  Student.deleteById(req.query.id, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> res.status(<span class="number">500</span>).send(<span class="string">&quot;Server error&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      res.redirect(<span class="string">&#x27;/students&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>异步函数</p><details ><summary> edit-异步函数 </summary>          <div class='content'>          <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.updateById = <span class="function">(<span class="params">student, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 如果要获取一个函数中异步操作的结果 则必须通过回调函数来获取</span></span><br><span class="line">  fs.readFile(dbpath, <span class="string">&quot;utf8&quot;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// find: 需要接受一个函数作为参数 作用: 当某个遍历项符合 item.id===student.id 条件的时候 find 会终止遍历 同时返回遍历结果</span></span><br><span class="line">      <span class="keyword">let</span> students = <span class="built_in">JSON</span>.parse(data).students;</span><br><span class="line"></span><br><span class="line">      student.id = <span class="built_in">parseInt</span>(student.id);</span><br><span class="line">      <span class="keyword">var</span> stu = students.find(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 用户传入 id</span></span><br><span class="line">        <span class="keyword">return</span> item.id === student.id</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 修改数据</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> student) &#123;</span><br><span class="line">        stu[key] = student[key];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 把对象转换为字符串</span></span><br><span class="line">      <span class="keyword">let</span> fileDate = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        students: students</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 把字符串保存到文件中</span></span><br><span class="line">      fs.writeFile(dbpath, fileDate, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 错误就是把错误对象传递给它</span></span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 成功就没错 所以错误对象就是 null</span></span><br><span class="line">          <span class="keyword">return</span> callback(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>          </div>        </details></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="router-6"><ul><li><p>删除异步函数</p><details ><summary> delete-异步函数 </summary>          <div class='content'>          <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.deleteById = <span class="function">(<span class="params">id, callback</span>) =&gt;</span> &#123;</span><br><span class="line">  fs.readFile(dbpath, <span class="string">&#x27;utf8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">return</span> callback(err);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> students = <span class="built_in">JSON</span>.parse(data).students;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// findIndex 方法专门用来根据条件查找元素的下标</span></span><br><span class="line">      <span class="keyword">let</span> deleteId = students.findIndex(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> item.id === <span class="built_in">parseInt</span>(id);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 根据下标从数组中删除对应的学生对象</span></span><br><span class="line">      students.splice(deleteId, <span class="number">1</span>);</span><br><span class="line">      <span class="comment">// 删除数据后进行重写</span></span><br><span class="line">      <span class="keyword">let</span> fileData = <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        students: students</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="comment">// 把字符串保存到文件中</span></span><br><span class="line">      fs.writeFile(dbpath, fileData, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">          <span class="comment">// 错误就是把错误对象传递给它</span></span><br><span class="line">          <span class="keyword">return</span> callback(err);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 成功就是没错 所以把错误对象就是 null</span></span><br><span class="line">          callback(<span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>          </div>        </details></li></ul><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="router-7"><p>  <a href=""></a></p>  <img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://img-blog.csdnimg.cn/20210315002450372.gif" title="Node-增删改查"><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Node基础&quot;&gt;&lt;a href=&quot;#Node基础&quot; class=&quot;headerlink&quot; title=&quot;Node基础&quot;&gt;&lt;/a&gt;Node基础&lt;/h3&gt;&lt;h4 id=&quot;命令行基础&quot;&gt;&lt;a href=&quot;#命令行基础&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    <category term="Node" scheme="https://lovobin.github.io/categories/Node/"/>
    
    
    <category term="Javascript" scheme="https://lovobin.github.io/tags/Javascript/"/>
    
    <category term="Node" scheme="https://lovobin.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-对象</title>
    <link href="https://lovobin.github.io/2021/02/02/Javascript-%E5%AF%B9%E8%B1%A1/"/>
    <id>https://lovobin.github.io/2021/02/02/Javascript-%E5%AF%B9%E8%B1%A1/</id>
    <published>2021-02-02T16:30:42.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Javascript-对象"><a href="#Javascript-对象" class="headerlink" title="Javascript-对象"></a>Javascript-对象</h3><ul><li><p>对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象属于一种复合的数据类型,在对象中可以保存多个不同数据类型的属性</span><br></pre></td></tr></table></figure></li><li><p>对象的分类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">对象的分类：</span><br><span class="line">   - 由 ES 标准中定义的对象, 在任何的 ES 的实现中都可以使用</span><br><span class="line">   - 比如: <span class="built_in">Math</span> <span class="built_in">String</span> <span class="built_in">Number</span> <span class="built_in">Boolean</span> <span class="built_in">Function</span> <span class="built_in">Object</span>····</span><br><span class="line">宿主对象:</span><br><span class="line">    - 由 JS 的运行环境提供的对象,目前来讲主要指由浏览器提供的对象</span><br><span class="line">    - 比如: DOM BOM</span><br><span class="line"> 自定义对象:</span><br><span class="line">- 由开发人员自己创建的对象</span><br></pre></td></tr></table></figure></li><li><p>创建对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用 <span class="keyword">new</span> 关键字调用函数是构造函数 <span class="title">constructor</span> 构造函数是专门用来创建对象的函数</span><br><span class="line"></span><br><span class="line">// 创建对象</span><br><span class="line"> <span class="title">var</span> <span class="title">obj</span> = <span class="title">new</span> <span class="title">Object</span>(<span class="params"></span>);</span><br></pre></td></tr></table></figure></li><li><p>对象的基本操作</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向对象中添加属性</span></span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line"></span><br><span class="line">对象.属性名 = 属性值;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取对象的值</span></span><br><span class="line">对象.属性名</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改属性值</span></span><br><span class="line">对象.属性名 = 新值;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除对象的属性</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> 对象.属性名</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>字面量定义</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> objs = &#123;</span><br><span class="line">          name: <span class="string">&#x27;name-value&#x27;</span>,</span><br><span class="line">          age: <span class="number">10</span>,</span><br><span class="line">          add: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              alert(<span class="number">1</span>)</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="工厂创建对象"><a href="#工厂创建对象" class="headerlink" title="工厂创建对象"></a>工厂创建对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createDog</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">    obj.name = name;</span><br><span class="line">    obj.age = age;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> dog1 = createDog(<span class="string">&#x27;xiaohuang&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(dog1);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">构造函数就是一个普通的函数m创建方式和普通函数没有区别</span><br><span class="line"></span><br><span class="line">不同的是构造函数习惯上首字母大写</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> per = <span class="keyword">new</span> Persopn();</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>构造函数的执行过程<ol><li> 立刻创建一个新的对象</li><li> 将创建的对象设置为函数中 this</li><li> 逐行执行函数中的代码</li><li> 将新建的对象作为返回值返回</li></ol></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, gender</span>) </span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.name = name;</span><br><span class="line">          <span class="built_in">this</span>.age = age;</span><br><span class="line">          <span class="built_in">this</span>.gender = gender;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;this: &#x27;</span>, <span class="built_in">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">var</span> per = <span class="keyword">new</span> Person(<span class="string">&#x27;name&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;gender&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(per);</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/this.png"><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">使用 <span class="keyword">instanceof</span> 可以检查对象是否是一个类的实例</span><br><span class="line"></span><br><span class="line">语法:</span><br><span class="line"></span><br><span class="line">对象 <span class="keyword">instanceof</span> 构造函数</span><br><span class="line"><span class="built_in">console</span>.log(per <span class="keyword">instanceof</span> Person) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">使用同一个构造函数的创建的对象,我们称为一类对象,也将一个构造函数称为一个类 通过一个构造函数创建的对象m称为该类的实例</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="this-的情况"><a href="#this-的情况" class="headerlink" title="this 的情况"></a>this 的情况</h3><ol><li>当以函数的形式调用时，<code>this</code> 就是<code>window</code></li><li> 当以方法形式调用时m谁调用方法 <code>this</code>就是谁</li><li> 当以构造函数的形式调用时，<code>this</code>就是新创建的那个对象</li></ol><h3 id="原型对象"><a href="#原型对象" class="headerlink" title="原型对象"></a>原型对象</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">我们创建的每一个函数，解析器都会向函数中添加一个属性 prototype </span><br><span class="line"></span><br><span class="line">这个属性对应着一个对象，这个对象就是我们所谓的原型对象</span><br><span class="line"></span><br><span class="line">如果函数作为普通函数调用 prototype 没有任何作用</span><br><span class="line"></span><br><span class="line">当函数以构造函数的形式调用时,我们可以通过 __proto__ 来访问该属性</span><br><span class="line"></span><br><span class="line">原型对象就相当于一个公共区域m所有同一个类的实例都可以访问到这个原型对象，我们就可以将对象中共有的内容,统一设置到原型对象中</span><br><span class="line"></span><br><span class="line">当我们访问对象的一个属性或方法时,它会现在对象自身中寻找，如果有则直接使用，如果没有则会去原型对象中寻找,如果找到则直接使用。</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Javascript-对象&quot;&gt;&lt;a href=&quot;#Javascript-对象&quot; class=&quot;headerlink&quot; title=&quot;Javascript-对象&quot;&gt;&lt;/a&gt;Javascript-对象&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象&lt;/p&gt;
&lt;figure cl</summary>
      
    
    
    
    <category term="javascript" scheme="https://lovobin.github.io/categories/javascript/"/>
    
    
    <category term="javascript" scheme="https://lovobin.github.io/tags/javascript/"/>
    
    <category term="对象" scheme="https://lovobin.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Canvas使用</title>
    <link href="https://lovobin.github.io/2021/02/02/Canvas%E4%BD%BF%E7%94%A8/"/>
    <id>https://lovobin.github.io/2021/02/02/Canvas%E4%BD%BF%E7%94%A8/</id>
    <published>2021-02-02T11:46:33.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Canvas"><a href="#Canvas" class="headerlink" title="Canvas"></a>Canvas</h3><h4 id="Canvas-的简介"><a href="#Canvas-的简介" class="headerlink" title="Canvas 的简介"></a>Canvas 的简介</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">是HTML5提供的一种新标签, ie9才开始支持的，Canvas是一个矩形区域的画布，可以用 JS 控制每一个像素在上面绘画。</span><br><span class="line">canvas 标签使用 JavaScript 在网页上绘制图像，本身不具备绘图功能。canvas 拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。</span><br></pre></td></tr></table></figure><h4 id="Canvas-的基础使用"><a href="#Canvas-的基础使用" class="headerlink" title="Canvas 的基础使用"></a>Canvas 的基础使用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">&quot;tutorial&quot;</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span> <span class="attr">height</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">    当前的浏览器版本不支持,请升级浏览起器</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 获取画布</span></span><br><span class="line">      <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>);</span><br><span class="line">      <span class="comment">// 获取上下文,上下文有两个 2d 的上下文和 3d 的上下文</span></span><br><span class="line">      <span class="comment">// 所有的图像绘制都是通过 ctx 属性或者 是方法进行设置的，和 canvas 标签没有关系</span></span><br><span class="line">      <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">      <span class="comment">// 设置颜色</span></span><br><span class="line">      ctx.fillStyle = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">      <span class="comment">// 绘制正方形 x y width height</span></span><br><span class="line">      ctx.fillRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>); </span><br></pre></td></tr></table></figure><h4 id="Canvas-像素化"><a href="#Canvas-像素化" class="headerlink" title="Canvas 像素化"></a>Canvas 像素化</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">我们使用 canvas 绘制了一个图形,一旦绘制成功了,canvas 就像素化了它们。</span><br></pre></td></tr></table></figure><h4 id="Canvas-的动画思想"><a href="#Canvas-的动画思想" class="headerlink" title="Canvas 的动画思想"></a>Canvas 的动画思想</h4><ul><li><p>效果演示</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/canvas-move.gif" width="600"></li><li><p>实例源码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取画布</span></span><br><span class="line">       <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;tutorial&#x27;</span>);</span><br><span class="line">       <span class="comment">// 获取上下文,上下文有两个 2d 的上下文和 3d 的上下文</span></span><br><span class="line">       <span class="comment">// 所有的图像绘制都是通过 ctx 属性或者 是方法进行设置的，和 canvas 标签没有关系</span></span><br><span class="line">       <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">       <span class="comment">// 设置颜色</span></span><br><span class="line">       ctx.fillStyle = <span class="string">&quot;green&quot;</span>;</span><br><span class="line">       <span class="comment">// 绘制正方形</span></span><br><span class="line">       <span class="comment">// ctx.fillRect(100, 100, 100, 100);</span></span><br><span class="line">       <span class="comment">// 信号量</span></span><br><span class="line">       <span class="keyword">var</span> left = <span class="number">100</span>;</span><br><span class="line">       <span class="comment">// 动画过程</span></span><br><span class="line">       <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="comment">// 清除画布 0,0 代表从什么位置开始清除 600 600 代表清除的宽度和高度</span></span><br><span class="line">           ctx.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">600</span>, <span class="number">600</span>);</span><br><span class="line">           <span class="comment">// 更新信号量</span></span><br><span class="line">           left++;</span><br><span class="line">           <span class="comment">// 重新绘制</span></span><br><span class="line">           ctx.fillRect(left, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>)</span><br><span class="line">       &#125;, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul><h4 id="Canvas-填充和绘制"><a href="#Canvas-填充和绘制" class="headerlink" title="Canvas 填充和绘制"></a>Canvas 填充和绘制</h4><ul><li><p>效果演示</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/canvas.png"></li><li><p>填充</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ctx.fillStyle = <span class="string">&#x27;color-value&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ctx.fillRect(x,y,width,height);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>绘制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ctx.strokeStyle = <span class="string">&#x27;color-value&#x27;</span>;</span><br><span class="line"></span><br><span class="line">ctx.strokeRect(x,y,width,hieght);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>清除画布内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.clearRect(x,y,canvas-width,canvas-height);</span><br></pre></td></tr></table></figure></li><li><p>具体实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">       &lt;button id=<span class="string">&quot;btn1&quot;</span>&gt; 填充矩形 &lt;/button&gt;</span><br><span class="line">       &lt;button id=<span class="string">&quot;btn2&quot;</span>&gt; 绘制矩形边框 &lt;/button&gt;</span><br><span class="line">&lt;button id=<span class="string">&quot;btn3&quot;</span>&gt; 清除 canvas 画布内容 &lt;/button&gt;</span><br><span class="line">   &lt;/div&gt;</span><br><span class="line">   &lt;canvas id=<span class="string">&quot;mycanvas&quot;</span> width=<span class="string">&quot;600&quot;</span> height=<span class="string">&quot;600&quot;</span>&gt;</span><br><span class="line">       当前浏览器不支持 canvas,请升级浏览器后再浏览</span><br><span class="line">   &lt;/canvas&gt;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;mycanvas&#x27;</span>);</span><br><span class="line">      <span class="comment">// 获取 btn </span></span><br><span class="line">      <span class="keyword">var</span> btn1 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn1&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> btn2 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn2&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> btn3 = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn3&#x27;</span>);</span><br><span class="line">  </span><br><span class="line">      <span class="comment">// 获取上下文</span></span><br><span class="line">      <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">      btn1.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 设置填充颜色</span></span><br><span class="line">          ctx.fillStyle = <span class="string">&#x27;purple&#x27;</span>;</span><br><span class="line">          <span class="comment">// 设置填充</span></span><br><span class="line">          ctx.fillRect(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      btn2.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 绘制边框颜色</span></span><br><span class="line">          ctx.strokeStyle = <span class="string">&#x27;purple&#x27;</span>;</span><br><span class="line">          <span class="comment">// 绘制正方形</span></span><br><span class="line">          ctx.strokeRect(<span class="number">300</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">50</span>);</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      btn3.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="comment">// 清除画布内容</span></span><br><span class="line">              ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvas.width,canvas.height);</span><br><span class="line">          &#125;</span><br><span class="line">  </span><br><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h4 id="Canvas-绘制路径"><a href="#Canvas-绘制路径" class="headerlink" title="Canvas 绘制路径"></a>Canvas 绘制路径</h4><ul><li><p>作用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">绘制路径作用是为了设置一个不规则的多边形状态</span><br></pre></td></tr></table></figure></li><li><p>步骤</p><ol><li>设置路径的起点</li><li> 使用绘制命令画出路径</li><li> 封闭路径</li><li> 填充或者绘制已经封闭路径的状态</li></ol><ul><li><p>实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;mycanvas&#x27;</span>);</span><br><span class="line">      <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">      <span class="comment">// 创建一个路径</span></span><br><span class="line">      ctx.beginPath();</span><br><span class="line">      <span class="comment">// 移动绘制点</span></span><br><span class="line">      ctx.moveTo(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">      <span class="comment">// 描述行进路径</span></span><br><span class="line">      ctx.lineTo(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">      ctx.lineTo(<span class="number">400</span>, <span class="number">180</span>);</span><br><span class="line">      ctx.lineTo(<span class="number">380</span>, <span class="number">50</span>);</span><br><span class="line">      <span class="comment">// 封闭路径</span></span><br><span class="line">      ctx.closePath();</span><br><span class="line">      <span class="comment">// 绘制不规则的图形</span></span><br><span class="line">      ctx.strokeStyle = <span class="string">&#x27;blue&#x27;</span>;</span><br><span class="line">      <span class="comment">// 没有 Rect 代表绘制 --&gt; 描边</span></span><br><span class="line">      ctx.stroke();  <span class="comment">// 通过线条来绘制图形轮廓</span></span><br><span class="line">    </span><br><span class="line"> <span class="comment">// 填充</span></span><br><span class="line">      ctx.fillStyle = <span class="string">&#x27;pink&#x27;</span>;</span><br><span class="line">      ctx.fill(); <span class="comment">// 通过填充路径的内容区域生成实心的图形</span></span><br><span class="line">    </span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/moveline.png" width="600"></li></ul></li></ul><h4 id="圆弧绘制"><a href="#圆弧绘制" class="headerlink" title="圆弧绘制"></a>圆弧绘制</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;mycanvas&#x27;</span>);</span><br><span class="line">     <span class="keyword">var</span> ctx = canvas.getContext(<span class="string">&#x27;2d&#x27;</span>);</span><br><span class="line">     <span class="comment">// 创建一个路径</span></span><br><span class="line">     ctx.beginPath();</span><br><span class="line">     <span class="comment">// ctx.arc(x,y,r,start,end,boolean(direction) )</span></span><br><span class="line">     ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)</span><br><span class="line">     ctx.stroke();</span><br></pre></td></tr></table></figure><ul><li><p>参数解释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 圆</span></span><br><span class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 圆</span></span><br><span class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">8</span> [大于 <span class="number">7</span> 都是圆], <span class="literal">false</span>)</span><br><span class="line"><span class="comment">// 圆</span></span><br><span class="line">ctx.arc(<span class="number">100</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">0</span>, <span class="number">2</span> * <span class="built_in">Math</span>.PI, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><ol><li> 100  <code>canvas内坐标起始点</code></li><li> 50  圆的半径</li><li> 0 绘制起点</li><li> <code>2*Math.PI</code>  圆圈弧度</li><li><code>true</code> 逆时针</li></ol></li><li><p>效果图</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/circleCanvas.png"></li></ul><blockquote><p>0,1指的是开始和结束的位置,单位如果是数字,则代表一个圆弧的弧度(一个圆的弧度是<code>Math.PI * 2</code> ,约等于 7 个弧度) 所以如果为两个参数的差为 7 ，并且是 顺时针方向,则代表绘制一个圆</p></blockquote><h4 id="Canvas-小案例"><a href="#Canvas-小案例" class="headerlink" title="Canvas 小案例"></a>Canvas 小案例</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Canvas&quot;&gt;&lt;a href=&quot;#Canvas&quot; class=&quot;headerlink&quot; title=&quot;Canvas&quot;&gt;&lt;/a&gt;Canvas&lt;/h3&gt;&lt;h4 id=&quot;Canvas-的简介&quot;&gt;&lt;a href=&quot;#Canvas-的简介&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Canvas" scheme="https://lovobin.github.io/categories/Canvas/"/>
    
    
    <category term="html" scheme="https://lovobin.github.io/tags/html/"/>
    
    <category term="canvas" scheme="https://lovobin.github.io/tags/canvas/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-练习</title>
    <link href="https://lovobin.github.io/2021/01/29/Javascript-%E7%BB%83%E4%B9%A0/"/>
    <id>https://lovobin.github.io/2021/01/29/Javascript-%E7%BB%83%E4%B9%A0/</id>
    <published>2021-01-29T18:46:53.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Javascript-练习"><a href="#Javascript-练习" class="headerlink" title="Javascript-练习"></a>Javascript-练习</h3><ol><li><p>判断一个字符串中出现次数最多的字符m并统计次数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 出现次数最多的字符的变量</span></span><br><span class="line">        <span class="keyword">var</span> value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="comment">// 出现的次数的变量</span></span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 原始字符串</span></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;aaabbbcccaaabbbaaabbbbbbbbb&#x27;</span>;</span><br><span class="line">        <span class="comment">// 把字符串转换为数组</span></span><br><span class="line">        <span class="keyword">var</span> arr = str.split(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// 将数组进行排序 把数组在转换为字符串</span></span><br><span class="line">        str = arr.sort().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">        <span class="comment">// 正则进行匹配</span></span><br><span class="line">        <span class="keyword">var</span> reg = <span class="regexp">/(\w)\1+/g</span>;</span><br><span class="line">        str.replace(reg, <span class="function"><span class="keyword">function</span> (<span class="params">val, item</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; val.length) &#123;</span><br><span class="line">                index = val.length;</span><br><span class="line">                value = item;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;出现的次数: &#x27;</span>+index,<span class="string">&#x27;出现的字符是: &#x27;</span>+value);</span><br></pre></td></tr></table></figure></li><li><p> 优先级,作用域</p></li></ol>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 作用域链: 从内部(当前作用域)逐级向上查找</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 顺序、优先级</span><br><span class="line"></span><br><span class="line">变量 ==&gt; 函数 =&gt; 参数 ==&gt; 变量提升</span><br><span class="line"></span><br></pre></td></tr></table></figure>   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">顺序、优先级:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> str = <span class="string">&#x27;fun1&#x27;</span>;</span><br><span class="line">            <span class="built_in">console</span>.log(str); <span class="comment">// fun1</span></span><br><span class="line">        &#125;</span><br><span class="line">        fun1();</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> str1 = <span class="string">&#x27;str&#x27;</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">fun1</span>(<span class="params">str1</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&#x27;a: &#x27;</span>, str1);</span><br><span class="line">str1 = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">str1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&#x27;b: str1 fun&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">console</span>.log(str1);  <span class="comment">// function()&#123; return &#x27;b: str1 fun&#x27;&#125;</span></span><br><span class="line">        &#125;</span><br><span class="line">        fun1();</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>输出</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局作用域</span></span><br><span class="line"><span class="keyword">var</span> bar = <span class="number">1</span>;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 变量提升 var bar;</span></span><br><span class="line">          <span class="built_in">console</span>.log(bar); <span class="comment">// undefined</span></span><br><span class="line">          <span class="comment">// 局部变量</span></span><br><span class="line">          <span class="keyword">var</span> bar = <span class="number">2</span>;</span><br><span class="line">          <span class="built_in">console</span>.log(bar); <span class="comment">// 2 </span></span><br><span class="line">      &#125;</span><br><span class="line">      test();</span><br></pre></td></tr></table></figure></li><li><p>输出值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 变量 </span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"> <span class="comment">// 函数</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">foo(); <span class="comment">// 1 变量 &gt; 函数 优先级</span></span><br></pre></td></tr></table></figure></li><li><p>输出值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1 级 作用域</span></span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="comment">// 2 级 作用域</span></span><br><span class="line">          <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">          <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">              <span class="comment">// 3 级作用域</span></span><br><span class="line">              <span class="comment">// 变量提升 var b;</span></span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;undfined: &#x27;</span>, b); <span class="comment">// undifined</span></span><br><span class="line">              <span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line">              <span class="built_in">console</span>.log(<span class="string">&#x27;2: &#x27;</span>, b); <span class="comment">// 2</span></span><br><span class="line">          &#125;</span><br><span class="line">          a();</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;b2: &#x27;</span>,b); <span class="comment">// 1, 在 2 级 作用域下寻找变量 b </span></span><br><span class="line">      &#125;</span><br><span class="line">      c();</span><br></pre></td></tr></table></figure></li><li><p>匿名函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">     </span><br><span class="line">       <span class="keyword">var</span> name = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">       (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="comment">// 变量提升 var name; 内部存在 name 变量</span></span><br><span class="line">           <span class="keyword">if</span> (<span class="keyword">typeof</span> name === <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">               <span class="keyword">var</span> name = <span class="string">&#x27;Jack&#x27;</span>;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;Goodbye&#x27;</span> + name);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="string">&#x27;Hello &#x27;</span> + name);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;)()</span><br><span class="line">     </span><br><span class="line"><span class="comment">//result:  Goodbye  Jack</span></span><br><span class="line">       </span><br></pre></td></tr></table></figure></li><li><p>输出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">var f &#x3D; true;</span><br><span class="line"> if (f &#x3D;&#x3D;&#x3D; true) &#123;</span><br><span class="line">     var a &#x3D; 10;</span><br><span class="line"> &#125;</span><br><span class="line"> function fn() &#123;</span><br><span class="line">     var b &#x3D; 20;</span><br><span class="line">     c &#x3D; 30;</span><br><span class="line"> &#125;</span><br><span class="line"> fn();</span><br><span class="line"> console.log(a); &#x2F;&#x2F; 10</span><br><span class="line"> console.log(b); &#x2F;&#x2F; undefined  不能拿到内部</span><br><span class="line"> console.log(c); &#x2F;&#x2F; undefined window.c30 &#x3D;&#x3D;  c &#x3D; 30</span><br></pre></td></tr></table></figure></li><li><p>解析<code>URL</code>为对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseQueryString</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">           <span class="keyword">var</span> urls = url.split(<span class="string">&#x27;?&#x27;</span>);</span><br><span class="line">           <span class="built_in">console</span>.log(urls);</span><br><span class="line">           <span class="keyword">var</span> arr = urls[<span class="number">1</span>].split(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">           <span class="built_in">console</span>.log(arr);</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = arr.length; i &lt; len; i++) &#123;</span><br><span class="line">               <span class="keyword">var</span> brr = arr[i].split(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">               obj[brr[<span class="number">0</span>]] = brr[<span class="number">1</span>];</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> obj;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">console</span>.log(parseQueryString(<span class="string">&#x27;https://www.google.com/search?q=js&amp;oq=js&amp;aqs=chrome..69i57j69i61l3.564j0j4&amp;sourceid=chrome&amp;ie=UTF-8&#x27;</span>));</span><br><span class="line">   &lt;/script&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Javascript-练习&quot;&gt;&lt;a href=&quot;#Javascript-练习&quot; class=&quot;headerlink&quot; title=&quot;Javascript-练习&quot;&gt;&lt;/a&gt;Javascript-练习&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;判断一个字符串中出现次数最多的字符</summary>
      
    
    
    
    <category term="javascript" scheme="https://lovobin.github.io/categories/javascript/"/>
    
    
    <category term="Javascript" scheme="https://lovobin.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript-闭包</title>
    <link href="https://lovobin.github.io/2021/01/29/JavaScript-%E9%97%AD%E5%8C%85/"/>
    <id>https://lovobin.github.io/2021/01/29/JavaScript-%E9%97%AD%E5%8C%85/</id>
    <published>2021-01-29T17:19:08.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JavaScript-闭包"><a href="#JavaScript-闭包" class="headerlink" title="JavaScript-闭包"></a>JavaScript-闭包</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">当内部函数被保存到外部时,将会生成闭包。闭包会导致原有作用域链不释放，造成内存泄露。</span><br><span class="line"></span><br><span class="line">Javascript高级程序设计指出: 闭包是指有权访问另一个函数作用域的变量的函数。</span><br><span class="line"></span><br><span class="line">Javascrip权威指南指出: 从技术的角度将,所有的 Javascript 函数都是闭包: 它们都是对象,它们都关联到作用域链。</span><br><span class="line"></span><br><span class="line">你不知道的Javascript中指出: 当函数可以记住并访问所在的词法作用域时,就产生了闭包,即使函数在当前词法作用域之外执行</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>打印<code>0,1···9</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> arr = [];</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(i); <span class="comment">// 0 1 2 3 4 5 ···</span></span><br><span class="line">              arr[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                  <span class="built_in">console</span>.log(i,<span class="string">&quot; &quot;</span>); <span class="comment">// 10 10 10 ···</span></span><br><span class="line">                  <span class="built_in">document</span>.write(i + <span class="string">&#x27; &#x27;</span>); <span class="comment">// 10 10 ···</span></span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">return</span> arr;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      <span class="keyword">var</span> myArr = test();</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) &#123;</span><br><span class="line">          myArr[j](); <span class="comment">//  document.write(i + &#x27; &#x27;);</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure></li><li><p>词法作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 词法作用域: 指函数在定义(或声明)它们的作用域里运行，而不是在执行(或调用)它们的作用域里运行</span></span><br><span class="line">      <span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">bar</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line">          foo();</span><br><span class="line">      &#125;</span><br><span class="line">      bar(); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></li><li><p>打印<code>0,1,2</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(i); <span class="comment">// 3 ···</span></span><br><span class="line">            &#125;, <span class="number">100</span>)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> <span class="keyword">var</span> ==&gt; <span class="keyword">let</span> </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 立即执行函数</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(i, <span class="string">&quot; &quot;</span>);</span><br><span class="line">                &#125;, <span class="number">100</span>)</span><br><span class="line">            &#125;(i))</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li><li><p>打印 <code>LI</code>的索引</p><ul><li><p>方法一</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span> item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span> item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span> item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">li</span>&gt;</span> item 4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 点击每个 li 显示对应的索引</span></span><br><span class="line">       <span class="keyword">var</span> _ul = <span class="built_in">document</span>.querySelector(<span class="string">&#x27;#ul&#x27;</span>);</span><br><span class="line">       <span class="comment">// 获取子节点</span></span><br><span class="line">       <span class="keyword">var</span> lis = _ul.children;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">           lis[i].setAttribute(<span class="string">&#x27;index&#x27;</span>, i)</span><br><span class="line">           lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">               <span class="built_in">console</span>.log(<span class="built_in">this</span>.getAttribute(<span class="string">&#x27;index&#x27;</span>));</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure></li><li><p>方法二</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</span><br><span class="line">        lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            alert(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;(i))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>方法三</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lis.length; i++) &#123;</span><br><span class="line">            lis[i].index = i;</span><br><span class="line">            lis[i].onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="built_in">this</span>.index);</span><br><span class="line">                alert(<span class="built_in">this</span>.index);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;JavaScript-闭包&quot;&gt;&lt;a href=&quot;#JavaScript-闭包&quot; class=&quot;headerlink&quot; title=&quot;JavaScript-闭包&quot;&gt;&lt;/a&gt;JavaScript-闭包&lt;/h3&gt;&lt;figure class=&quot;highlight java</summary>
      
    
    
    
    <category term="javascript" scheme="https://lovobin.github.io/categories/javascript/"/>
    
    
    <category term="闭包" scheme="https://lovobin.github.io/tags/%E9%97%AD%E5%8C%85/"/>
    
    <category term="Javascript" scheme="https://lovobin.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Flask-Proj</title>
    <link href="https://lovobin.github.io/2021/01/22/Flask-Proj/"/>
    <id>https://lovobin.github.io/2021/01/22/Flask-Proj/</id>
    <published>2021-01-22T13:10:06.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Flask-Proj"><a href="#Flask-Proj" class="headerlink" title="Flask-Proj"></a>Flask-Proj</h3><h4 id="虚拟环境及包的安装"><a href="#虚拟环境及包的安装" class="headerlink" title="虚拟环境及包的安装"></a>虚拟环境及包的安装</h4><ul><li><p>创建虚拟环境</p></li><li><p>下载<code>Flask</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask==<span class="string">&#x27;版本号&#x27;</span> / pip install flask(自行选择版本号)</span><br></pre></td></tr></table></figure></li><li><p><code>Flask-Proj</code>开发</p></li><li><p><code>requirements</code>文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Python 项目中必须包含一个 requirements.txt 文件 ,用于记录所有依赖包及其精确的版本号,以便在新环境中进行部署操作</span><br></pre></td></tr></table></figure></li><li><p>在虚拟环境中使用以下命令将当前虚拟环境中的依赖包以版本号生成至文件中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure></li><li><p>当需要创建这个虚拟环境的完全副本,可以创建一个新的虚拟环境,并执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="项目-Flask-Proj"><a href="#项目-Flask-Proj" class="headerlink" title="项目(Flask_Proj)"></a>项目(Flask_Proj)</h3><h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><ul><li><p>运行</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/proj.png"></li><li><p>配置字符集</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.py:</span><br><span class="line"><span class="comment"># 配置字符集</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br></pre></td></tr></table></figure></li></ul><ul><li><p>端口号修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.run(port=<span class="string">&#x27;端口号&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>配置文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 新建 settings.py, 写入以下配置信息</span></span><br><span class="line"></span><br><span class="line">ENV = <span class="string">&#x27;development&#x27;</span> <span class="comment"># 开发环境</span></span><br><span class="line">DEBUG = <span class="literal">True</span> <span class="comment"># 开启 debug 模式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 app 导入</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 app 定义下写如下信息</span></span><br><span class="line">app.config.from_object(settings)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>终端启动方式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python/python3 app.py</span><br></pre></td></tr></table></figure></li><li><p>配置信息无效可通过图像化界面开启<code>DEBUG</code></p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/debug.png" width="600"></li><li><p>修改后</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/settingsDebug.png" width="600"></li></ul><h4 id="路由请求方式限定"><a href="#路由请求方式限定" class="headerlink" title="路由请求方式限定"></a>路由请求方式限定</h4><ul><li><p><code>POSTMAN</code> 进行测试</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/postman.png"></li><li><p>添加新的请求方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认支持 GET 请求</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods = [<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br></pre></td></tr></table></figure></li><li><p>路由的请求与相应</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">response 响应:</span><br><span class="line">200 - 请求成功</span><br><span class="line">404 - 请求的资源(网页等)不存在</span><br><span class="line">500 - 内部服务器错误</span><br><span class="line">302 - 重定向</span><br><span class="line">301 - 资源(网页等)被永久转移到其他 URL</span><br></pre></td></tr></table></figure></li><li><p><code>Flask</code>路由和变量规则</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 路由 route</span></span><br><span class="line">这个装饰器其实就是将 rule 字符串跟视图函数进行了数据绑定,通过 add_url_rule() 实现绑定</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等效写法</span></span><br><span class="line"><span class="comment"># ------------------- 装饰器 ------------------------------</span></span><br><span class="line"><span class="meta">    @app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods = [<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">hello_world</span>():</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"> <span class="comment"># -------------------- add_url_rule() -------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;h1&gt;&lt;font color=&quot;red&quot;&gt;index Text&lt;/font&gt;&lt;/h1&gt;&#x27;</span></span><br><span class="line">app.add_url_rule(<span class="string">&#x27;/index&#x27;</span>, view_func = index)</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/add_url_rule.png"><ul><li> 路由的变量规则</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">通过把 URL 的一部分标记为 &lt;variable_name&gt; 就可以在 URL 中添加变量。标记的 部分会作为关键字参数传递给函数。通过使用 &lt;converter:variable_name&gt; ，可以 选择性的加上一个转换器，为变量指定规则。</span><br></pre></td></tr></table></figure>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 默认 str</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/getValue/&lt;key&gt;&#x27;</span></span>) </span><span class="comment"># 默认 str 不需要添加数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getValue</span>(<span class="params">key</span>):</span></span><br><span class="line">    <span class="keyword">return</span> data.get(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># int</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># int 类型</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/add/&lt;int:num&gt;&#x27;</span></span>)  </span><span class="comment"># 默认 str 不需要添加数据类型</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">num</span>):</span></span><br><span class="line">    result = num + <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(result)</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>转换器类型：</p><table><thead><tr><th><code>string</code></th><th>（缺省值） 接受任何不包含斜杠的文本</th></tr></thead><tbody><tr><td><code>int</code></td><td>接受正整数</td></tr><tr><td><code>float</code></td><td>接受正浮点数</td></tr><tr><td><code>path</code></td><td>类似 <code>string</code> ，但可以包含斜杠</td></tr><tr><td><code>uuid</code></td><td>接受 UUID 字符串</td></tr></tbody></table></li><li><p>路由的斜杠问题（唯一的 <code>URL</code> 问题）</p> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">‘/index/’ </span><br><span class="line"></span><br><span class="line">路由中没有斜杠,浏览器访问会报错</span><br><span class="line"></span><br><span class="line">路由中有斜杠,访问时没有则会自动重定向</span><br></pre></td></tr></table></figure></li><li><p><code>return</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> 后面返回的字符串其实也是做了一个 response 对象的封装。最后的返回结果还是 response 对象。</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Jinja2-模板引擎"><a href="#Jinja2-模板引擎" class="headerlink" title="Jinja2 模板引擎"></a>Jinja2 模板引擎</h3><h4 id="渲染模板函数"><a href="#渲染模板函数" class="headerlink" title="渲染模板函数"></a>渲染模板函数</h4><ol><li><p><code>Flask</code> 提供的 <code>render_template</code>函数封装了该模板引擎</p></li><li><p> <code>render_template</code> 函数的第一个参数是模板的文件名,后面的参数都是键值对,表示模板中变量对应的真实值。</p></li></ol>   <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 render_template</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,render_template</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 render_template</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure>   <img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/Jinja2.png" width="600"><ol start="3"><li><p>变量代码块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;# 注释语法 #&#125;</span><br><span class="line">&#123;&#123; value1 &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 通常,模板中使用的变量名和要传递的数据的变量名保持一致。 #&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/jinjaStr.png" width="600"></li><li><p>控制代码块</p><ul><li><p><code>for</code>循环</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% for play in my_list %&#125;</span><br><span class="line">    &lt;h1&gt; &#123;&#123; play &#125;&#125; &lt;&#x2F;h1&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/forjinja.png"></li><li><p><code>if</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if num&gt;3 %&#125;</span><br><span class="line">&#123;&#123; num&#125; &#125;&#125;</span><br><span class="line">&#123;% endif %&#125; </span><br></pre></td></tr></table></figure></li></ul></li><li><p> 内建过滤器</p></li></ol><ul><li><p>含义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">过滤器:</span><br><span class="line"></span><br><span class="line">过滤器的本质就是函数,有时候我们不仅仅要输出变量的值,我们还需要改变变量的显示甚至格式化,运算等等，而在模板中是不能直接</span><br><span class="line"></span><br><span class="line">调用 Python 中的某些方法m那么就用到了过滤器。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">变量名 | 过滤器</span><br><span class="line"></span><br><span class="line">&#123;&#123; variable | filter_name(*args) &#125;&#125; </span><br><span class="line"></span><br><span class="line">&#123;# 如果没有任何参数传递给过滤器,则可以省略括号 #&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; variable | filter_name &#125;&#125;</span><br><span class="line"></span><br><span class="line">&#123;# 链式调用 #&#125;</span><br><span class="line"></span><br><span class="line">&#123;&#123; variable | filter_name1 | filter_name2 | ··· &#125;&#125;</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV17W41177oE?p&#x3D;14</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ol start="6"><li><p>自定义过滤器</p><ul><li><p>方法一</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 自定义过滤器 本质是函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">replace_str</span>(<span class="params">value</span>):</span></span><br><span class="line">    value = value.replace(<span class="string">&#x27;str&#x27;</span>, <span class="string">&#x27;我被替换了···&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> value.strip()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 过滤器</span></span><br><span class="line">app.add_template_filter(replace_str, <span class="string">&#x27;replace&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用过滤器 </span></span><br><span class="line"></span><br><span class="line">&lt;p&gt;原格式: &#123;&#123; msg &#125;&#125; &lt;/p&gt;</span><br><span class="line">&lt;p&gt; 过滤器: &lt;font color=&quot;red&quot;&gt;&#123;&#123; msg|replace &#125;&#125; &lt;/font&gt; &lt;/p&gt;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>方法二(装饰器)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.template_filter(<span class="params"><span class="string">&#x27;listreverse&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reverse_filter</span>(<span class="params">li</span>):</span></span><br><span class="line">    temp_li = <span class="built_in">list</span>(li)</span><br><span class="line">    li = temp_li.reverse()</span><br><span class="line">    <span class="keyword">return</span> temp_li</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/filter.png"></li></ul></li></ol><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><ul><li><p><code>Flask-Response</code> 对象</p></li><li><p><code>Flask-Resquest</code> 对象</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">requests 对象 对象可以访问属性,也可以调用方法</span><br><span class="line"></span><br><span class="line">request.args.get(&#x27;key&#x27;) --&gt; get 请求</span><br><span class="line"></span><br><span class="line">request.form --&gt; post 请求</span><br></pre></td></tr></table></figure></li></ul><h3 id="Web-表单"><a href="#Web-表单" class="headerlink" title="Web 表单"></a>Web 表单</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">在 Flask 中,为了处理 web 表单,我们一般使用 Flask-WTF 扩展,它封装了 WTForms,并且它有验证表单数据的功能。</span><br></pre></td></tr></table></figure><ul><li><p>表单验证</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/reigster&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">reigster</span>():</span></span><br><span class="line">    <span class="comment"># 获取请求方式</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="comment"># 获取请求参数</span></span><br><span class="line">        username = request.form.get(<span class="string">&#x27;username&#x27;</span>)  <span class="comment"># 获取表单提交的用户名</span></span><br><span class="line">        password = request.form.get(<span class="string">&#x27;password&#x27;</span>)  <span class="comment"># 获取表单提交的密码</span></span><br><span class="line">        repassword = request.form.get(<span class="string">&#x27;repassword&#x27;</span>)  <span class="comment"># 获取表单提交的密码</span></span><br><span class="line">        print(<span class="string">&#x27;&#x27;&#x27; </span></span><br><span class="line"><span class="string">            用户名: &#123;&#125;</span></span><br><span class="line"><span class="string">            密码: &#123;&#125;</span></span><br><span class="line"><span class="string">            重复输入: &#123;&#125;</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span>.<span class="built_in">format</span>(username, password, repassword))</span><br><span class="line">        <span class="comment"># 判断参数是否填写 &amp; 密码是否相同</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">all</span>([username, password, repassword]):</span><br><span class="line">            print(<span class="string">&#x27;参数不完整&#x27;</span>)</span><br><span class="line">            flash(<span class="string">u&#x27;参数不完整&#x27;</span>)</span><br><span class="line">        <span class="comment"># 判断密码是否相同 不相同输入密码不一致</span></span><br><span class="line">        <span class="keyword">elif</span> password != repassword:</span><br><span class="line">            print(<span class="string">&#x27;两次输入不一致&#x27;</span>)</span><br><span class="line">            flash(<span class="string">u&#x27;两次输入不一致&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;s&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br></pre></td></tr></table></figure></li><li><p>闪现消息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 消息闪现秘钥</span></span><br><span class="line">app.secret_key = <span class="string">&#x27;flask&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># u 解决编码问题</span></span><br><span class="line">flash(<span class="string">u&#x27;message-info&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历 flash-message </span></span><br><span class="line">  &#123;% <span class="keyword">for</span> message <span class="keyword">in</span> get_flashed_messages() %&#125;</span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">  &#123;% endfor %&#125;</span><br></pre></td></tr></table></figure></li><li><p>重定向</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># redirect 源码 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect</span>(<span class="params">location, code=<span class="number">302</span>, Response=<span class="literal">None</span></span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a response object (a WSGI application) that, if called,</span></span><br><span class="line"><span class="string">    redirects the client to the target location. Supported codes are</span></span><br><span class="line"><span class="string">    301, 302, 303, 305, 307, and 308. 300 is not supported because</span></span><br><span class="line"><span class="string">    it&#x27;s not a real redirect and 304 because it&#x27;s the answer for a</span></span><br><span class="line"><span class="string">    request with a request with defined If-Modified-Since headers.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 0.6</span></span><br><span class="line"><span class="string">       The location can now be a unicode string that is encoded using</span></span><br><span class="line"><span class="string">       the :func:`iri_to_uri` function.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    .. versionadded:: 0.10</span></span><br><span class="line"><span class="string">        The class used for the Response object can now be passed in.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param location: the location the response should redirect to.</span></span><br><span class="line"><span class="string">    :param code: the redirect status code. defaults to 302.</span></span><br><span class="line"><span class="string">    :param class Response: a Response class to use when instantiating a</span></span><br><span class="line"><span class="string">        response. The default is :class:`werkzeug.wrappers.Response` if</span></span><br><span class="line"><span class="string">        unspecified.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">有两次响应:</span><br><span class="line">    </span><br><span class="line">    <span class="number">1.</span> <span class="number">302</span> 状态码 + location</span><br><span class="line">    </span><br><span class="line">    <span class="number">2.</span> 返回location 请求地址内容</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li><li><p>路径反向解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">endpoint = <span class="string">&#x27;代号/小名&#x27;</span></span><br><span class="line"></span><br><span class="line">url_for()</span><br><span class="line"></span><br><span class="line"><span class="comment"># -----------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span>, methods = [<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>], endpoint = <span class="string">&#x27;f&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>():</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Flask-WTF 实现表单</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flaskWtf&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flaskWtf</span>():</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;f&#x27;</span>))</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>Flask-WTF</code></p><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-wtf</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 表单所需</span></span><br><span class="line"><span class="keyword">from</span> flask_wtf <span class="keyword">import</span> FlaskForm</span><br><span class="line"><span class="keyword">from</span> wtforms <span class="keyword">import</span> StringField, PasswordField, SubmitField</span><br><span class="line"><span class="keyword">from</span> wtforms.validators <span class="keyword">import</span> DataRequired</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义登录类 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoginForm</span>(<span class="params">FlaskForm</span>):</span></span><br><span class="line">    username = StringField(<span class="string">u&#x27;用户名&#x27;</span>)</span><br><span class="line">    password = PasswordField(<span class="string">u&#x27;密码&#x27;</span>)</span><br><span class="line">    repassword = PasswordField(<span class="string">u&#x27;确认密码&#x27;</span>)</span><br><span class="line">    submit = SubmitField(<span class="string">u&#x27;提交&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&quot;GET&quot;</span>,<span class="string">&quot;POST&quot;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">login = LoginForm()</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>,login=login)</span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="模板-复用"><a href="#模板-复用" class="headerlink" title="模板: 复用"></a>模板: 复用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模板继承 *</span><br><span class="line">include</span><br><span class="line">宏</span><br></pre></td></tr></table></figure><ul><li><p>需要模板继承的情况</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 多个模板具有完全相同的顶部和底部</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 多个模板具有相同的模板内容,但是内容中部分不一样</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> 多个模板具有完全相同的模板内容</span><br><span class="line"></span><br><span class="line">标签:</span><br><span class="line"></span><br><span class="line">    &#123;% block 名字 %&#125;</span><br><span class="line"></span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">继承:</span><br><span class="line">    </span><br><span class="line">    &#123;% extends <span class="string">&#x27;html-name.html&#x27;</span> %&#125;</span><br></pre></td></tr></table></figure></li><li><p>案例</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt; &#123;% block title %&#125;base&#123;% endblock %&#125;&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        &#123;<span class="comment">#       #&#125;</span></span><br><span class="line">        <span class="comment">#div1 &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            background-color: pink;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#div1 ul &#123;</span></span><br><span class="line">            <span class="built_in">list</span>-style: none;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#div1 ul li &#123;</span></span><br><span class="line">            <span class="built_in">float</span>: left;</span><br><span class="line">            padding-right: 20px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#div2 &#123;</span></span><br><span class="line">            height: 600px;</span><br><span class="line">            font-size: 60px;</span><br><span class="line">            line-height: 600px;</span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: skyblue;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#div3 &#123;</span></span><br><span class="line">            height: 100px;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            font-size: 20px;</span><br><span class="line">            color: <span class="comment">#fff;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            background-color: lightseagreen;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &#123;% block mycss %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">        &lt;li&gt;首页&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;关于&lt;/li&gt;</span><br><span class="line">        &lt;li&gt;友情链接&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">    &#123;<span class="comment">#    &#123;% block div1 %&#125;&#123;% endblock %&#125; #&#125;</span></span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;div2&quot;</span>&gt;</span><br><span class="line">    &#123;% block div2 %&#125;</span><br><span class="line">        我是中间部分</span><br><span class="line">        &lt;button&gt; 点击&lt;/button&gt;</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;div <span class="built_in">id</span>=<span class="string">&quot;div3&quot;</span>&gt;</span><br><span class="line">    &#123;% block div3 %&#125;</span><br><span class="line">        版权信息</span><br><span class="line">    &#123;% endblock %&#125;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    var btn = document.querySelector(<span class="string">&#x27;button&#x27;</span>);</span><br><span class="line">    btn.onclick = function ()&#123;</span><br><span class="line">        alert(<span class="string">&#x27;点击了···&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&#123;% block myscript %&#125;&#123;% endblock %&#125;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>模板继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment"># 继承 base.html #&#125;</span></span><br><span class="line">&#123;% extends <span class="string">&#x27;base.html&#x27;</span> %&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># 修改title #&#125;</span></span><br><span class="line">&#123;% block title %&#125;</span><br><span class="line">    useBase</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># css 预留 #&#125;</span></span><br><span class="line">&#123;% block mycss %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">#div2 &#123;</span></span><br><span class="line">            background-color: deeppink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;<span class="comment"># js 事件 #&#125;</span></span><br><span class="line">&#123;% block myscript %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        console.log(btn)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/exteds.png"></li><li><p>修改局部内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="comment"># div2 修改内容 #&#125;</span></span><br><span class="line"></span><br><span class="line">&#123;% block div2 %&#125;</span><br><span class="line">    &lt;h1&gt; 修改后的内容 &lt;/h1&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/base.png"></li><li><p>外界资源引入方式</p><ul><li><p>方式一(不推荐)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="comment"># css 预留 #&#125;</span></span><br><span class="line">&#123;% block mycss %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">#div2 &#123;</span></span><br><span class="line">            background-color: deeppink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    </span><br><span class="line">    &#123;<span class="comment"># 普通引入方式 #&#125;</span></span><br><span class="line">    </span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;../static/css/style.css&quot;</span> /&gt;</span><br><span class="line">    </span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p>方式二(反向解析)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(app.url_map)  <span class="comment"># 存在该路由规则</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/url_map.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;<span class="comment"># css 预留 #&#125;</span></span><br><span class="line">&#123;% block mycss %&#125;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        <span class="comment">#div2 &#123;</span></span><br><span class="line">            background-color: deeppink;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">    &#123;<span class="comment"># 反向解析引入 #&#125;</span></span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;css/style.css&#x27;) &#125;&#125;&quot;</span>&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>js</code>外部资源引入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment"># js 事件 #&#125;</span></span><br><span class="line">&#123;% block myscript %&#125;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        console.log(btn)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">&#123;<span class="comment"># 反向解析 引入外部js #&#125;</span></span><br><span class="line">    &lt;script src=&quot;&#123;&#123; url_for(&#x27;static&#x27;,filename=&#x27;js/index.js&#x27;) &#125;&#125;&quot;&gt;&lt;/script&gt;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/jsBase.png"></li></ul></li><li><p>宏（<code>macro</code>）</p><ul><li><p>定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment"># 定义宏 #&#125;</span></span><br><span class="line">&#123;% macro fun-name(action,value=<span class="string">&#x27;默认值&#x27;</span>),method=<span class="string">&#x27;post&#x27;</span> %&#125;</span><br><span class="line">    statements</span><br><span class="line">&#123;% endmacro %&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 定义一个 form </span></span><br><span class="line">&#123;% macro form(action,value=<span class="string">&#x27;默认值&#x27;</span>),method=<span class="string">&#x27;post&#x27;</span> %&#125;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;input type=&quot;text&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span><br><span class="line">&#123;% endmacro %&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="comment"># 使用宏 #&#125;</span></span><br><span class="line"><span class="number">1.</span> 导入</span><br><span class="line"></span><br><span class="line">    &#123;% <span class="keyword">import</span>  <span class="string">&#x27;maco/maco1.html&#x27;</span> <span class="keyword">as</span> 别名 %&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 应用</span><br><span class="line">   </span><br><span class="line">    &#123;&#123; 别名.fun-name(<span class="string">&#x27;/router&#x27;</span>,···) &#125;&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用 form</span></span><br><span class="line"> &#123;% <span class="keyword">import</span> <span class="string">&#x27;宏资源路径&#x27;</span> <span class="keyword">as</span> f %&#125;</span><br><span class="line"> &#123;&#123; f.form(<span class="string">&#x27;/index&#x27;</span>,value=<span class="string">&quot;注册&quot;</span>,method=<span class="string">&quot;post&quot;</span>) &#125;&#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="Flask-蓝图"><a href="#Flask-蓝图" class="headerlink" title="Flask-蓝图"></a>Flask-蓝图</h3><ul><li><p>拆解</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入配置文件</span></span><br><span class="line"><span class="keyword">import</span> settings</span><br><span class="line"></span><br><span class="line"><span class="comment"># 导入蓝图 对象</span></span><br><span class="line"><span class="keyword">from</span> apps.user.view <span class="keyword">import</span> user_bp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_app</span>():</span></span><br><span class="line">    app = Flask(__name__, template_folder = <span class="string">&#x27;../templates&#x27;</span>, static_folder = <span class="string">&#x27;../static&#x27;</span>)  <span class="comment"># app 是一个核心对象</span></span><br><span class="line">    app.config.from_object(settings)  <span class="comment"># 加载配置</span></span><br><span class="line">    <span class="comment"># 蓝图</span></span><br><span class="line">    <span class="comment"># 注册蓝图</span></span><br><span class="line">    app.register_blueprint(user_bp)  <span class="comment"># 将蓝图对象绑定到 app 上</span></span><br><span class="line">    print(app.url_map)</span><br><span class="line">    <span class="keyword">return</span> app</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>app.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apps <span class="keyword">import</span> create_app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = create_app()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    print(app.url_map)</span><br><span class="line">    app.run(port = <span class="number">9000</span>)  <span class="comment"># 设置端口号最好在启动之前设置</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><ul><li><p><code>Flask-script</code></p><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-script</span><br></pre></td></tr></table></figure></li><li><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line">manager = Manager(app=app)</span><br><span class="line"></span><br><span class="line">manager.run()</span><br></pre></td></tr></table></figure></li><li><p>启动方式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python/python3 app.py runserver [-h <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span> -p new-port][可选参数]</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="持久化存储"><a href="#持久化存储" class="headerlink" title="持久化存储"></a>持久化存储</h3><ol><li><p><code>pymysql</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure></li><li><p><code>Flask-SQLAlchemy</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Flask-SQLAlchemy 是一个 Flask 扩展,简化了在 Flask 应用中使用 SQLAlchemy 的操作,SQLAlchemy 是一个强大的关系型数据库</span><br><span class="line"></span><br><span class="line">框架,支持多种数据库后台。SQLAlchemy 提供了高层 ORM，也提供了使用数据库原生SQL 的底层功能。</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>下载</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy <span class="comment"># 实现 ORM 映射</span></span><br></pre></td></tr></table></figure></li><li><p>映射相关</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-migrate <span class="comment"># 发布命令的工具</span></span><br></pre></td></tr></table></figure></li><li><p>配置数据库连接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置数据库</span></span><br><span class="line"><span class="comment"># mysql+pymysql://user:password@hostip:port/databasename</span></span><br><span class="line">SQLALCHEMY_DATABASE_URI=<span class="string">&#x27;mysql://root:root@127.0.0.1:3306/student&#x27;</span></span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Flask-Proj&quot;&gt;&lt;a href=&quot;#Flask-Proj&quot; class=&quot;headerlink&quot; title=&quot;Flask-Proj&quot;&gt;&lt;/a&gt;Flask-Proj&lt;/h3&gt;&lt;h4 id=&quot;虚拟环境及包的安装&quot;&gt;&lt;a href=&quot;#虚拟环境及包的安装&quot; c</summary>
      
    
    
    
    <category term="Flask" scheme="https://lovobin.github.io/categories/Flask/"/>
    
    
    <category term="Python" scheme="https://lovobin.github.io/tags/Python/"/>
    
    <category term="Linux" scheme="https://lovobin.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>红宝书阅读</title>
    <link href="https://lovobin.github.io/2021/01/20/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E9%98%85%E8%AF%BB/"/>
    <id>https://lovobin.github.io/2021/01/20/%E7%BA%A2%E5%AE%9D%E4%B9%A6%E9%98%85%E8%AF%BB/</id>
    <published>2021-01-20T15:52:17.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="红宝书（JavaScript高级程序设计-第四版）"><a href="#红宝书（JavaScript高级程序设计-第四版）" class="headerlink" title="红宝书（JavaScript高级程序设计-第四版）"></a>红宝书（JavaScript高级程序设计-第四版）</h3><h4 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h4><ul><li><p>什么是<code>Javascript</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">维基百科: JavaScript（通常缩写为JS）是一种高级的、解释型的编程语言。JavaScript是一门基于原型、函数先行的语言，是一门多范式的语言，它支持面向对象程序设计，命令式编程，以及函数式编程。它提供语法来操控文本、数组、日期以及正则表达式等，不支持I/O，比如网络、存储和图形等，但这些都可以由它的宿主环境提供支持。它已经由ECMA（欧洲电脑制造商协会）通过ECMAScript实现语言的标准化。它被世界上的绝大多数网站所使用，也被世界主流浏览器（Chrome、IE、Firefox、Safari、Opera）支持。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Javascript 是一门用来与网页交互的脚本语言。</span><br></pre></td></tr></table></figure></li><li><p><code>Javascript</code>实现</p><ol><li><p><code>ECMAScript</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">由 ECMA-<span class="number">262</span> 定义并提供核心功能。</span><br></pre></td></tr></table></figure></li><li><p><code>DOM</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">文档对象模型(DOM，Document <span class="built_in">Object</span> Model) 是一个应用编程接口(API)，用于在 HTML 中使用扩展的 XML. DOM 将整个页面抽象为一组分层节点。</span><br></pre></td></tr></table></figure></li><li><p>一组分层节点</p></li><li><p><code>BOM</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">浏览器对象模型(BOM) API, 用于支持访问和操作浏览器的窗口。</span><br></pre></td></tr></table></figure></li></ol></li></ul><h4 id="第二章-HTML-中的-JavaScript"><a href="#第二章-HTML-中的-JavaScript" class="headerlink" title="第二章 HTML 中的 JavaScript"></a>第二章 HTML 中的 JavaScript</h4><ul><li><p><code>script</code>元素(有 8 个属性)</p><ol><li><p><code>async</code>： 可选。表示应该立即开始下载脚本,但不能阻止其他页面动作,比如下载资源或等待其他脚本加载,只对外部脚本文件有效。（最好只有一个）</p></li><li><p><code>defer</code>： 可选。 表示脚本可以延迟到文档完全被解析和显示之后再执行。只对外部脚本文件有效。</p></li><li><p><code>integrity</code>： 可选。允许比对接受到的资源和制定加密签名以验证子资源完整性。如果接受到的资源的签名与这个指定的签名不匹配,则页面会报错,脚本不会执行。这个属性可以用于确保内容分发网络不会提供恶意内容。</p></li></ol></li><li><p>XHTML</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可扩展超文本标记语言,是将 HTML 作为 XML 的应用重新包装的结果。</span><br></pre></td></tr></table></figure></li></ul><h4 id="第三章-语言基础"><a href="#第三章-语言基础" class="headerlink" title="第三章  语言基础"></a>第三章  语言基础</h4><ul><li><p>区分大小写</p></li><li><p>标识符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">标识符: 就是变量,函数,属性或参数的名称</span><br></pre></td></tr></table></figure><ol><li><p>第一个字符必须是一个字母,下划线或美元符号。</p></li><li><p>剩下的其他字符可以是扩展 ASCII 中的字母,也可以是 <code>Unicode</code>的字母字符。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">注意: 关键字、保留字、<span class="literal">true</span>、<span class="literal">false</span>和<span class="literal">null</span>不能作为标识符。</span><br></pre></td></tr></table></figure></li><li><p>注释</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 单行注释</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">多行注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li><p>严格模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">严格模式是一种不同的 JavaScript 解析和执行模型，ECMAScript3 的一些不规范写法在这种模式下会被处理,对于不安全的活动抛出错误。</span><br></pre></td></tr></table></figure><ol><li><p>脚本开启严格模式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在脚本开头添加</span></span><br><span class="line"><span class="meta">&quot;use strict&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>单独函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="meta">    &quot;use strict&quot;</span>;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">分号结尾</span><br></pre></td></tr></table></figure></li><li><p>变量</p><ol><li><p><code>var</code>关键字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> 作用域(函数作用域)</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> 声明提升: 提升就是把变量声明都拉到函数作用域的顶部。</span><br></pre></td></tr></table></figure></li><li><p><code>let</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> 声明的范围是块作用域</span><br></pre></td></tr></table></figure></li><li><p><code>const</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">声明变量时必须同时初始化变量。</span><br></pre></td></tr></table></figure></li></ol></li><li><p>数据类型(6+1 )</p><ol><li><p>数据类型</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">6</span> 种简单的数据类型(也称原始类型)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span> Undefined </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span> Null</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span> <span class="built_in">Boolean</span></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span> <span class="built_in">Number</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span> <span class="built_in">String</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span> <span class="built_in">Symbol</span>(符号)</span><br><span class="line"></span><br><span class="line">还有一种复杂数据类型: <span class="built_in">Object</span></span><br></pre></td></tr></table></figure></li><li><p><code>typeof</code>操作符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">因为 ECMAScript 的类型是松散的m所以需要一种手段来确定任意变量的数据类型。</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;undefined&quot;</span> 表示值为定义</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;boolean&quot;</span> 表示值为布尔值</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;string&quot;</span> 表示值为字符串</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;number&quot;</span> 表示值为数字</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;object&quot;</span> 表示值为对象(而不是函数)或 <span class="literal">null</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;function&quot;</span> 表示值为函数</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;symbol&quot;</span> 表示值为符号</span><br></pre></td></tr></table></figure></li><li><p>数值转换</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Number</span>()</span><br><span class="line"><span class="built_in">parseInt</span>()</span><br><span class="line"><span class="built_in">parseFloat</span>()</span><br></pre></td></tr></table></figure></li><li><p>字符串的特点</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECMAScript 中的字符串是不可变的,一旦创建,它们的值就不能在变. 要修改某个变量中的字符串值,必须先销毁原始的字符串,然后将包含新值得另一个字符串保存到该变量。</span><br></pre></td></tr></table></figure></li></ol></li><li><p>操作符</p><ol><li><p>一元操作符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只操作一个值的操作符叫一元操作符</span><br></pre></td></tr></table></figure></li><li><p>递增/递减操作符</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">++</span><br><span class="line">--</span><br></pre></td></tr></table></figure></li><li><p>相等操作符</p></li></ol><ul><li><p>等于和不等于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">== (二等号)</span><br><span class="line">!=</span><br></pre></td></tr></table></figure></li><li><p>全等和不全等</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">=== (三等号)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = (<span class="string">&quot;55&quot;</span> == <span class="number">55</span>) <span class="comment">// true 转换后相等</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result2 = (<span class="string">&quot;55&quot;</span> === <span class="number">55</span>) <span class="comment">// false 不相等,因为数据类型不相同</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>for</code> 语句</p><ul><li><p><code>for-in</code>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>-<span class="keyword">in</span> 语句是一种严格的迭代语句。用于枚举对象中的非符号键属性</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(propery <span class="keyword">in</span> expression) statement</span><br><span class="line"></span><br><span class="line">Eg.</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> propName <span class="keyword">in</span> <span class="built_in">window</span>)&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(propName)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><code>for-of</code>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>-<span class="keyword">of</span> 语句是一种严格的迭代语句,用于遍历可迭代的元素。</span><br><span class="line"></span><br><span class="line">Eg.</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">const</span> el <span class="keyword">of</span> [<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">8</span>])&#123;</span><br><span class="line">    <span class="built_in">document</span>.write(el);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>标签语句(暂不理解)</p></li><li><p><code>break</code> 和 <code>continue</code>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">break</span>; <span class="comment">// 立即退出循环,强制执行循环后的下一条语句</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">continue</span>; <span class="comment">// 立即退出循环，但会再次从循环顶部开始执行</span></span><br></pre></td></tr></table></figure></li><li><p><code>with</code>语句(咱不理解)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">用途: 将代码作用域设置为特定的对象</span><br><span class="line"></span><br><span class="line">主要针对场景: 针对一个对象反复操作</span><br></pre></td></tr></table></figure></li><li><p><code>switch</code>语句</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">    <span class="keyword">case</span> value1:</span><br><span class="line">        statement;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">        ····</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">    statement;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">函数使用 <span class="function"><span class="keyword">function</span> 关键字 声明</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">functionName</span>(<span class="params">arg0,arg1,···</span>)</span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">statement</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;红宝书（JavaScript高级程序设计-第四版）&quot;&gt;&lt;a href=&quot;#红宝书（JavaScript高级程序设计-第四版）&quot; class=&quot;headerlink&quot; title=&quot;红宝书（JavaScript高级程序设计-第四版）&quot;&gt;&lt;/a&gt;红宝书（JavaScr</summary>
      
    
    
    
    <category term="javascript" scheme="https://lovobin.github.io/categories/javascript/"/>
    
    
    <category term="HTML" scheme="https://lovobin.github.io/tags/HTML/"/>
    
    <category term="css" scheme="https://lovobin.github.io/tags/css/"/>
    
    <category term="javascript" scheme="https://lovobin.github.io/tags/javascript/"/>
    
    <category term="Ajax" scheme="https://lovobin.github.io/tags/Ajax/"/>
    
    <category term="json" scheme="https://lovobin.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Ajax-案例接口文档</title>
    <link href="https://lovobin.github.io/2021/01/20/Ajax-%E6%A1%88%E4%BE%8B%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    <id>https://lovobin.github.io/2021/01/20/Ajax-%E6%A1%88%E4%BE%8B%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/</id>
    <published>2021-01-20T10:15:38.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Ajax-邮箱验证接口"><a href="#Ajax-邮箱验证接口" class="headerlink" title="Ajax-邮箱验证接口"></a>Ajax-邮箱验证接口</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">测试地址: http://localhost:3000</span><br><span class="line"></span><br><span class="line">请求参数类型: application/x-www-form-urlencoded</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="邮箱地址验证"><a href="#邮箱地址验证" class="headerlink" title="邮箱地址验证"></a>邮箱地址验证</h4><ul><li><p>简要描述</p></li><li><p>验证邮箱地址是否唯一,<code>3327511395@qq.com</code> 已经注册</p></li><li><p>请求地址</p><ul><li><code>/verifyEmailAsress</code></li></ul></li><li><p>请求方式</p><ul><li>GET</li></ul></li><li><p>参数</p><table><thead><tr><th align="center">参数名</th><th align="center">必须</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">email</td><td align="center">是</td><td align="center">string</td><td align="center">待验证邮箱地址</td></tr></tbody></table></li><li><p>返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> &#123;<span class="attr">message</span>: <span class="string">&#x27;邮箱地址已经注册过了,请更换其他邮箱地址&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2.</span>  &#123;<span class="attr">message</span>: <span class="string">&#x27;恭喜,邮箱地址可用&#x27;</span>&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="搜索框输入自动提示"><a href="#搜索框输入自动提示" class="headerlink" title="搜索框输入自动提示"></a>搜索框输入自动提示</h4><ul><li><p>简要描述</p><ul><li>根据用户在文本框中输入的关键字,匹配相关内容</li></ul></li><li><p>请求地址</p><ul><li><code>/searchAutoPrompt</code></li></ul></li><li><p>请求方式</p><ul><li><code>GET</code></li></ul></li><li><p>参数</p><table><thead><tr><th align="center">参数名</th><th align="center">必选</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">key</td><td align="center">是</td><td align="center">string</td><td align="center">用户输入关键字</td></tr></tbody></table></li><li><p>返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[ </span><br><span class="line">    <span class="string">&#x27;abcde&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;abcedfg&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;abc&#x27;</span>        </span><br><span class="line">]</span><br></pre></td></tr></table></figure></li></ul><h4 id="省市联动"><a href="#省市联动" class="headerlink" title="省市联动"></a>省市联动</h4><h5 id="获取省份信息"><a href="#获取省份信息" class="headerlink" title="获取省份信息"></a>获取省份信息</h5><ul><li><p>请求地址</p><ul><li><code>/province</code></li></ul></li><li><p>请求方式</p><ul><li><code>GET</code></li></ul></li><li><p>返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="string">&#x27;001&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;黑龙江省&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="string">&#x27;002&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;四川省&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="string">&#x27;003&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;河北省&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        id: <span class="string">&#x27;004&#x27;</span>,</span><br><span class="line">        name: <span class="string">&#x27;江苏省&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure></li></ul><h5 id="根据省份-ID-获取城市信息"><a href="#根据省份-ID-获取城市信息" class="headerlink" title="根据省份 ID 获取城市信息"></a>根据省份 ID 获取城市信息</h5><ul><li><p>请求地址</p><ul><li><code>/cities</code></li></ul></li><li><p>请求方式</p><ul><li><code>GET</code></li></ul></li><li><p>参数</p><table><thead><tr><th align="center">参数名</th><th align="center">必选</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">是</td><td align="center">string</td><td align="center">省份id</td></tr></tbody></table></li><li><p>返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul><h5 id="根据城市-id-获取县城信息"><a href="#根据城市-id-获取县城信息" class="headerlink" title="根据城市 id 获取县城信息"></a>根据城市 id 获取县城信息</h5><ul><li><p>请求地址</p><ul><li><code>/area</code></li></ul></li><li><p>请求方式</p><ul><li><code>GET</code></li></ul></li><li><p>参数</p><table><thead><tr><th align="center">参数名</th><th align="center">必选</th><th align="center">类型</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">id</td><td align="center">是</td><td align="center">string</td><td align="center">城市id</td></tr></tbody></table></li><li><p>返回值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Ajax-邮箱验证接口&quot;&gt;&lt;a href=&quot;#Ajax-邮箱验证接口&quot; class=&quot;headerlink&quot; title=&quot;Ajax-邮箱验证接口&quot;&gt;&lt;/a&gt;Ajax-邮箱验证接口&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table</summary>
      
    
    
    
    <category term="Ajax" scheme="https://lovobin.github.io/categories/Ajax/"/>
    
    
    <category term="Ajax" scheme="https://lovobin.github.io/tags/Ajax/"/>
    
    <category term="接口文档" scheme="https://lovobin.github.io/tags/%E6%8E%A5%E5%8F%A3%E6%96%87%E6%A1%A3/"/>
    
  </entry>
  
  <entry>
    <title>Javascript-面向对象编程</title>
    <link href="https://lovobin.github.io/2021/01/18/Javascript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/"/>
    <id>https://lovobin.github.io/2021/01/18/Javascript-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/</id>
    <published>2021-01-18T18:13:02.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Javascript-面向对象编程"><a href="#Javascript-面向对象编程" class="headerlink" title="Javascript-面向对象编程"></a>Javascript-面向对象编程</h3><h4 id="面向过程和面向对象的对比"><a href="#面向过程和面向对象的对比" class="headerlink" title="面向过程和面向对象的对比"></a>面向过程和面向对象的对比</h4><ul><li><p>面向过程</p><ul><li>优点: 性能比面向对象高,适合跟硬件联系很紧密的东西</li><li>缺点: 没有面向对象易维护,易复用,易扩展</li></ul></li><li><p>面向对象</p><ul><li>优点: 易维护,易复用,易扩展,由于面向对象有封装，继承,多态性的特性，可以设计出低耦合的系统,使系统更加灵活,更加易于维护</li><li>缺点: 性能比面向过程低</li></ul></li><li><p>对象是由属性和方法组成的</p><ul><li>属性: 事物的特征,在对象中用属性来表示(常用名词)</li><li>方法: 事物的行为,在对象中用方法来表示(常用动词)</li></ul></li></ul><h4 id="类-class"><a href="#类-class" class="headerlink" title="类(class)"></a>类(<code>class</code>)</h4><ul><li><p><code>类</code>抽象了对象的公共部分,它繁殖某一大类(class)</p></li><li><p><code>对象特指</code>某一个,通过实例化一个具体的对象</p></li><li><p>创建类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">        1. 通过 class 关键字创建类,类名习惯性定义首字母大写</span></span><br><span class="line"><span class="comment">        2. 类里面有个 constructor 函数,可以接受传递过来的参数,同时返回实例对象</span></span><br><span class="line"><span class="comment">        3. constructor 函数只要 new 生成实例时,就会自动调用这个函数,如果我们不写这个函数,类也会自动生成这个函数</span></span><br><span class="line"><span class="comment">        4. 生成实例 new 不能省略</span></span><br><span class="line"><span class="comment">        5. 创建类m类名后面没有小括号,生成实例,类名后面加小括号,构造函数不需要加 function</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建类</span></span><br><span class="line">      <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">          <span class="comment">// 构造函数</span></span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          constructor() 方法是类的构造函数(默认方法) 用于传递参数,返回实例对象,通过new 命令生成对象实例时,自动调用</span></span><br><span class="line"><span class="comment">          该方法,如果没有显示定义,类内部会自动给我们创建一个  constructor()</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="function"><span class="title">constructor</span>(<span class="params">uname</span>)</span> &#123;</span><br><span class="line">              <span class="built_in">this</span>.uname = uname</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 利用类创建对象 new</span></span><br><span class="line">      <span class="keyword">var</span> bin = <span class="keyword">new</span> Star(<span class="string">&#x27;BIN-CODE&#x27;</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(bin);</span><br><span class="line">  </span><br><span class="line">    </span><br></pre></td></tr></table></figure><ul><li><p>类中添加方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// 1. 类里面的所有函数不需要写 function</span></span><br><span class="line"> <span class="comment">// 2. 多个函数方法之间不需要添加逗号分隔  </span></span><br><span class="line"><span class="comment">// 创建明星类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Star</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 构造函数</span></span><br><span class="line">            <span class="function"><span class="title">constructor</span>(<span class="params">uname, age</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.uname = uname;</span><br><span class="line">                <span class="built_in">this</span>.age = age;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">study</span>(<span class="params">song</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;2021.01.16·········&gt;: &#x27;</span> + <span class="built_in">this</span>.uname, <span class="string">&#x27;休息后在唱: &#x27;</span> + song);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">sleep</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;我要睡觉了·········&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> bin = <span class="keyword">new</span> Star(<span class="string">&#x27;Bin-Code&#x27;</span>, <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(bin);</span><br><span class="line">        <span class="comment">// 类方法调用</span></span><br><span class="line">        bin.study(<span class="string">&#x27;时间过客&#x27;</span>);<span class="comment">//输出结果: 2021.01.16·········&gt;: Bin-Code 休息后在唱: 时间过客</span></span><br></pre></td></tr></table></figure><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/javascriptClass.png"></li></ul></li></ul><h4 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h4><ul><li><p>继承</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// super 关键字用于访问和调用对象父类上的函数,可以调用父类的构造函数,也可以调用父类的普通函数</span></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">          1. 继承中,如果实例化子类输出一个方法,先看子类有没有这个方法,如果有就先执行子类的</span></span><br><span class="line"><span class="comment">          2. 继承中,如果子类里面没有,就去查找父类有没有这个方法m如果有,就执行父类的这个方法(就近原则)</span></span><br><span class="line"><span class="comment">      */</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line"><span class="comment">// 父类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// console.log(&#x27;我是父类···&#x27;);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Father类&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;我是子类···&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 实例化父类</span></span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line">father.say() <span class="comment">// 我是父类···</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">// 实例化子类</span></span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br><span class="line">son.say() <span class="comment">// 我是子类···</span></span><br><span class="line">  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cfat</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 类的继承 extends 关键字</span></span><br><span class="line">    <span class="function"><span class="title">say</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">super</span>.say() + <span class="string">&#x27;被继承了···&#x27;</span>); <span class="comment">// Father 类被继承了···</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> cc = <span class="keyword">new</span> Cfat();</span><br><span class="line">cc.say();</span><br></pre></td></tr></table></figure></li><li><p>子类扩展</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 利用 super 调用父类的构造函数</span></span><br><span class="line"><span class="comment">// super 必须在子类 this 之前调用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.x = x;</span><br><span class="line">                <span class="built_in">this</span>.y = y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="title">sum</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;求和结果是: &#x27;</span>, <span class="built_in">this</span>.x + <span class="built_in">this</span>.y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 继承父类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="title">constructor</span>(<span class="params">x, y</span>)</span> &#123;</span><br><span class="line">                <span class="comment">// 目的: 调用父类的加法函数</span></span><br><span class="line">                <span class="comment">// 利用 super 调用父类的构造函数</span></span><br><span class="line">                <span class="comment">// super 必须在子类 this 之前调用</span></span><br><span class="line">                <span class="built_in">super</span>(x, y);</span><br><span class="line">                <span class="built_in">this</span>.x = x;</span><br><span class="line">                <span class="built_in">this</span>.y = y;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 子类扩展</span></span><br><span class="line">            <span class="function"><span class="title">mul</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">&#x27;做差的结果: &#x27;</span>, <span class="built_in">this</span>.x - <span class="built_in">this</span>.y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> son = <span class="keyword">new</span> Son(<span class="number">6</span>, <span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 子类调用父类</span></span><br><span class="line">        son.sum();</span><br><span class="line">        <span class="comment">// 子类调用扩展方法</span></span><br><span class="line">        son.mul();</span><br></pre></td></tr></table></figure></li><li><p>今日<code>https://www.bilibili.com/video/BV1u7411573c?p=8</code></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Javascript-面向对象编程&quot;&gt;&lt;a href=&quot;#Javascript-面向对象编程&quot; class=&quot;headerlink&quot; title=&quot;Javascript-面向对象编程&quot;&gt;&lt;/a&gt;Javascript-面向对象编程&lt;/h3&gt;&lt;h4 id=&quot;面向过程和</summary>
      
    
    
    
    <category term="javascript" scheme="https://lovobin.github.io/categories/javascript/"/>
    
    
    <category term="Javascript" scheme="https://lovobin.github.io/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>Python-Conda虚拟环境</title>
    <link href="https://lovobin.github.io/2021/01/18/Python-Conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>https://lovobin.github.io/2021/01/18/Python-Conda%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</id>
    <published>2021-01-18T14:08:26.000Z</published>
    <updated>2021-03-17T05:10:00.426Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Python-Conda虚拟环境"><a href="#Python-Conda虚拟环境" class="headerlink" title="Python-Conda虚拟环境"></a>Python-Conda虚拟环境</h3><ul><li><p>创建虚拟环境</p><ul><li><p>默认位置</p><ul><li><p>查看当前环境有哪些虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda info --envs</span><br></pre></td></tr></table></figure></li><li><p>创建</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">conda create -n ENV python==3.6(ENV 是新建虚拟环境名称)</span><br></pre></td></tr></table></figure></li><li><p>获取虚拟环境位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 进入 conda 安装位置</span></span><br><span class="line"><span class="built_in">where</span> conda</span><br><span class="line"><span class="built_in">cd</span> D:\ProgramData\Anaconda3\envs (your-path)</span><br><span class="line"><span class="comment"># 进入创建的虚拟环境 ENV</span></span><br><span class="line"><span class="built_in">cd</span> envs/your-venv</span><br></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Scripts</span><br><span class="line"></span><br><span class="line">activate your-venv-name</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>退出虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate env-name</span><br></pre></td></tr></table></figure></li><li><p>删除虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove -n your-env-name --all</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><h3 id="Windows-Python2-虚拟环境"><a href="#Windows-Python2-虚拟环境" class="headerlink" title="Windows Python2 虚拟环境"></a>Windows Python2 虚拟环境</h3><ul><li><p>指定位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建目录</span><br><span class="line">mkdir your-proj-name</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> your-proj-name</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>依赖安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 先进行安装</span></span><br><span class="line"></span><br><span class="line">pip install virtualenv</span><br></pre></td></tr></table></figure></li><li><p>创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">virtualenv venv-name</span><br></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 进入创建的虚拟环境文件夹</span></span><br><span class="line"><span class="built_in">cd</span> venv-name</span><br><span class="line"></span><br><span class="line"><span class="comment"># 激活虚拟环境</span></span><br><span class="line"><span class="comment"># 进入 Scripts 文件夹</span></span><br><span class="line"><span class="built_in">cd</span> Scripts</span><br><span class="line"><span class="comment"># 激活</span></span><br><span class="line">activate venv-name</span><br></pre></td></tr></table></figure></li><li><p>删除虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接删除相应目录</span><br></pre></td></tr></table></figure></li><li><p>成功后</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(your-venv-name)path:</span><br></pre></td></tr></table></figure></li></ul><h3 id="Windows-Python3-虚拟环境"><a href="#Windows-Python3-虚拟环境" class="headerlink" title="Windows Python3 虚拟环境"></a>Windows Python3 虚拟环境</h3><ul><li><p>创建虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># cmd --&gt; 进入指定位置 </span></span><br><span class="line">python -m venv new-venv-name</span><br></pre></td></tr></table></figure></li><li><p>激活虚拟环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示</span></span><br><span class="line">dir</span><br><span class="line"><span class="comment"># 进入 new-venv-name</span></span><br><span class="line"><span class="built_in">cd</span> new-venv-name</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> Scripts</span><br><span class="line"></span><br><span class="line">activate  new-venv-name</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>环境测试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 Flask</span></span><br><span class="line">pip instll flask</span><br></pre></td></tr></table></figure><ul><li><p>进入<code>Python</code>交互式环境</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入交互式环境</span></span><br><span class="line">python </span><br><span class="line"><span class="comment"># 导包</span></span><br><span class="line">import flask</span><br><span class="line"><span class="comment"># 无显示正确</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>Pycharm</code>使用</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/flaskVenv.png" width="600"></li></ul><h3 id="Flask项目使用虚拟环境"><a href="#Flask项目使用虚拟环境" class="headerlink" title="Flask项目使用虚拟环境"></a>Flask项目使用虚拟环境</h3><ul><li><p>使用</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/aloneVenv.png" width="600"></li><li><p>项目测试</p><img src= "https://cdn.jsdelivr.net/gh/lovobin/FileJsDeliver@v1.1.13/gif/3.gif" data-lazy-src="https://gitee.com/wang_hong_bin/repo-bin/raw/master/rightFlask.png"></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;Python-Conda虚拟环境&quot;&gt;&lt;a href=&quot;#Python-Conda虚拟环境&quot; class=&quot;headerlink&quot; title=&quot;Python-Conda虚拟环境&quot;&gt;&lt;/a&gt;Python-Conda虚拟环境&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建虚拟环</summary>
      
    
    
    
    <category term="Python" scheme="https://lovobin.github.io/categories/Python/"/>
    
    
    <category term="python" scheme="https://lovobin.github.io/tags/python/"/>
    
    <category term="conda" scheme="https://lovobin.github.io/tags/conda/"/>
    
  </entry>
  
</feed>
